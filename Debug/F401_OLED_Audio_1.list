
F401_OLED_Audio_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800aa60  0800aa60  0001aa60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae94  0800ae94  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae94  0800ae94  0001ae94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae9c  0800ae9c  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae9c  0800ae9c  0001ae9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aea0  0800aea0  0001aea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800aea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c90  200002d4  0800b178  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f64  0800b178  00021f64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104bd  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef5  00000000  00000000  000307c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  000336b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  000343e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004c7e  00000000  00000000  00034fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001123c  00000000  00000000  00039c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094409  00000000  00000000  0004ae5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df263  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044bc  00000000  00000000  000df2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d4 	.word	0x200002d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aa48 	.word	0x0800aa48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d8 	.word	0x200002d8
 80001dc:	0800aa48 	.word	0x0800aa48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec0:	f000 fb1a 	bl	80014f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec4:	f000 f822 	bl	8000f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec8:	f000 f8de 	bl	8001088 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ecc:	f000 f88a 	bl	8000fe4 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000ed0:	f006 fb6a 	bl	80075a8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  previousTick = HAL_GetTick();
 8000ed4:	f000 fb76 	bl	80015c4 <HAL_GetTick>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <main+0x44>)
 8000edc:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN 3 */
	 // creaData();
	 // func_test_fft();
	 // HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  if (snd_pin_activated){
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <main+0x48>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d007      	beq.n	8000ef8 <main+0x3c>
		 snd_pin_activated=0;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <main+0x48>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000eee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <main+0x4c>)
 8000ef4:	f001 f8a7 	bl	8002046 <HAL_GPIO_TogglePin>
//		 clearBuffer(buffer);
//		 sprintf(buffer,"%s", "Computed magnitudes: \r\n");
//		 CDC_Transmit_FS(buffer, strlen(buffer));
	  }
	  HAL_Delay(200);
 8000ef8:	20c8      	movs	r0, #200	; 0xc8
 8000efa:	f000 fb6f 	bl	80015dc <HAL_Delay>
	  if (snd_pin_activated){
 8000efe:	e7ee      	b.n	8000ede <main+0x22>
 8000f00:	2000033c 	.word	0x2000033c
 8000f04:	20000338 	.word	0x20000338
 8000f08:	40020800 	.word	0x40020800

08000f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	; 0x50
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	2230      	movs	r2, #48	; 0x30
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f007 f876 	bl	800800c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <SystemClock_Config+0xd0>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	4a28      	ldr	r2, [pc, #160]	; (8000fdc <SystemClock_Config+0xd0>)
 8000f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f40:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <SystemClock_Config+0xd0>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <SystemClock_Config+0xd4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f58:	4a21      	ldr	r2, [pc, #132]	; (8000fe0 <SystemClock_Config+0xd4>)
 8000f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <SystemClock_Config+0xd4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f76:	2302      	movs	r3, #2
 8000f78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f80:	2319      	movs	r3, #25
 8000f82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f84:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f8e:	2307      	movs	r3, #7
 8000f90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f92:	f107 0320 	add.w	r3, r7, #32
 8000f96:	4618      	mov	r0, r3
 8000f98:	f002 fb06 	bl	80035a8 <HAL_RCC_OscConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fa2:	f000 f8f9 	bl	8001198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000faa:	2302      	movs	r3, #2
 8000fac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 fd68 	bl	8003a98 <HAL_RCC_ClockConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fce:	f000 f8e3 	bl	8001198 <Error_Handler>
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	3750      	adds	r7, #80	; 0x50
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40007000 	.word	0x40007000

08000fe4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	463b      	mov	r3, r7
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ff6:	4b21      	ldr	r3, [pc, #132]	; (800107c <MX_ADC1_Init+0x98>)
 8000ff8:	4a21      	ldr	r2, [pc, #132]	; (8001080 <MX_ADC1_Init+0x9c>)
 8000ffa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	; (800107c <MX_ADC1_Init+0x98>)
 8000ffe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001002:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <MX_ADC1_Init+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <MX_ADC1_Init+0x98>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <MX_ADC1_Init+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <MX_ADC1_Init+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <MX_ADC1_Init+0x98>)
 8001026:	4a17      	ldr	r2, [pc, #92]	; (8001084 <MX_ADC1_Init+0xa0>)
 8001028:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_ADC1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <MX_ADC1_Init+0x98>)
 8001032:	2201      	movs	r2, #1
 8001034:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_ADC1_Init+0x98>)
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_ADC1_Init+0x98>)
 8001040:	2201      	movs	r2, #1
 8001042:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <MX_ADC1_Init+0x98>)
 8001046:	f000 faed 	bl	8001624 <HAL_ADC_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001050:	f000 f8a2 	bl	8001198 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001054:	2300      	movs	r3, #0
 8001056:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001058:	2301      	movs	r3, #1
 800105a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001060:	463b      	mov	r3, r7
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_ADC1_Init+0x98>)
 8001066:	f000 fb21 	bl	80016ac <HAL_ADC_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001070:	f000 f892 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200002f0 	.word	0x200002f0
 8001080:	40012000 	.word	0x40012000
 8001084:	0f000001 	.word	0x0f000001

08001088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b32      	ldr	r3, [pc, #200]	; (800116c <MX_GPIO_Init+0xe4>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a31      	ldr	r2, [pc, #196]	; (800116c <MX_GPIO_Init+0xe4>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b2f      	ldr	r3, [pc, #188]	; (800116c <MX_GPIO_Init+0xe4>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b2b      	ldr	r3, [pc, #172]	; (800116c <MX_GPIO_Init+0xe4>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a2a      	ldr	r2, [pc, #168]	; (800116c <MX_GPIO_Init+0xe4>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b28      	ldr	r3, [pc, #160]	; (800116c <MX_GPIO_Init+0xe4>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	4b24      	ldr	r3, [pc, #144]	; (800116c <MX_GPIO_Init+0xe4>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a23      	ldr	r2, [pc, #140]	; (800116c <MX_GPIO_Init+0xe4>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <MX_GPIO_Init+0xe4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <MX_GPIO_Init+0xe4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a1c      	ldr	r2, [pc, #112]	; (800116c <MX_GPIO_Init+0xe4>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_GPIO_Init+0xe4>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001114:	4816      	ldr	r0, [pc, #88]	; (8001170 <MX_GPIO_Init+0xe8>)
 8001116:	f000 ff7d 	bl	8002014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800111a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	480f      	ldr	r0, [pc, #60]	; (8001170 <MX_GPIO_Init+0xe8>)
 8001134:	f000 fdea 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SND_Pin */
  GPIO_InitStruct.Pin = SND_Pin;
 8001138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800113e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SND_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4809      	ldr	r0, [pc, #36]	; (8001174 <MX_GPIO_Init+0xec>)
 8001150:	f000 fddc 	bl	8001d0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2105      	movs	r1, #5
 8001158:	2028      	movs	r0, #40	; 0x28
 800115a:	f000 fda0 	bl	8001c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800115e:	2028      	movs	r0, #40	; 0x28
 8001160:	f000 fdb9 	bl	8001cd6 <HAL_NVIC_EnableIRQ>

}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800
 8001170:	40020800 	.word	0x40020800
 8001174:	40020400 	.word	0x40020400

08001178 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
	snd_pin_activated=1;
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	20000338 	.word	0x20000338

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <Error_Handler+0x8>
	...

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <HAL_MspInit+0x4c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <HAL_MspInit+0x4c>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_MspInit+0x4c>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <HAL_MspInit+0x4c>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a17      	ldr	r2, [pc, #92]	; (8001270 <HAL_ADC_MspInit+0x7c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d127      	bne.n	8001266 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_ADC_MspInit+0x80>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a15      	ldr	r2, [pc, #84]	; (8001274 <HAL_ADC_MspInit+0x80>)
 8001220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_ADC_MspInit+0x80>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <HAL_ADC_MspInit+0x80>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <HAL_ADC_MspInit+0x80>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_ADC_MspInit+0x80>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800124e:	2301      	movs	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001252:	2303      	movs	r3, #3
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <HAL_ADC_MspInit+0x84>)
 8001262:	f000 fd53 	bl	8001d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001266:	bf00      	nop
 8001268:	3728      	adds	r7, #40	; 0x28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40012000 	.word	0x40012000
 8001274:	40023800 	.word	0x40023800
 8001278:	40020000 	.word	0x40020000

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <NMI_Handler+0x4>

08001282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <MemManage_Handler+0x4>

0800128e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <UsageFault_Handler+0x4>

0800129a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c8:	f000 f968 	bl	800159c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SND_Pin);
 80012d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012d8:	f000 fed0 	bl	800207c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <OTG_FS_IRQHandler+0x10>)
 80012e6:	f001 f831 	bl	800234c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20001828 	.word	0x20001828

080012f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return 1;
 80012f8:	2301      	movs	r3, #1
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <_kill>:

int _kill(int pid, int sig)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800130e:	f006 fe53 	bl	8007fb8 <__errno>
 8001312:	4603      	mov	r3, r0
 8001314:	2216      	movs	r2, #22
 8001316:	601a      	str	r2, [r3, #0]
  return -1;
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <_exit>:

void _exit (int status)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ffe7 	bl	8001304 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001336:	e7fe      	b.n	8001336 <_exit+0x12>

08001338 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	e00a      	b.n	8001360 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800134a:	f3af 8000 	nop.w
 800134e:	4601      	mov	r1, r0
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	60ba      	str	r2, [r7, #8]
 8001356:	b2ca      	uxtb	r2, r1
 8001358:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3301      	adds	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	dbf0      	blt.n	800134a <_read+0x12>
  }

  return len;
 8001368:	687b      	ldr	r3, [r7, #4]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af00      	add	r7, sp, #0
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	e009      	b.n	8001398 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	60ba      	str	r2, [r7, #8]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	dbf1      	blt.n	8001384 <_write+0x12>
  }
  return len;
 80013a0:	687b      	ldr	r3, [r7, #4]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <_close>:

int _close(int file)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013d2:	605a      	str	r2, [r3, #4]
  return 0;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <_isatty>:

int _isatty(int file)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800141c:	4a14      	ldr	r2, [pc, #80]	; (8001470 <_sbrk+0x5c>)
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <_sbrk+0x60>)
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d102      	bne.n	8001436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <_sbrk+0x64>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <_sbrk+0x68>)
 8001434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <_sbrk+0x64>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	429a      	cmp	r2, r3
 8001442:	d207      	bcs.n	8001454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001444:	f006 fdb8 	bl	8007fb8 <__errno>
 8001448:	4603      	mov	r3, r0
 800144a:	220c      	movs	r2, #12
 800144c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	e009      	b.n	8001468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <_sbrk+0x64>)
 8001464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001466:	68fb      	ldr	r3, [r7, #12]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20018000 	.word	0x20018000
 8001474:	00000400 	.word	0x00000400
 8001478:	20000340 	.word	0x20000340
 800147c:	20001f68 	.word	0x20001f68

08001480 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <SystemInit+0x20>)
 8001486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148a:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <SystemInit+0x20>)
 800148c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a8:	480d      	ldr	r0, [pc, #52]	; (80014e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014aa:	490e      	ldr	r1, [pc, #56]	; (80014e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014ac:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a0b      	ldr	r2, [pc, #44]	; (80014ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014c0:	4c0b      	ldr	r4, [pc, #44]	; (80014f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ce:	f7ff ffd7 	bl	8001480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014d2:	f006 fd77 	bl	8007fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d6:	f7ff fcf1 	bl	8000ebc <main>
  bx  lr    
 80014da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e4:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 80014e8:	0800aea4 	.word	0x0800aea4
  ldr r2, =_sbss
 80014ec:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 80014f0:	20001f64 	.word	0x20001f64

080014f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f4:	e7fe      	b.n	80014f4 <ADC_IRQHandler>
	...

080014f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_Init+0x40>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <HAL_Init+0x40>)
 8001502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001506:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_Init+0x40>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <HAL_Init+0x40>)
 800150e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001512:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_Init+0x40>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a07      	ldr	r2, [pc, #28]	; (8001538 <HAL_Init+0x40>)
 800151a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001520:	2003      	movs	r0, #3
 8001522:	f000 fbb1 	bl	8001c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001526:	200f      	movs	r0, #15
 8001528:	f000 f808 	bl	800153c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800152c:	f7ff fe3a 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023c00 	.word	0x40023c00

0800153c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_InitTick+0x54>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_InitTick+0x58>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001552:	fbb3 f3f1 	udiv	r3, r3, r1
 8001556:	fbb2 f3f3 	udiv	r3, r2, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f000 fbc9 	bl	8001cf2 <HAL_SYSTICK_Config>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e00e      	b.n	8001588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b0f      	cmp	r3, #15
 800156e:	d80a      	bhi.n	8001586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001570:	2200      	movs	r2, #0
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f000 fb91 	bl	8001c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800157c:	4a06      	ldr	r2, [pc, #24]	; (8001598 <HAL_InitTick+0x5c>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	e000      	b.n	8001588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000000 	.word	0x20000000
 8001594:	20000008 	.word	0x20000008
 8001598:	20000004 	.word	0x20000004

0800159c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_IncTick+0x20>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_IncTick+0x24>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <HAL_IncTick+0x24>)
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000008 	.word	0x20000008
 80015c0:	20000344 	.word	0x20000344

080015c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return uwTick;
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <HAL_GetTick+0x14>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000344 	.word	0x20000344

080015dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e4:	f7ff ffee 	bl	80015c4 <HAL_GetTick>
 80015e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f4:	d005      	beq.n	8001602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_Delay+0x44>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001602:	bf00      	nop
 8001604:	f7ff ffde 	bl	80015c4 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	429a      	cmp	r2, r3
 8001612:	d8f7      	bhi.n	8001604 <HAL_Delay+0x28>
  {
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000008 	.word	0x20000008

08001624 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e033      	b.n	80016a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fdd6 	bl	80011f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	2b00      	cmp	r3, #0
 8001660:	d118      	bne.n	8001694 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800166a:	f023 0302 	bic.w	r3, r3, #2
 800166e:	f043 0202 	orr.w	r2, r3, #2
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f93a 	bl	80018f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f023 0303 	bic.w	r3, r3, #3
 800168a:	f043 0201 	orr.w	r2, r3, #1
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	641a      	str	r2, [r3, #64]	; 0x40
 8001692:	e001      	b.n	8001698 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x1c>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e105      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x228>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b09      	cmp	r3, #9
 80016d6:	d925      	bls.n	8001724 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68d9      	ldr	r1, [r3, #12]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	3b1e      	subs	r3, #30
 80016ee:	2207      	movs	r2, #7
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43da      	mvns	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	400a      	ands	r2, r1
 80016fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68d9      	ldr	r1, [r3, #12]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	b29b      	uxth	r3, r3
 800170e:	4618      	mov	r0, r3
 8001710:	4603      	mov	r3, r0
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4403      	add	r3, r0
 8001716:	3b1e      	subs	r3, #30
 8001718:	409a      	lsls	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	e022      	b.n	800176a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6919      	ldr	r1, [r3, #16]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	b29b      	uxth	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	4613      	mov	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	2207      	movs	r2, #7
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	400a      	ands	r2, r1
 8001746:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6919      	ldr	r1, [r3, #16]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	4618      	mov	r0, r3
 800175a:	4603      	mov	r3, r0
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4403      	add	r3, r0
 8001760:	409a      	lsls	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b06      	cmp	r3, #6
 8001770:	d824      	bhi.n	80017bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	3b05      	subs	r3, #5
 8001784:	221f      	movs	r2, #31
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	400a      	ands	r2, r1
 8001792:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	3b05      	subs	r3, #5
 80017ae:	fa00 f203 	lsl.w	r2, r0, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	635a      	str	r2, [r3, #52]	; 0x34
 80017ba:	e04c      	b.n	8001856 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b0c      	cmp	r3, #12
 80017c2:	d824      	bhi.n	800180e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	3b23      	subs	r3, #35	; 0x23
 80017d6:	221f      	movs	r2, #31
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43da      	mvns	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	400a      	ands	r2, r1
 80017e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	3b23      	subs	r3, #35	; 0x23
 8001800:	fa00 f203 	lsl.w	r2, r0, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	631a      	str	r2, [r3, #48]	; 0x30
 800180c:	e023      	b.n	8001856 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	3b41      	subs	r3, #65	; 0x41
 8001820:	221f      	movs	r2, #31
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	400a      	ands	r2, r1
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	b29b      	uxth	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	3b41      	subs	r3, #65	; 0x41
 800184a:	fa00 f203 	lsl.w	r2, r0, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_ADC_ConfigChannel+0x234>)
 8001858:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <HAL_ADC_ConfigChannel+0x238>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d109      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x1cc>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b12      	cmp	r3, #18
 800186a:	d105      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a19      	ldr	r2, [pc, #100]	; (80018e4 <HAL_ADC_ConfigChannel+0x238>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d123      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x21e>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b10      	cmp	r3, #16
 8001888:	d003      	beq.n	8001892 <HAL_ADC_ConfigChannel+0x1e6>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b11      	cmp	r3, #17
 8001890:	d11b      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b10      	cmp	r3, #16
 80018a4:	d111      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_ADC_ConfigChannel+0x23c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a10      	ldr	r2, [pc, #64]	; (80018ec <HAL_ADC_ConfigChannel+0x240>)
 80018ac:	fba2 2303 	umull	r2, r3, r2, r3
 80018b0:	0c9a      	lsrs	r2, r3, #18
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018bc:	e002      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f9      	bne.n	80018be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40012300 	.word	0x40012300
 80018e4:	40012000 	.word	0x40012000
 80018e8:	20000000 	.word	0x20000000
 80018ec:	431bde83 	.word	0x431bde83

080018f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018f8:	4b79      	ldr	r3, [pc, #484]	; (8001ae0 <ADC_Init+0x1f0>)
 80018fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	431a      	orrs	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001924:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6859      	ldr	r1, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	021a      	lsls	r2, r3, #8
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001948:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6859      	ldr	r1, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800196a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6899      	ldr	r1, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001982:	4a58      	ldr	r2, [pc, #352]	; (8001ae4 <ADC_Init+0x1f4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d022      	beq.n	80019ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001996:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6899      	ldr	r1, [r3, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6899      	ldr	r1, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	e00f      	b.n	80019ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0202 	bic.w	r2, r2, #2
 80019fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6899      	ldr	r1, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7e1b      	ldrb	r3, [r3, #24]
 8001a08:	005a      	lsls	r2, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01b      	beq.n	8001a54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6859      	ldr	r1, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	3b01      	subs	r3, #1
 8001a48:	035a      	lsls	r2, r3, #13
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	e007      	b.n	8001a64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	051a      	lsls	r2, r3, #20
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6899      	ldr	r1, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aa6:	025a      	lsls	r2, r3, #9
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001abe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6899      	ldr	r1, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	029a      	lsls	r2, r3, #10
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	609a      	str	r2, [r3, #8]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	40012300 	.word	0x40012300
 8001ae4:	0f000001 	.word	0x0f000001

08001ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	db0b      	blt.n	8001b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	f003 021f 	and.w	r2, r3, #31
 8001b64:	4907      	ldr	r1, [pc, #28]	; (8001b84 <__NVIC_EnableIRQ+0x38>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	; (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f1c3 0307 	rsb	r3, r3, #7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf28      	it	cs
 8001bfa:	2304      	movcs	r3, #4
 8001bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d902      	bls.n	8001c0c <NVIC_EncodePriority+0x30>
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3b03      	subs	r3, #3
 8001c0a:	e000      	b.n	8001c0e <NVIC_EncodePriority+0x32>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43d9      	mvns	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	4313      	orrs	r3, r2
         );
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	; 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c54:	d301      	bcc.n	8001c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00f      	b.n	8001c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <SysTick_Config+0x40>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c62:	210f      	movs	r1, #15
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f7ff ff8e 	bl	8001b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <SysTick_Config+0x40>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c72:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <SysTick_Config+0x40>)
 8001c74:	2207      	movs	r2, #7
 8001c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	e000e010 	.word	0xe000e010

08001c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ff29 	bl	8001ae8 <__NVIC_SetPriorityGrouping>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb0:	f7ff ff3e 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 8001cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	6978      	ldr	r0, [r7, #20]
 8001cbc:	f7ff ff8e 	bl	8001bdc <NVIC_EncodePriority>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff5d 	bl	8001b88 <__NVIC_SetPriority>
}
 8001cce:	bf00      	nop
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff31 	bl	8001b4c <__NVIC_EnableIRQ>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ffa2 	bl	8001c44 <SysTick_Config>
 8001d00:	4603      	mov	r3, r0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	e159      	b.n	8001fdc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d28:	2201      	movs	r2, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	f040 8148 	bne.w	8001fd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d005      	beq.n	8001d5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d130      	bne.n	8001dc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2203      	movs	r2, #3
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d94:	2201      	movs	r2, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 0201 	and.w	r2, r3, #1
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d017      	beq.n	8001dfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d123      	bne.n	8001e50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	08da      	lsrs	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3208      	adds	r2, #8
 8001e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	08da      	lsrs	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3208      	adds	r2, #8
 8001e4a:	69b9      	ldr	r1, [r7, #24]
 8001e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0203 	and.w	r2, r3, #3
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80a2 	beq.w	8001fd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b57      	ldr	r3, [pc, #348]	; (8001ff4 <HAL_GPIO_Init+0x2e8>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	4a56      	ldr	r2, [pc, #344]	; (8001ff4 <HAL_GPIO_Init+0x2e8>)
 8001e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea2:	4b54      	ldr	r3, [pc, #336]	; (8001ff4 <HAL_GPIO_Init+0x2e8>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eae:	4a52      	ldr	r2, [pc, #328]	; (8001ff8 <HAL_GPIO_Init+0x2ec>)
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a49      	ldr	r2, [pc, #292]	; (8001ffc <HAL_GPIO_Init+0x2f0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d019      	beq.n	8001f0e <HAL_GPIO_Init+0x202>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a48      	ldr	r2, [pc, #288]	; (8002000 <HAL_GPIO_Init+0x2f4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d013      	beq.n	8001f0a <HAL_GPIO_Init+0x1fe>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a47      	ldr	r2, [pc, #284]	; (8002004 <HAL_GPIO_Init+0x2f8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00d      	beq.n	8001f06 <HAL_GPIO_Init+0x1fa>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a46      	ldr	r2, [pc, #280]	; (8002008 <HAL_GPIO_Init+0x2fc>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d007      	beq.n	8001f02 <HAL_GPIO_Init+0x1f6>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a45      	ldr	r2, [pc, #276]	; (800200c <HAL_GPIO_Init+0x300>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d101      	bne.n	8001efe <HAL_GPIO_Init+0x1f2>
 8001efa:	2304      	movs	r3, #4
 8001efc:	e008      	b.n	8001f10 <HAL_GPIO_Init+0x204>
 8001efe:	2307      	movs	r3, #7
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x204>
 8001f02:	2303      	movs	r3, #3
 8001f04:	e004      	b.n	8001f10 <HAL_GPIO_Init+0x204>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e002      	b.n	8001f10 <HAL_GPIO_Init+0x204>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_GPIO_Init+0x204>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	f002 0203 	and.w	r2, r2, #3
 8001f16:	0092      	lsls	r2, r2, #2
 8001f18:	4093      	lsls	r3, r2
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f20:	4935      	ldr	r1, [pc, #212]	; (8001ff8 <HAL_GPIO_Init+0x2ec>)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	3302      	adds	r3, #2
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f2e:	4b38      	ldr	r3, [pc, #224]	; (8002010 <HAL_GPIO_Init+0x304>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f52:	4a2f      	ldr	r2, [pc, #188]	; (8002010 <HAL_GPIO_Init+0x304>)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f58:	4b2d      	ldr	r3, [pc, #180]	; (8002010 <HAL_GPIO_Init+0x304>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f7c:	4a24      	ldr	r2, [pc, #144]	; (8002010 <HAL_GPIO_Init+0x304>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f82:	4b23      	ldr	r3, [pc, #140]	; (8002010 <HAL_GPIO_Init+0x304>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fa6:	4a1a      	ldr	r2, [pc, #104]	; (8002010 <HAL_GPIO_Init+0x304>)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fac:	4b18      	ldr	r3, [pc, #96]	; (8002010 <HAL_GPIO_Init+0x304>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fd0:	4a0f      	ldr	r2, [pc, #60]	; (8002010 <HAL_GPIO_Init+0x304>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	2b0f      	cmp	r3, #15
 8001fe0:	f67f aea2 	bls.w	8001d28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3724      	adds	r7, #36	; 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40013800 	.word	0x40013800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40020400 	.word	0x40020400
 8002004:	40020800 	.word	0x40020800
 8002008:	40020c00 	.word	0x40020c00
 800200c:	40021000 	.word	0x40021000
 8002010:	40013c00 	.word	0x40013c00

08002014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	807b      	strh	r3, [r7, #2]
 8002020:	4613      	mov	r3, r2
 8002022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002024:	787b      	ldrb	r3, [r7, #1]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800202a:	887a      	ldrh	r2, [r7, #2]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002030:	e003      	b.n	800203a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002032:	887b      	ldrh	r3, [r7, #2]
 8002034:	041a      	lsls	r2, r3, #16
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	619a      	str	r2, [r3, #24]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002046:	b480      	push	{r7}
 8002048:	b085      	sub	sp, #20
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	460b      	mov	r3, r1
 8002050:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002058:	887a      	ldrh	r2, [r7, #2]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4013      	ands	r3, r2
 800205e:	041a      	lsls	r2, r3, #16
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	43d9      	mvns	r1, r3
 8002064:	887b      	ldrh	r3, [r7, #2]
 8002066:	400b      	ands	r3, r1
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	619a      	str	r2, [r3, #24]
}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	88fb      	ldrh	r3, [r7, #6]
 800208c:	4013      	ands	r3, r2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d006      	beq.n	80020a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002092:	4a05      	ldr	r2, [pc, #20]	; (80020a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002094:	88fb      	ldrh	r3, [r7, #6]
 8002096:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff f86c 	bl	8001178 <HAL_GPIO_EXTI_Callback>
  }
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40013c00 	.word	0x40013c00

080020ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ae:	b08f      	sub	sp, #60	; 0x3c
 80020b0:	af0a      	add	r7, sp, #40	; 0x28
 80020b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e10f      	b.n	80022de <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d106      	bne.n	80020de <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f005 fc59 	bl	8007990 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2203      	movs	r2, #3
 80020e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d102      	bne.n	80020f8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f001 ff98 	bl	8004032 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	687e      	ldr	r6, [r7, #4]
 800210a:	466d      	mov	r5, sp
 800210c:	f106 0410 	add.w	r4, r6, #16
 8002110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002118:	e894 0003 	ldmia.w	r4, {r0, r1}
 800211c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002120:	1d33      	adds	r3, r6, #4
 8002122:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002124:	6838      	ldr	r0, [r7, #0]
 8002126:	f001 fe6f 	bl	8003e08 <USB_CoreInit>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0d0      	b.n	80022de <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f001 ff86 	bl	8004054 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]
 800214c:	e04a      	b.n	80021e4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	333d      	adds	r3, #61	; 0x3d
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	333c      	adds	r3, #60	; 0x3c
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	b298      	uxth	r0, r3
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	3344      	adds	r3, #68	; 0x44
 800218a:	4602      	mov	r2, r0
 800218c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	3340      	adds	r3, #64	; 0x40
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	3348      	adds	r3, #72	; 0x48
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	334c      	adds	r3, #76	; 0x4c
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	3354      	adds	r3, #84	; 0x54
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	3301      	adds	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d3af      	bcc.n	800214e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]
 80021f2:	e044      	b.n	800227e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	3301      	adds	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	429a      	cmp	r2, r3
 8002286:	d3b5      	bcc.n	80021f4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	687e      	ldr	r6, [r7, #4]
 8002290:	466d      	mov	r5, sp
 8002292:	f106 0410 	add.w	r4, r6, #16
 8002296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80022a6:	1d33      	adds	r3, r6, #4
 80022a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022aa:	6838      	ldr	r0, [r7, #0]
 80022ac:	f001 ff1e 	bl	80040ec <USB_DevInit>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2202      	movs	r2, #2
 80022ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e00d      	b.n	80022de <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 f86d 	bl	80053b6 <USB_DevDisconnect>

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_PCD_Start+0x1c>
 80022fe:	2302      	movs	r3, #2
 8002300:	e020      	b.n	8002344 <HAL_PCD_Start+0x5e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230e:	2b01      	cmp	r3, #1
 8002310:	d109      	bne.n	8002326 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002316:	2b01      	cmp	r3, #1
 8002318:	d005      	beq.n	8002326 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f001 fe70 	bl	8004010 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f003 f81d 	bl	8005374 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800234c:	b590      	push	{r4, r7, lr}
 800234e:	b08d      	sub	sp, #52	; 0x34
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f003 f8db 	bl	800551e <USB_GetMode>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 848a 	bne.w	8002c84 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f003 f83f 	bl	80053f8 <USB_ReadInterrupts>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 8480 	beq.w	8002c82 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f003 f82c 	bl	80053f8 <USB_ReadInterrupts>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d107      	bne.n	80023ba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f002 0202 	and.w	r2, r2, #2
 80023b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 f81a 	bl	80053f8 <USB_ReadInterrupts>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	2b10      	cmp	r3, #16
 80023cc:	d161      	bne.n	8002492 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699a      	ldr	r2, [r3, #24]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0210 	bic.w	r2, r2, #16
 80023dc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	f003 020f 	and.w	r2, r3, #15
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	3304      	adds	r3, #4
 80023fc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	0c5b      	lsrs	r3, r3, #17
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	2b02      	cmp	r3, #2
 8002408:	d124      	bne.n	8002454 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002410:	4013      	ands	r3, r2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d035      	beq.n	8002482 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002420:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002424:	b29b      	uxth	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	6a38      	ldr	r0, [r7, #32]
 800242a:	f002 fe51 	bl	80050d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800243a:	441a      	add	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	6a1a      	ldr	r2, [r3, #32]
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	091b      	lsrs	r3, r3, #4
 8002448:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800244c:	441a      	add	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	621a      	str	r2, [r3, #32]
 8002452:	e016      	b.n	8002482 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	0c5b      	lsrs	r3, r3, #17
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	2b06      	cmp	r3, #6
 800245e:	d110      	bne.n	8002482 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002466:	2208      	movs	r2, #8
 8002468:	4619      	mov	r1, r3
 800246a:	6a38      	ldr	r0, [r7, #32]
 800246c:	f002 fe30 	bl	80050d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	6a1a      	ldr	r2, [r3, #32]
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800247c:	441a      	add	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699a      	ldr	r2, [r3, #24]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0210 	orr.w	r2, r2, #16
 8002490:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f002 ffae 	bl	80053f8 <USB_ReadInterrupts>
 800249c:	4603      	mov	r3, r0
 800249e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024a6:	f040 80a7 	bne.w	80025f8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f002 ffb3 	bl	800541e <USB_ReadDevAllOutEpInterrupt>
 80024b8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80024ba:	e099      	b.n	80025f0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80024bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 808e 	beq.w	80025e4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f002 ffd7 	bl	8005486 <USB_ReadDevOutEPInterrupt>
 80024d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00c      	beq.n	80024fe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f0:	461a      	mov	r2, r3
 80024f2:	2301      	movs	r3, #1
 80024f4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fec3 	bl	8003284 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00c      	beq.n	8002522 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002514:	461a      	mov	r2, r3
 8002516:	2308      	movs	r3, #8
 8002518:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800251a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 ff99 	bl	8003454 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002538:	461a      	mov	r2, r3
 800253a:	2310      	movs	r3, #16
 800253c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d030      	beq.n	80025aa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002550:	2b80      	cmp	r3, #128	; 0x80
 8002552:	d109      	bne.n	8002568 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002566:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256a:	4613      	mov	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	3304      	adds	r3, #4
 800257c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	78db      	ldrb	r3, [r3, #3]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d108      	bne.n	8002598 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2200      	movs	r2, #0
 800258a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	b2db      	uxtb	r3, r3
 8002590:	4619      	mov	r1, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f005 fb02 	bl	8007b9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a4:	461a      	mov	r2, r3
 80025a6:	2302      	movs	r3, #2
 80025a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c0:	461a      	mov	r2, r3
 80025c2:	2320      	movs	r3, #32
 80025c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d009      	beq.n	80025e4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025dc:	461a      	mov	r2, r3
 80025de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	3301      	adds	r3, #1
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ec:	085b      	lsrs	r3, r3, #1
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f47f af62 	bne.w	80024bc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f002 fefb 	bl	80053f8 <USB_ReadInterrupts>
 8002602:	4603      	mov	r3, r0
 8002604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002608:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800260c:	f040 80db 	bne.w	80027c6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f002 ff1c 	bl	8005452 <USB_ReadDevAllInEpInterrupt>
 800261a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002620:	e0cd      	b.n	80027be <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80c2 	beq.w	80027b2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f002 ff42 	bl	80054c2 <USB_ReadDevInEPInterrupt>
 800263e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d057      	beq.n	80026fa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	2201      	movs	r2, #1
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800265e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	43db      	mvns	r3, r3
 8002664:	69f9      	ldr	r1, [r7, #28]
 8002666:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800266a:	4013      	ands	r3, r2
 800266c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800267a:	461a      	mov	r2, r3
 800267c:	2301      	movs	r3, #1
 800267e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d132      	bne.n	80026ee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	334c      	adds	r3, #76	; 0x4c
 8002698:	6819      	ldr	r1, [r3, #0]
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269e:	4613      	mov	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4413      	add	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4403      	add	r3, r0
 80026a8:	3348      	adds	r3, #72	; 0x48
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4419      	add	r1, r3
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4403      	add	r3, r0
 80026bc:	334c      	adds	r3, #76	; 0x4c
 80026be:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d113      	bne.n	80026ee <HAL_PCD_IRQHandler+0x3a2>
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	3354      	adds	r3, #84	; 0x54
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d108      	bne.n	80026ee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026e6:	461a      	mov	r2, r3
 80026e8:	2101      	movs	r1, #1
 80026ea:	f002 ff49 	bl	8005580 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	4619      	mov	r1, r3
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f005 f9cc 	bl	8007a92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	4413      	add	r3, r2
 800270c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002710:	461a      	mov	r2, r3
 8002712:	2308      	movs	r3, #8
 8002714:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	4413      	add	r3, r2
 8002728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800272c:	461a      	mov	r2, r3
 800272e:	2310      	movs	r3, #16
 8002730:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	4413      	add	r3, r2
 8002744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002748:	461a      	mov	r2, r3
 800274a:	2340      	movs	r3, #64	; 0x40
 800274c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d023      	beq.n	80027a0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800275a:	6a38      	ldr	r0, [r7, #32]
 800275c:	f001 fe2a 	bl	80043b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002762:	4613      	mov	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	3338      	adds	r3, #56	; 0x38
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	4413      	add	r3, r2
 8002770:	3304      	adds	r3, #4
 8002772:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	78db      	ldrb	r3, [r3, #3]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d108      	bne.n	800278e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2200      	movs	r2, #0
 8002780:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	b2db      	uxtb	r3, r3
 8002786:	4619      	mov	r1, r3
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f005 fa19 	bl	8007bc0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	4413      	add	r3, r2
 8002796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800279a:	461a      	mov	r2, r3
 800279c:	2302      	movs	r3, #2
 800279e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fcdb 	bl	8003168 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	3301      	adds	r3, #1
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ba:	085b      	lsrs	r3, r3, #1
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f47f af2e 	bne.w	8002622 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f002 fe14 	bl	80053f8 <USB_ReadInterrupts>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027da:	d122      	bne.n	8002822 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d108      	bne.n	800280c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002802:	2100      	movs	r1, #0
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fec3 	bl	8003590 <HAL_PCDEx_LPM_Callback>
 800280a:	e002      	b.n	8002812 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f005 f9b7 	bl	8007b80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002820:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f002 fde6 	bl	80053f8 <USB_ReadInterrupts>
 800282c:	4603      	mov	r3, r0
 800282e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002836:	d112      	bne.n	800285e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	d102      	bne.n	800284e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f005 f973 	bl	8007b34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800285c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f002 fdc8 	bl	80053f8 <USB_ReadInterrupts>
 8002868:	4603      	mov	r3, r0
 800286a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002872:	f040 80b7 	bne.w	80029e4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2110      	movs	r1, #16
 8002890:	4618      	mov	r0, r3
 8002892:	f001 fd8f 	bl	80043b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002896:	2300      	movs	r3, #0
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800289a:	e046      	b.n	800292a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a8:	461a      	mov	r2, r3
 80028aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028c0:	0151      	lsls	r1, r2, #5
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	440a      	add	r2, r1
 80028c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028dc:	461a      	mov	r2, r3
 80028de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028f4:	0151      	lsls	r1, r2, #5
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	440a      	add	r2, r1
 80028fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002902:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	4413      	add	r3, r2
 800290c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002914:	0151      	lsls	r1, r2, #5
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	440a      	add	r2, r1
 800291a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800291e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002922:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002926:	3301      	adds	r3, #1
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002930:	429a      	cmp	r2, r3
 8002932:	d3b3      	bcc.n	800289c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002942:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002946:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	2b00      	cmp	r3, #0
 800294e:	d016      	beq.n	800297e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002960:	f043 030b 	orr.w	r3, r3, #11
 8002964:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800296e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002976:	f043 030b 	orr.w	r3, r3, #11
 800297a:	6453      	str	r3, [r2, #68]	; 0x44
 800297c:	e015      	b.n	80029aa <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	69fa      	ldr	r2, [r7, #28]
 8002988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800298c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002990:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002994:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029a4:	f043 030b 	orr.w	r3, r3, #11
 80029a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80029bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029ce:	461a      	mov	r2, r3
 80029d0:	f002 fdd6 	bl	8005580 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80029e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f002 fd05 	bl	80053f8 <USB_ReadInterrupts>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f8:	d124      	bne.n	8002a44 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f002 fd9b 	bl	800553a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f001 fd50 	bl	80044ae <USB_GetDevSpeed>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	461a      	mov	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681c      	ldr	r4, [r3, #0]
 8002a1a:	f001 f9e9 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8002a1e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
 8002a28:	4620      	mov	r0, r4
 8002a2a:	f001 fa4f 	bl	8003ecc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f005 f857 	bl	8007ae2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a42:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f002 fcd5 	bl	80053f8 <USB_ReadInterrupts>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d10a      	bne.n	8002a6e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f005 f834 	bl	8007ac6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f002 0208 	and.w	r2, r2, #8
 8002a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f002 fcc0 	bl	80053f8 <USB_ReadInterrupts>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7e:	2b80      	cmp	r3, #128	; 0x80
 8002a80:	d122      	bne.n	8002ac8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a8e:	2301      	movs	r3, #1
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
 8002a92:	e014      	b.n	8002abe <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d105      	bne.n	8002ab8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fb27 	bl	8003106 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	3301      	adds	r3, #1
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d3e5      	bcc.n	8002a94 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f002 fc93 	bl	80053f8 <USB_ReadInterrupts>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002adc:	d13b      	bne.n	8002b56 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ade:	2301      	movs	r3, #1
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae2:	e02b      	b.n	8002b3c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	3340      	adds	r3, #64	; 0x40
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d115      	bne.n	8002b36 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b0a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	da12      	bge.n	8002b36 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	333f      	adds	r3, #63	; 0x3f
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	4619      	mov	r1, r3
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 fae8 	bl	8003106 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	3301      	adds	r3, #1
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d3ce      	bcc.n	8002ae4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695a      	ldr	r2, [r3, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f002 fc4c 	bl	80053f8 <USB_ReadInterrupts>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b6a:	d155      	bne.n	8002c18 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b70:	e045      	b.n	8002bfe <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d12e      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b9a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	da2b      	bge.n	8002bf8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002bac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d121      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10a      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bf4:	6053      	str	r3, [r2, #4]
            break;
 8002bf6:	e007      	b.n	8002c08 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d3b4      	bcc.n	8002b72 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f002 fbeb 	bl	80053f8 <USB_ReadInterrupts>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2c:	d10a      	bne.n	8002c44 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f004 ffd8 	bl	8007be4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f002 fbd5 	bl	80053f8 <USB_ReadInterrupts>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d115      	bne.n	8002c84 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f004 ffc8 	bl	8007c00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	e000      	b.n	8002c84 <HAL_PCD_IRQHandler+0x938>
      return;
 8002c82:	bf00      	nop
    }
  }
}
 8002c84:	3734      	adds	r7, #52	; 0x34
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd90      	pop	{r4, r7, pc}

08002c8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_PCD_SetAddress+0x1a>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e013      	b.n	8002ccc <HAL_PCD_SetAddress+0x42>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f002 fb33 	bl	8005328 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	4608      	mov	r0, r1
 8002cde:	4611      	mov	r1, r2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	70fb      	strb	r3, [r7, #3]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	803b      	strh	r3, [r7, #0]
 8002cea:	4613      	mov	r3, r2
 8002cec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	da0f      	bge.n	8002d1a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	f003 020f 	and.w	r2, r3, #15
 8002d00:	4613      	mov	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	3338      	adds	r3, #56	; 0x38
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3304      	adds	r3, #4
 8002d10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	705a      	strb	r2, [r3, #1]
 8002d18:	e00f      	b.n	8002d3a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	f003 020f 	and.w	r2, r3, #15
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	4413      	add	r3, r2
 8002d30:	3304      	adds	r3, #4
 8002d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d46:	883a      	ldrh	r2, [r7, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	78ba      	ldrb	r2, [r7, #2]
 8002d50:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	785b      	ldrb	r3, [r3, #1]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d004      	beq.n	8002d64 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d64:	78bb      	ldrb	r3, [r7, #2]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d102      	bne.n	8002d70 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_PCD_EP_Open+0xaa>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e00e      	b.n	8002d9c <HAL_PCD_EP_Open+0xc8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68f9      	ldr	r1, [r7, #12]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 fbb3 	bl	80044f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	da0f      	bge.n	8002dd8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	f003 020f 	and.w	r2, r3, #15
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	3338      	adds	r3, #56	; 0x38
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	4413      	add	r3, r2
 8002dcc:	3304      	adds	r3, #4
 8002dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	705a      	strb	r2, [r3, #1]
 8002dd6:	e00f      	b.n	8002df8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	f003 020f 	and.w	r2, r3, #15
 8002dde:	4613      	mov	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	3304      	adds	r3, #4
 8002df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_PCD_EP_Close+0x6e>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e00e      	b.n	8002e30 <HAL_PCD_EP_Close+0x8c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68f9      	ldr	r1, [r7, #12]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 fbf1 	bl	8004608 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	460b      	mov	r3, r1
 8002e46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e48:	7afb      	ldrb	r3, [r7, #11]
 8002e4a:	f003 020f 	and.w	r2, r3, #15
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3304      	adds	r3, #4
 8002e60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2200      	movs	r2, #0
 8002e72:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2200      	movs	r2, #0
 8002e78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e7a:	7afb      	ldrb	r3, [r7, #11]
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d102      	bne.n	8002e94 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e94:	7afb      	ldrb	r3, [r7, #11]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6979      	ldr	r1, [r7, #20]
 8002eac:	f001 fed0 	bl	8004c50 <USB_EP0StartXfer>
 8002eb0:	e008      	b.n	8002ec4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	6979      	ldr	r1, [r7, #20]
 8002ec0:	f001 fc7e 	bl	80047c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	f003 020f 	and.w	r2, r3, #15
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002ef0:	681b      	ldr	r3, [r3, #0]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b086      	sub	sp, #24
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f0e:	7afb      	ldrb	r3, [r7, #11]
 8002f10:	f003 020f 	and.w	r2, r3, #15
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	3338      	adds	r3, #56	; 0x38
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4413      	add	r3, r2
 8002f22:	3304      	adds	r3, #4
 8002f24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2200      	movs	r2, #0
 8002f36:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f3e:	7afb      	ldrb	r3, [r7, #11]
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d102      	bne.n	8002f58 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f58:	7afb      	ldrb	r3, [r7, #11]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	6979      	ldr	r1, [r7, #20]
 8002f70:	f001 fe6e 	bl	8004c50 <USB_EP0StartXfer>
 8002f74:	e008      	b.n	8002f88 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	6979      	ldr	r1, [r7, #20]
 8002f84:	f001 fc1c 	bl	80047c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	f003 020f 	and.w	r2, r3, #15
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d901      	bls.n	8002fb0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e050      	b.n	8003052 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	da0f      	bge.n	8002fd8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 020f 	and.w	r2, r3, #15
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	3338      	adds	r3, #56	; 0x38
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4413      	add	r3, r2
 8002fcc:	3304      	adds	r3, #4
 8002fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	705a      	strb	r2, [r3, #1]
 8002fd6:	e00d      	b.n	8002ff4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	3304      	adds	r3, #4
 8002fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	b2da      	uxtb	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_PCD_EP_SetStall+0x82>
 8003010:	2302      	movs	r3, #2
 8003012:	e01e      	b.n	8003052 <HAL_PCD_EP_SetStall+0xc0>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68f9      	ldr	r1, [r7, #12]
 8003022:	4618      	mov	r0, r3
 8003024:	f002 f8ac 	bl	8005180 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	b2d9      	uxtb	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003042:	461a      	mov	r2, r3
 8003044:	f002 fa9c 	bl	8005580 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	f003 020f 	and.w	r2, r3, #15
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	429a      	cmp	r2, r3
 8003072:	d901      	bls.n	8003078 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e042      	b.n	80030fe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800307c:	2b00      	cmp	r3, #0
 800307e:	da0f      	bge.n	80030a0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	f003 020f 	and.w	r2, r3, #15
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	3338      	adds	r3, #56	; 0x38
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	3304      	adds	r3, #4
 8003096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	705a      	strb	r2, [r3, #1]
 800309e:	e00f      	b.n	80030c0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	f003 020f 	and.w	r2, r3, #15
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	3304      	adds	r3, #4
 80030b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_PCD_EP_ClrStall+0x86>
 80030dc:	2302      	movs	r3, #2
 80030de:	e00e      	b.n	80030fe <HAL_PCD_EP_ClrStall+0xa4>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68f9      	ldr	r1, [r7, #12]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f002 f8b4 	bl	800525c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	460b      	mov	r3, r1
 8003110:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003116:	2b00      	cmp	r3, #0
 8003118:	da0c      	bge.n	8003134 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	f003 020f 	and.w	r2, r3, #15
 8003120:	4613      	mov	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	3338      	adds	r3, #56	; 0x38
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	3304      	adds	r3, #4
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	e00c      	b.n	800314e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	f003 020f 	and.w	r2, r3, #15
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	3304      	adds	r3, #4
 800314c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68f9      	ldr	r1, [r7, #12]
 8003154:	4618      	mov	r0, r3
 8003156:	f001 fed3 	bl	8004f00 <USB_EPStopXfer>
 800315a:	4603      	mov	r3, r0
 800315c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800315e:	7afb      	ldrb	r3, [r7, #11]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08a      	sub	sp, #40	; 0x28
 800316c:	af02      	add	r7, sp, #8
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	3338      	adds	r3, #56	; 0x38
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4413      	add	r3, r2
 800318c:	3304      	adds	r3, #4
 800318e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a1a      	ldr	r2, [r3, #32]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	429a      	cmp	r2, r3
 800319a:	d901      	bls.n	80031a0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e06c      	b.n	800327a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	699a      	ldr	r2, [r3, #24]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d902      	bls.n	80031bc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	3303      	adds	r3, #3
 80031c0:	089b      	lsrs	r3, r3, #2
 80031c2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031c4:	e02b      	b.n	800321e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	699a      	ldr	r2, [r3, #24]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d902      	bls.n	80031e2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3303      	adds	r3, #3
 80031e6:	089b      	lsrs	r3, r3, #2
 80031e8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6919      	ldr	r1, [r3, #16]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	4603      	mov	r3, r0
 8003200:	6978      	ldr	r0, [r7, #20]
 8003202:	f001 ff27 	bl	8005054 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	441a      	add	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a1a      	ldr	r2, [r3, #32]
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	441a      	add	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4413      	add	r3, r2
 8003226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	b29b      	uxth	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	429a      	cmp	r2, r3
 8003232:	d809      	bhi.n	8003248 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a1a      	ldr	r2, [r3, #32]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800323c:	429a      	cmp	r2, r3
 800323e:	d203      	bcs.n	8003248 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1be      	bne.n	80031c6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	699a      	ldr	r2, [r3, #24]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	429a      	cmp	r2, r3
 8003252:	d811      	bhi.n	8003278 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	2201      	movs	r2, #1
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	43db      	mvns	r3, r3
 800326e:	6939      	ldr	r1, [r7, #16]
 8003270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003274:	4013      	ands	r3, r2
 8003276:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3720      	adds	r7, #32
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	333c      	adds	r3, #60	; 0x3c
 800329c:	3304      	adds	r3, #4
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d17b      	bne.n	80033b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d015      	beq.n	80032f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	4a61      	ldr	r2, [pc, #388]	; (800344c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	f240 80b9 	bls.w	8003440 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80b3 	beq.w	8003440 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e6:	461a      	mov	r2, r3
 80032e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ec:	6093      	str	r3, [r2, #8]
 80032ee:	e0a7      	b.n	8003440 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	4413      	add	r3, r2
 8003302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003306:	461a      	mov	r2, r3
 8003308:	2320      	movs	r3, #32
 800330a:	6093      	str	r3, [r2, #8]
 800330c:	e098      	b.n	8003440 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003314:	2b00      	cmp	r3, #0
 8003316:	f040 8093 	bne.w	8003440 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	4a4b      	ldr	r2, [pc, #300]	; (800344c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d90f      	bls.n	8003342 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003338:	461a      	mov	r2, r3
 800333a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800333e:	6093      	str	r3, [r2, #8]
 8003340:	e07e      	b.n	8003440 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	4413      	add	r3, r2
 8003354:	3304      	adds	r3, #4
 8003356:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	69da      	ldr	r2, [r3, #28]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	0159      	lsls	r1, r3, #5
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	440b      	add	r3, r1
 8003364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336e:	1ad2      	subs	r2, r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d114      	bne.n	80033a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800338c:	461a      	mov	r2, r3
 800338e:	2101      	movs	r1, #1
 8003390:	f002 f8f6 	bl	8005580 <USB_EP0_OutStart>
 8003394:	e006      	b.n	80033a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	441a      	add	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	4619      	mov	r1, r3
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f004 fb56 	bl	8007a5c <HAL_PCD_DataOutStageCallback>
 80033b0:	e046      	b.n	8003440 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	4a26      	ldr	r2, [pc, #152]	; (8003450 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d124      	bne.n	8003404 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d0:	461a      	mov	r2, r3
 80033d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033d6:	6093      	str	r3, [r2, #8]
 80033d8:	e032      	b.n	8003440 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f0:	461a      	mov	r2, r3
 80033f2:	2320      	movs	r3, #32
 80033f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	4619      	mov	r1, r3
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f004 fb2d 	bl	8007a5c <HAL_PCD_DataOutStageCallback>
 8003402:	e01d      	b.n	8003440 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d114      	bne.n	8003434 <PCD_EP_OutXfrComplete_int+0x1b0>
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	4613      	mov	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d108      	bne.n	8003434 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800342c:	461a      	mov	r2, r3
 800342e:	2100      	movs	r1, #0
 8003430:	f002 f8a6 	bl	8005580 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	4619      	mov	r1, r3
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f004 fb0e 	bl	8007a5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	4f54300a 	.word	0x4f54300a
 8003450:	4f54310a 	.word	0x4f54310a

08003454 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	333c      	adds	r3, #60	; 0x3c
 800346c:	3304      	adds	r3, #4
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a15      	ldr	r2, [pc, #84]	; (80034dc <PCD_EP_OutSetupPacket_int+0x88>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d90e      	bls.n	80034a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003490:	2b00      	cmp	r3, #0
 8003492:	d009      	beq.n	80034a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a0:	461a      	mov	r2, r3
 80034a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f004 fac5 	bl	8007a38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <PCD_EP_OutSetupPacket_int+0x88>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d90c      	bls.n	80034d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d108      	bne.n	80034d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034c8:	461a      	mov	r2, r3
 80034ca:	2101      	movs	r1, #1
 80034cc:	f002 f858 	bl	8005580 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	4f54300a 	.word	0x4f54300a

080034e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	70fb      	strb	r3, [r7, #3]
 80034ec:	4613      	mov	r3, r2
 80034ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d107      	bne.n	800350e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034fe:	883b      	ldrh	r3, [r7, #0]
 8003500:	0419      	lsls	r1, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	430a      	orrs	r2, r1
 800350a:	629a      	str	r2, [r3, #40]	; 0x28
 800350c:	e028      	b.n	8003560 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	0c1b      	lsrs	r3, r3, #16
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	4413      	add	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800351c:	2300      	movs	r3, #0
 800351e:	73fb      	strb	r3, [r7, #15]
 8003520:	e00d      	b.n	800353e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	3340      	adds	r3, #64	; 0x40
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	0c1b      	lsrs	r3, r3, #16
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	4413      	add	r3, r2
 8003536:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	3301      	adds	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	3b01      	subs	r3, #1
 8003544:	429a      	cmp	r2, r3
 8003546:	d3ec      	bcc.n	8003522 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003548:	883b      	ldrh	r3, [r7, #0]
 800354a:	0418      	lsls	r0, r3, #16
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	3b01      	subs	r3, #1
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	4302      	orrs	r2, r0
 8003558:	3340      	adds	r3, #64	; 0x40
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	460b      	mov	r3, r1
 8003578:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	887a      	ldrh	r2, [r7, #2]
 8003580:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e267      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d075      	beq.n	80036b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035c6:	4b88      	ldr	r3, [pc, #544]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d00c      	beq.n	80035ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d2:	4b85      	ldr	r3, [pc, #532]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d112      	bne.n	8003604 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035de:	4b82      	ldr	r3, [pc, #520]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ea:	d10b      	bne.n	8003604 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	4b7e      	ldr	r3, [pc, #504]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d05b      	beq.n	80036b0 <HAL_RCC_OscConfig+0x108>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d157      	bne.n	80036b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e242      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360c:	d106      	bne.n	800361c <HAL_RCC_OscConfig+0x74>
 800360e:	4b76      	ldr	r3, [pc, #472]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a75      	ldr	r2, [pc, #468]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e01d      	b.n	8003658 <HAL_RCC_OscConfig+0xb0>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003624:	d10c      	bne.n	8003640 <HAL_RCC_OscConfig+0x98>
 8003626:	4b70      	ldr	r3, [pc, #448]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a6f      	ldr	r2, [pc, #444]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 800362c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	4b6d      	ldr	r3, [pc, #436]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a6c      	ldr	r2, [pc, #432]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e00b      	b.n	8003658 <HAL_RCC_OscConfig+0xb0>
 8003640:	4b69      	ldr	r3, [pc, #420]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a68      	ldr	r2, [pc, #416]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	4b66      	ldr	r3, [pc, #408]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a65      	ldr	r2, [pc, #404]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d013      	beq.n	8003688 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7fd ffb0 	bl	80015c4 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003668:	f7fd ffac 	bl	80015c4 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	; 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e207      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367a:	4b5b      	ldr	r3, [pc, #364]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0xc0>
 8003686:	e014      	b.n	80036b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fd ff9c 	bl	80015c4 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003690:	f7fd ff98 	bl	80015c4 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b64      	cmp	r3, #100	; 0x64
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e1f3      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a2:	4b51      	ldr	r3, [pc, #324]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0xe8>
 80036ae:	e000      	b.n	80036b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d063      	beq.n	8003786 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036be:	4b4a      	ldr	r3, [pc, #296]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ca:	4b47      	ldr	r3, [pc, #284]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d11c      	bne.n	8003710 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036d6:	4b44      	ldr	r3, [pc, #272]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d116      	bne.n	8003710 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e2:	4b41      	ldr	r3, [pc, #260]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <HAL_RCC_OscConfig+0x152>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d001      	beq.n	80036fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e1c7      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fa:	4b3b      	ldr	r3, [pc, #236]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4937      	ldr	r1, [pc, #220]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370e:	e03a      	b.n	8003786 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d020      	beq.n	800375a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003718:	4b34      	ldr	r3, [pc, #208]	; (80037ec <HAL_RCC_OscConfig+0x244>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371e:	f7fd ff51 	bl	80015c4 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003726:	f7fd ff4d 	bl	80015c4 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e1a8      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003738:	4b2b      	ldr	r3, [pc, #172]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003744:	4b28      	ldr	r3, [pc, #160]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4925      	ldr	r1, [pc, #148]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003754:	4313      	orrs	r3, r2
 8003756:	600b      	str	r3, [r1, #0]
 8003758:	e015      	b.n	8003786 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800375a:	4b24      	ldr	r3, [pc, #144]	; (80037ec <HAL_RCC_OscConfig+0x244>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fd ff30 	bl	80015c4 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003768:	f7fd ff2c 	bl	80015c4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e187      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377a:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d036      	beq.n	8003800 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d016      	beq.n	80037c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800379a:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <HAL_RCC_OscConfig+0x248>)
 800379c:	2201      	movs	r2, #1
 800379e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a0:	f7fd ff10 	bl	80015c4 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037a8:	f7fd ff0c 	bl	80015c4 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e167      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ba:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80037bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0x200>
 80037c6:	e01b      	b.n	8003800 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_RCC_OscConfig+0x248>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ce:	f7fd fef9 	bl	80015c4 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d4:	e00e      	b.n	80037f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d6:	f7fd fef5 	bl	80015c4 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d907      	bls.n	80037f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e150      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
 80037e8:	40023800 	.word	0x40023800
 80037ec:	42470000 	.word	0x42470000
 80037f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f4:	4b88      	ldr	r3, [pc, #544]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80037f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1ea      	bne.n	80037d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8097 	beq.w	800393c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800380e:	2300      	movs	r3, #0
 8003810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003812:	4b81      	ldr	r3, [pc, #516]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10f      	bne.n	800383e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	4b7d      	ldr	r3, [pc, #500]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	4a7c      	ldr	r2, [pc, #496]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382c:	6413      	str	r3, [r2, #64]	; 0x40
 800382e:	4b7a      	ldr	r3, [pc, #488]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800383a:	2301      	movs	r3, #1
 800383c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383e:	4b77      	ldr	r3, [pc, #476]	; (8003a1c <HAL_RCC_OscConfig+0x474>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d118      	bne.n	800387c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800384a:	4b74      	ldr	r3, [pc, #464]	; (8003a1c <HAL_RCC_OscConfig+0x474>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a73      	ldr	r2, [pc, #460]	; (8003a1c <HAL_RCC_OscConfig+0x474>)
 8003850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003856:	f7fd feb5 	bl	80015c4 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385e:	f7fd feb1 	bl	80015c4 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e10c      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003870:	4b6a      	ldr	r3, [pc, #424]	; (8003a1c <HAL_RCC_OscConfig+0x474>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d106      	bne.n	8003892 <HAL_RCC_OscConfig+0x2ea>
 8003884:	4b64      	ldr	r3, [pc, #400]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	4a63      	ldr	r2, [pc, #396]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	6713      	str	r3, [r2, #112]	; 0x70
 8003890:	e01c      	b.n	80038cc <HAL_RCC_OscConfig+0x324>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b05      	cmp	r3, #5
 8003898:	d10c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x30c>
 800389a:	4b5f      	ldr	r3, [pc, #380]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389e:	4a5e      	ldr	r2, [pc, #376]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038a0:	f043 0304 	orr.w	r3, r3, #4
 80038a4:	6713      	str	r3, [r2, #112]	; 0x70
 80038a6:	4b5c      	ldr	r3, [pc, #368]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	4a5b      	ldr	r2, [pc, #364]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	6713      	str	r3, [r2, #112]	; 0x70
 80038b2:	e00b      	b.n	80038cc <HAL_RCC_OscConfig+0x324>
 80038b4:	4b58      	ldr	r3, [pc, #352]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b8:	4a57      	ldr	r2, [pc, #348]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	6713      	str	r3, [r2, #112]	; 0x70
 80038c0:	4b55      	ldr	r3, [pc, #340]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c4:	4a54      	ldr	r2, [pc, #336]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038c6:	f023 0304 	bic.w	r3, r3, #4
 80038ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d015      	beq.n	8003900 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fd fe76 	bl	80015c4 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038dc:	f7fd fe72 	bl	80015c4 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e0cb      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f2:	4b49      	ldr	r3, [pc, #292]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0ee      	beq.n	80038dc <HAL_RCC_OscConfig+0x334>
 80038fe:	e014      	b.n	800392a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003900:	f7fd fe60 	bl	80015c4 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003906:	e00a      	b.n	800391e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003908:	f7fd fe5c 	bl	80015c4 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f241 3288 	movw	r2, #5000	; 0x1388
 8003916:	4293      	cmp	r3, r2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e0b5      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800391e:	4b3e      	ldr	r3, [pc, #248]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1ee      	bne.n	8003908 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800392a:	7dfb      	ldrb	r3, [r7, #23]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d105      	bne.n	800393c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003930:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	4a38      	ldr	r2, [pc, #224]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80a1 	beq.w	8003a88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003946:	4b34      	ldr	r3, [pc, #208]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b08      	cmp	r3, #8
 8003950:	d05c      	beq.n	8003a0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d141      	bne.n	80039de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395a:	4b31      	ldr	r3, [pc, #196]	; (8003a20 <HAL_RCC_OscConfig+0x478>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003960:	f7fd fe30 	bl	80015c4 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003968:	f7fd fe2c 	bl	80015c4 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e087      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397a:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69da      	ldr	r2, [r3, #28]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	019b      	lsls	r3, r3, #6
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	085b      	lsrs	r3, r3, #1
 800399e:	3b01      	subs	r3, #1
 80039a0:	041b      	lsls	r3, r3, #16
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	061b      	lsls	r3, r3, #24
 80039aa:	491b      	ldr	r1, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <HAL_RCC_OscConfig+0x478>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b6:	f7fd fe05 	bl	80015c4 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039be:	f7fd fe01 	bl	80015c4 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e05c      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d0:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x416>
 80039dc:	e054      	b.n	8003a88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039de:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <HAL_RCC_OscConfig+0x478>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7fd fdee 	bl	80015c4 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ec:	f7fd fdea 	bl	80015c4 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e045      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fe:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x444>
 8003a0a:	e03d      	b.n	8003a88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d107      	bne.n	8003a24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e038      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40007000 	.word	0x40007000
 8003a20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a24:	4b1b      	ldr	r3, [pc, #108]	; (8003a94 <HAL_RCC_OscConfig+0x4ec>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d028      	beq.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d121      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d11a      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a54:	4013      	ands	r3, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d111      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	085b      	lsrs	r3, r3, #1
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d107      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800

08003a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0cc      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aac:	4b68      	ldr	r3, [pc, #416]	; (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d90c      	bls.n	8003ad4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b65      	ldr	r3, [pc, #404]	; (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac2:	4b63      	ldr	r3, [pc, #396]	; (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0b8      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d020      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aec:	4b59      	ldr	r3, [pc, #356]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4a58      	ldr	r2, [pc, #352]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003af6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b04:	4b53      	ldr	r3, [pc, #332]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4a52      	ldr	r2, [pc, #328]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b10:	4b50      	ldr	r3, [pc, #320]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	494d      	ldr	r1, [pc, #308]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d044      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d107      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b36:	4b47      	ldr	r3, [pc, #284]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d119      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e07f      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d003      	beq.n	8003b56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d107      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b56:	4b3f      	ldr	r3, [pc, #252]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e06f      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b66:	4b3b      	ldr	r3, [pc, #236]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e067      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b76:	4b37      	ldr	r3, [pc, #220]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f023 0203 	bic.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4934      	ldr	r1, [pc, #208]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b88:	f7fd fd1c 	bl	80015c4 <HAL_GetTick>
 8003b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b90:	f7fd fd18 	bl	80015c4 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e04f      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba6:	4b2b      	ldr	r3, [pc, #172]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 020c 	and.w	r2, r3, #12
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d1eb      	bne.n	8003b90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb8:	4b25      	ldr	r3, [pc, #148]	; (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d20c      	bcs.n	8003be0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc6:	4b22      	ldr	r3, [pc, #136]	; (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bce:	4b20      	ldr	r3, [pc, #128]	; (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e032      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bec:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4916      	ldr	r1, [pc, #88]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d009      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c0a:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	490e      	ldr	r1, [pc, #56]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c1e:	f000 f821 	bl	8003c64 <HAL_RCC_GetSysClockFreq>
 8003c22:	4602      	mov	r2, r0
 8003c24:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	091b      	lsrs	r3, r3, #4
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	490a      	ldr	r1, [pc, #40]	; (8003c58 <HAL_RCC_ClockConfig+0x1c0>)
 8003c30:	5ccb      	ldrb	r3, [r1, r3]
 8003c32:	fa22 f303 	lsr.w	r3, r2, r3
 8003c36:	4a09      	ldr	r2, [pc, #36]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c3a:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <HAL_RCC_ClockConfig+0x1c8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fd fc7c 	bl	800153c <HAL_InitTick>

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023c00 	.word	0x40023c00
 8003c54:	40023800 	.word	0x40023800
 8003c58:	0800aaa8 	.word	0x0800aaa8
 8003c5c:	20000000 	.word	0x20000000
 8003c60:	20000004 	.word	0x20000004

08003c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c68:	b090      	sub	sp, #64	; 0x40
 8003c6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c70:	2300      	movs	r3, #0
 8003c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c74:	2300      	movs	r3, #0
 8003c76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c7c:	4b59      	ldr	r3, [pc, #356]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d00d      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x40>
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	f200 80a1 	bhi.w	8003dd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0x34>
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d003      	beq.n	8003c9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c96:	e09b      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c98:	4b53      	ldr	r3, [pc, #332]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c9c:	e09b      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c9e:	4b53      	ldr	r3, [pc, #332]	; (8003dec <HAL_RCC_GetSysClockFreq+0x188>)
 8003ca0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ca2:	e098      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ca4:	4b4f      	ldr	r3, [pc, #316]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cae:	4b4d      	ldr	r3, [pc, #308]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d028      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cba:	4b4a      	ldr	r3, [pc, #296]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	099b      	lsrs	r3, r3, #6
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	623b      	str	r3, [r7, #32]
 8003cc4:	627a      	str	r2, [r7, #36]	; 0x24
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4b47      	ldr	r3, [pc, #284]	; (8003dec <HAL_RCC_GetSysClockFreq+0x188>)
 8003cd0:	fb03 f201 	mul.w	r2, r3, r1
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	fb00 f303 	mul.w	r3, r0, r3
 8003cda:	4413      	add	r3, r2
 8003cdc:	4a43      	ldr	r2, [pc, #268]	; (8003dec <HAL_RCC_GetSysClockFreq+0x188>)
 8003cde:	fba0 1202 	umull	r1, r2, r0, r2
 8003ce2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ce4:	460a      	mov	r2, r1
 8003ce6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cea:	4413      	add	r3, r2
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	61fa      	str	r2, [r7, #28]
 8003cf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003cfe:	f7fc ff5b 	bl	8000bb8 <__aeabi_uldivmod>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4613      	mov	r3, r2
 8003d08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d0a:	e053      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0c:	4b35      	ldr	r3, [pc, #212]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	099b      	lsrs	r3, r3, #6
 8003d12:	2200      	movs	r2, #0
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	617a      	str	r2, [r7, #20]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d1e:	f04f 0b00 	mov.w	fp, #0
 8003d22:	4652      	mov	r2, sl
 8003d24:	465b      	mov	r3, fp
 8003d26:	f04f 0000 	mov.w	r0, #0
 8003d2a:	f04f 0100 	mov.w	r1, #0
 8003d2e:	0159      	lsls	r1, r3, #5
 8003d30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d34:	0150      	lsls	r0, r2, #5
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	ebb2 080a 	subs.w	r8, r2, sl
 8003d3e:	eb63 090b 	sbc.w	r9, r3, fp
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d56:	ebb2 0408 	subs.w	r4, r2, r8
 8003d5a:	eb63 0509 	sbc.w	r5, r3, r9
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	00eb      	lsls	r3, r5, #3
 8003d68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d6c:	00e2      	lsls	r2, r4, #3
 8003d6e:	4614      	mov	r4, r2
 8003d70:	461d      	mov	r5, r3
 8003d72:	eb14 030a 	adds.w	r3, r4, sl
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	eb45 030b 	adc.w	r3, r5, fp
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	028b      	lsls	r3, r1, #10
 8003d8e:	4621      	mov	r1, r4
 8003d90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d94:	4621      	mov	r1, r4
 8003d96:	028a      	lsls	r2, r1, #10
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9e:	2200      	movs	r2, #0
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	60fa      	str	r2, [r7, #12]
 8003da4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003da8:	f7fc ff06 	bl	8000bb8 <__aeabi_uldivmod>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4613      	mov	r3, r2
 8003db2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003db4:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	0c1b      	lsrs	r3, r3, #16
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003dc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dce:	e002      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3740      	adds	r7, #64	; 0x40
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800
 8003de8:	00f42400 	.word	0x00f42400
 8003dec:	017d7840 	.word	0x017d7840

08003df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003df4:	4b03      	ldr	r3, [pc, #12]	; (8003e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003df6:	681b      	ldr	r3, [r3, #0]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20000000 	.word	0x20000000

08003e08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e08:	b084      	sub	sp, #16
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	f107 001c 	add.w	r0, r7, #28
 8003e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d122      	bne.n	8003e66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d105      	bne.n	8003e5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f001 fbee 	bl	800563c <USB_CoreReset>
 8003e60:	4603      	mov	r3, r0
 8003e62:	73fb      	strb	r3, [r7, #15]
 8003e64:	e01a      	b.n	8003e9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f001 fbe2 	bl	800563c <USB_CoreReset>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38
 8003e8e:	e005      	b.n	8003e9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d10b      	bne.n	8003eba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f043 0206 	orr.w	r2, r3, #6
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f043 0220 	orr.w	r2, r3, #32
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ec6:	b004      	add	sp, #16
 8003ec8:	4770      	bx	lr
	...

08003ecc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d165      	bne.n	8003fac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4a41      	ldr	r2, [pc, #260]	; (8003fe8 <USB_SetTurnaroundTime+0x11c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d906      	bls.n	8003ef6 <USB_SetTurnaroundTime+0x2a>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4a40      	ldr	r2, [pc, #256]	; (8003fec <USB_SetTurnaroundTime+0x120>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d202      	bcs.n	8003ef6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ef0:	230f      	movs	r3, #15
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e062      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	4a3c      	ldr	r2, [pc, #240]	; (8003fec <USB_SetTurnaroundTime+0x120>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d306      	bcc.n	8003f0c <USB_SetTurnaroundTime+0x40>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	4a3b      	ldr	r2, [pc, #236]	; (8003ff0 <USB_SetTurnaroundTime+0x124>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d202      	bcs.n	8003f0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003f06:	230e      	movs	r3, #14
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	e057      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4a38      	ldr	r2, [pc, #224]	; (8003ff0 <USB_SetTurnaroundTime+0x124>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d306      	bcc.n	8003f22 <USB_SetTurnaroundTime+0x56>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4a37      	ldr	r2, [pc, #220]	; (8003ff4 <USB_SetTurnaroundTime+0x128>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d202      	bcs.n	8003f22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003f1c:	230d      	movs	r3, #13
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	e04c      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4a33      	ldr	r2, [pc, #204]	; (8003ff4 <USB_SetTurnaroundTime+0x128>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d306      	bcc.n	8003f38 <USB_SetTurnaroundTime+0x6c>
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	4a32      	ldr	r2, [pc, #200]	; (8003ff8 <USB_SetTurnaroundTime+0x12c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d802      	bhi.n	8003f38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f32:	230c      	movs	r3, #12
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	e041      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4a2f      	ldr	r2, [pc, #188]	; (8003ff8 <USB_SetTurnaroundTime+0x12c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d906      	bls.n	8003f4e <USB_SetTurnaroundTime+0x82>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4a2e      	ldr	r2, [pc, #184]	; (8003ffc <USB_SetTurnaroundTime+0x130>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d802      	bhi.n	8003f4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003f48:	230b      	movs	r3, #11
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	e036      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	4a2a      	ldr	r2, [pc, #168]	; (8003ffc <USB_SetTurnaroundTime+0x130>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d906      	bls.n	8003f64 <USB_SetTurnaroundTime+0x98>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4a29      	ldr	r2, [pc, #164]	; (8004000 <USB_SetTurnaroundTime+0x134>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d802      	bhi.n	8003f64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003f5e:	230a      	movs	r3, #10
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	e02b      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4a26      	ldr	r2, [pc, #152]	; (8004000 <USB_SetTurnaroundTime+0x134>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d906      	bls.n	8003f7a <USB_SetTurnaroundTime+0xae>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4a25      	ldr	r2, [pc, #148]	; (8004004 <USB_SetTurnaroundTime+0x138>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d202      	bcs.n	8003f7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003f74:	2309      	movs	r3, #9
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	e020      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4a21      	ldr	r2, [pc, #132]	; (8004004 <USB_SetTurnaroundTime+0x138>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d306      	bcc.n	8003f90 <USB_SetTurnaroundTime+0xc4>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	4a20      	ldr	r2, [pc, #128]	; (8004008 <USB_SetTurnaroundTime+0x13c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d802      	bhi.n	8003f90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003f8a:	2308      	movs	r3, #8
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	e015      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4a1d      	ldr	r2, [pc, #116]	; (8004008 <USB_SetTurnaroundTime+0x13c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d906      	bls.n	8003fa6 <USB_SetTurnaroundTime+0xda>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4a1c      	ldr	r2, [pc, #112]	; (800400c <USB_SetTurnaroundTime+0x140>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d202      	bcs.n	8003fa6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003fa0:	2307      	movs	r3, #7
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	e00a      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003fa6:	2306      	movs	r3, #6
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	e007      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d102      	bne.n	8003fb8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003fb2:	2309      	movs	r3, #9
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	e001      	b.n	8003fbc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003fb8:	2309      	movs	r3, #9
 8003fba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	029b      	lsls	r3, r3, #10
 8003fd0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	00d8acbf 	.word	0x00d8acbf
 8003fec:	00e4e1c0 	.word	0x00e4e1c0
 8003ff0:	00f42400 	.word	0x00f42400
 8003ff4:	01067380 	.word	0x01067380
 8003ff8:	011a499f 	.word	0x011a499f
 8003ffc:	01312cff 	.word	0x01312cff
 8004000:	014ca43f 	.word	0x014ca43f
 8004004:	016e3600 	.word	0x016e3600
 8004008:	01a6ab1f 	.word	0x01a6ab1f
 800400c:	01e84800 	.word	0x01e84800

08004010 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f043 0201 	orr.w	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f023 0201 	bic.w	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d115      	bne.n	80040a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004082:	2001      	movs	r0, #1
 8004084:	f7fd faaa 	bl	80015dc <HAL_Delay>
      ms++;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3301      	adds	r3, #1
 800408c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f001 fa45 	bl	800551e <USB_GetMode>
 8004094:	4603      	mov	r3, r0
 8004096:	2b01      	cmp	r3, #1
 8004098:	d01e      	beq.n	80040d8 <USB_SetCurrentMode+0x84>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b31      	cmp	r3, #49	; 0x31
 800409e:	d9f0      	bls.n	8004082 <USB_SetCurrentMode+0x2e>
 80040a0:	e01a      	b.n	80040d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d115      	bne.n	80040d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040b4:	2001      	movs	r0, #1
 80040b6:	f7fd fa91 	bl	80015dc <HAL_Delay>
      ms++;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3301      	adds	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f001 fa2c 	bl	800551e <USB_GetMode>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d005      	beq.n	80040d8 <USB_SetCurrentMode+0x84>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b31      	cmp	r3, #49	; 0x31
 80040d0:	d9f0      	bls.n	80040b4 <USB_SetCurrentMode+0x60>
 80040d2:	e001      	b.n	80040d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e005      	b.n	80040e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b32      	cmp	r3, #50	; 0x32
 80040dc:	d101      	bne.n	80040e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040ec:	b084      	sub	sp, #16
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b086      	sub	sp, #24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	e009      	b.n	8004120 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	3340      	adds	r3, #64	; 0x40
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	2200      	movs	r2, #0
 8004118:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	3301      	adds	r3, #1
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b0e      	cmp	r3, #14
 8004124:	d9f2      	bls.n	800410c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004128:	2b00      	cmp	r3, #0
 800412a:	d11c      	bne.n	8004166 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800413a:	f043 0302 	orr.w	r3, r3, #2
 800413e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	639a      	str	r2, [r3, #56]	; 0x38
 8004164:	e00b      	b.n	800417e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004184:	461a      	mov	r2, r3
 8004186:	2300      	movs	r3, #0
 8004188:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004190:	4619      	mov	r1, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004198:	461a      	mov	r2, r3
 800419a:	680b      	ldr	r3, [r1, #0]
 800419c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800419e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d10c      	bne.n	80041be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d104      	bne.n	80041b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041aa:	2100      	movs	r1, #0
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f965 	bl	800447c <USB_SetDevSpeed>
 80041b2:	e008      	b.n	80041c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041b4:	2101      	movs	r1, #1
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f960 	bl	800447c <USB_SetDevSpeed>
 80041bc:	e003      	b.n	80041c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041be:	2103      	movs	r1, #3
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f95b 	bl	800447c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041c6:	2110      	movs	r1, #16
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f8f3 	bl	80043b4 <USB_FlushTxFifo>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f91f 	bl	800441c <USB_FlushRxFifo>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ee:	461a      	mov	r2, r3
 80041f0:	2300      	movs	r3, #0
 80041f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fa:	461a      	mov	r2, r3
 80041fc:	2300      	movs	r3, #0
 80041fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004206:	461a      	mov	r2, r3
 8004208:	2300      	movs	r3, #0
 800420a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800420c:	2300      	movs	r3, #0
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	e043      	b.n	800429a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004228:	d118      	bne.n	800425c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423c:	461a      	mov	r2, r3
 800423e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	e013      	b.n	800426e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004252:	461a      	mov	r2, r3
 8004254:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	e008      	b.n	800426e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004268:	461a      	mov	r2, r3
 800426a:	2300      	movs	r3, #0
 800426c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427a:	461a      	mov	r2, r3
 800427c:	2300      	movs	r3, #0
 800427e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428c:	461a      	mov	r2, r3
 800428e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004292:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	3301      	adds	r3, #1
 8004298:	613b      	str	r3, [r7, #16]
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d3b7      	bcc.n	8004212 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042a2:	2300      	movs	r3, #0
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	e043      	b.n	8004330 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042be:	d118      	bne.n	80042f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10a      	bne.n	80042dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d2:	461a      	mov	r2, r3
 80042d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	e013      	b.n	8004304 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e8:	461a      	mov	r2, r3
 80042ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	e008      	b.n	8004304 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fe:	461a      	mov	r2, r3
 8004300:	2300      	movs	r3, #0
 8004302:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004310:	461a      	mov	r2, r3
 8004312:	2300      	movs	r3, #0
 8004314:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004322:	461a      	mov	r2, r3
 8004324:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004328:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	3301      	adds	r3, #1
 800432e:	613b      	str	r3, [r7, #16]
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	429a      	cmp	r2, r3
 8004336:	d3b7      	bcc.n	80042a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800434a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004358:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	2b00      	cmp	r3, #0
 800435e:	d105      	bne.n	800436c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f043 0210 	orr.w	r2, r3, #16
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699a      	ldr	r2, [r3, #24]
 8004370:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <USB_DevInit+0x2c4>)
 8004372:	4313      	orrs	r3, r2
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f043 0208 	orr.w	r2, r3, #8
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800438a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438c:	2b01      	cmp	r3, #1
 800438e:	d107      	bne.n	80043a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004398:	f043 0304 	orr.w	r3, r3, #4
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043ac:	b004      	add	sp, #16
 80043ae:	4770      	bx	lr
 80043b0:	803c3800 	.word	0x803c3800

080043b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3301      	adds	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4a13      	ldr	r2, [pc, #76]	; (8004418 <USB_FlushTxFifo+0x64>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d901      	bls.n	80043d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e01b      	b.n	800440c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	daf2      	bge.n	80043c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	019b      	lsls	r3, r3, #6
 80043e4:	f043 0220 	orr.w	r2, r3, #32
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3301      	adds	r3, #1
 80043f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4a08      	ldr	r2, [pc, #32]	; (8004418 <USB_FlushTxFifo+0x64>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e006      	b.n	800440c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b20      	cmp	r3, #32
 8004408:	d0f0      	beq.n	80043ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	00030d40 	.word	0x00030d40

0800441c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3301      	adds	r3, #1
 800442c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4a11      	ldr	r2, [pc, #68]	; (8004478 <USB_FlushRxFifo+0x5c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d901      	bls.n	800443a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e018      	b.n	800446c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	daf2      	bge.n	8004428 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2210      	movs	r2, #16
 800444a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	3301      	adds	r3, #1
 8004450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4a08      	ldr	r2, [pc, #32]	; (8004478 <USB_FlushRxFifo+0x5c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d901      	bls.n	800445e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e006      	b.n	800446c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	2b10      	cmp	r3, #16
 8004468:	d0f0      	beq.n	800444c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	00030d40 	.word	0x00030d40

0800447c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	68f9      	ldr	r1, [r7, #12]
 8004498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800449c:	4313      	orrs	r3, r2
 800449e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b087      	sub	sp, #28
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 0306 	and.w	r3, r3, #6
 80044c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d102      	bne.n	80044d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80044ce:	2300      	movs	r3, #0
 80044d0:	75fb      	strb	r3, [r7, #23]
 80044d2:	e00a      	b.n	80044ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d002      	beq.n	80044e0 <USB_GetDevSpeed+0x32>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b06      	cmp	r3, #6
 80044de:	d102      	bne.n	80044e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80044e0:	2302      	movs	r3, #2
 80044e2:	75fb      	strb	r3, [r7, #23]
 80044e4:	e001      	b.n	80044ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80044e6:	230f      	movs	r3, #15
 80044e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80044ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	785b      	ldrb	r3, [r3, #1]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d13a      	bne.n	800458a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	2101      	movs	r1, #1
 8004526:	fa01 f303 	lsl.w	r3, r1, r3
 800452a:	b29b      	uxth	r3, r3
 800452c:	68f9      	ldr	r1, [r7, #12]
 800452e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004532:	4313      	orrs	r3, r2
 8004534:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d155      	bne.n	80045f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	791b      	ldrb	r3, [r3, #4]
 8004566:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004568:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	059b      	lsls	r3, r3, #22
 800456e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004570:	4313      	orrs	r3, r2
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	0151      	lsls	r1, r2, #5
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	440a      	add	r2, r1
 800457a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800457e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	e036      	b.n	80045f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004590:	69da      	ldr	r2, [r3, #28]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	2101      	movs	r1, #1
 800459c:	fa01 f303 	lsl.w	r3, r1, r3
 80045a0:	041b      	lsls	r3, r3, #16
 80045a2:	68f9      	ldr	r1, [r7, #12]
 80045a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d11a      	bne.n	80045f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	791b      	ldrb	r3, [r3, #4]
 80045dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045de:	430b      	orrs	r3, r1
 80045e0:	4313      	orrs	r3, r2
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	0151      	lsls	r1, r2, #5
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	440a      	add	r2, r1
 80045ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	785b      	ldrb	r3, [r3, #1]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d161      	bne.n	80046e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004636:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800463a:	d11f      	bne.n	800467c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	0151      	lsls	r1, r2, #5
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	440a      	add	r2, r1
 8004652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004656:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800465a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	440a      	add	r2, r1
 8004672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004676:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800467a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	2101      	movs	r1, #1
 800468e:	fa01 f303 	lsl.w	r3, r1, r3
 8004692:	b29b      	uxth	r3, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	68f9      	ldr	r1, [r7, #12]
 8004698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800469c:	4013      	ands	r3, r2
 800469e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	f003 030f 	and.w	r3, r3, #15
 80046b0:	2101      	movs	r1, #1
 80046b2:	fa01 f303 	lsl.w	r3, r1, r3
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	43db      	mvns	r3, r3
 80046ba:	68f9      	ldr	r1, [r7, #12]
 80046bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046c0:	4013      	ands	r3, r2
 80046c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	0159      	lsls	r1, r3, #5
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	440b      	add	r3, r1
 80046da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046de:	4619      	mov	r1, r3
 80046e0:	4b35      	ldr	r3, [pc, #212]	; (80047b8 <USB_DeactivateEndpoint+0x1b0>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	600b      	str	r3, [r1, #0]
 80046e6:	e060      	b.n	80047aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046fe:	d11f      	bne.n	8004740 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	0151      	lsls	r1, r2, #5
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	440a      	add	r2, r1
 8004716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800471a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800471e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	0151      	lsls	r1, r2, #5
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	440a      	add	r2, r1
 8004736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800473a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800473e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	f003 030f 	and.w	r3, r3, #15
 8004750:	2101      	movs	r1, #1
 8004752:	fa01 f303 	lsl.w	r3, r1, r3
 8004756:	041b      	lsls	r3, r3, #16
 8004758:	43db      	mvns	r3, r3
 800475a:	68f9      	ldr	r1, [r7, #12]
 800475c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004760:	4013      	ands	r3, r2
 8004762:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476a:	69da      	ldr	r2, [r3, #28]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	2101      	movs	r1, #1
 8004776:	fa01 f303 	lsl.w	r3, r1, r3
 800477a:	041b      	lsls	r3, r3, #16
 800477c:	43db      	mvns	r3, r3
 800477e:	68f9      	ldr	r1, [r7, #12]
 8004780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004784:	4013      	ands	r3, r2
 8004786:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	0159      	lsls	r1, r3, #5
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	440b      	add	r3, r1
 800479e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a2:	4619      	mov	r1, r3
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <USB_DeactivateEndpoint+0x1b4>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	ec337800 	.word	0xec337800
 80047bc:	eff37800 	.word	0xeff37800

080047c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08a      	sub	sp, #40	; 0x28
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	4613      	mov	r3, r2
 80047cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	785b      	ldrb	r3, [r3, #1]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	f040 815c 	bne.w	8004a9a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d132      	bne.n	8004850 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	0151      	lsls	r1, r2, #5
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	440a      	add	r2, r1
 8004800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004804:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004808:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800480c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	0151      	lsls	r1, r2, #5
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	440a      	add	r2, r1
 8004824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004828:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800482c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	0151      	lsls	r1, r2, #5
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	440a      	add	r2, r1
 8004844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004848:	0cdb      	lsrs	r3, r3, #19
 800484a:	04db      	lsls	r3, r3, #19
 800484c:	6113      	str	r3, [r2, #16]
 800484e:	e074      	b.n	800493a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	0151      	lsls	r1, r2, #5
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	440a      	add	r2, r1
 8004866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800486a:	0cdb      	lsrs	r3, r3, #19
 800486c:	04db      	lsls	r3, r3, #19
 800486e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	0151      	lsls	r1, r2, #5
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	440a      	add	r2, r1
 8004886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800488e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004892:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	6999      	ldr	r1, [r3, #24]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	440b      	add	r3, r1
 80048ac:	1e59      	subs	r1, r3, #1
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80048b6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80048b8:	4b9d      	ldr	r3, [pc, #628]	; (8004b30 <USB_EPStartXfer+0x370>)
 80048ba:	400b      	ands	r3, r1
 80048bc:	69b9      	ldr	r1, [r7, #24]
 80048be:	0148      	lsls	r0, r1, #5
 80048c0:	69f9      	ldr	r1, [r7, #28]
 80048c2:	4401      	add	r1, r0
 80048c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048c8:	4313      	orrs	r3, r2
 80048ca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d8:	691a      	ldr	r2, [r3, #16]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e2:	69b9      	ldr	r1, [r7, #24]
 80048e4:	0148      	lsls	r0, r1, #5
 80048e6:	69f9      	ldr	r1, [r7, #28]
 80048e8:	4401      	add	r1, r0
 80048ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048ee:	4313      	orrs	r3, r2
 80048f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	791b      	ldrb	r3, [r3, #4]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d11f      	bne.n	800493a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	0151      	lsls	r1, r2, #5
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	440a      	add	r2, r1
 8004910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004914:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004918:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	0151      	lsls	r1, r2, #5
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	440a      	add	r2, r1
 8004930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004934:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004938:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d14b      	bne.n	80049d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d009      	beq.n	800495c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004954:	461a      	mov	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	791b      	ldrb	r3, [r3, #4]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d128      	bne.n	80049b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d110      	bne.n	8004996 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	0151      	lsls	r1, r2, #5
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	440a      	add	r2, r1
 800498a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	e00f      	b.n	80049b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	0151      	lsls	r1, r2, #5
 80049a8:	69fa      	ldr	r2, [r7, #28]
 80049aa:	440a      	add	r2, r1
 80049ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	0151      	lsls	r1, r2, #5
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	440a      	add	r2, r1
 80049cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	e133      	b.n	8004c40 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	0151      	lsls	r1, r2, #5
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	440a      	add	r2, r1
 80049ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	791b      	ldrb	r3, [r3, #4]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d015      	beq.n	8004a2c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 811b 	beq.w	8004c40 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a20:	69f9      	ldr	r1, [r7, #28]
 8004a22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a26:	4313      	orrs	r3, r2
 8004a28:	634b      	str	r3, [r1, #52]	; 0x34
 8004a2a:	e109      	b.n	8004c40 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d110      	bne.n	8004a5e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	0151      	lsls	r1, r2, #5
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	440a      	add	r2, r1
 8004a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	e00f      	b.n	8004a7e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	6919      	ldr	r1, [r3, #16]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	781a      	ldrb	r2, [r3, #0]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	b298      	uxth	r0, r3
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	4603      	mov	r3, r0
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fade 	bl	8005054 <USB_WritePacket>
 8004a98:	e0d2      	b.n	8004c40 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	0151      	lsls	r1, r2, #5
 8004aac:	69fa      	ldr	r2, [r7, #28]
 8004aae:	440a      	add	r2, r1
 8004ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ab4:	0cdb      	lsrs	r3, r3, #19
 8004ab6:	04db      	lsls	r3, r3, #19
 8004ab8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	0151      	lsls	r1, r2, #5
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	440a      	add	r2, r1
 8004ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ad8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004adc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d126      	bne.n	8004b34 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004afc:	69b9      	ldr	r1, [r7, #24]
 8004afe:	0148      	lsls	r0, r1, #5
 8004b00:	69f9      	ldr	r1, [r7, #28]
 8004b02:	4401      	add	r1, r0
 8004b04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	0151      	lsls	r1, r2, #5
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	440a      	add	r2, r1
 8004b22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b2a:	6113      	str	r3, [r2, #16]
 8004b2c:	e03a      	b.n	8004ba4 <USB_EPStartXfer+0x3e4>
 8004b2e:	bf00      	nop
 8004b30:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	699a      	ldr	r2, [r3, #24]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	1e5a      	subs	r2, r3, #1
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b48:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	8afa      	ldrh	r2, [r7, #22]
 8004b50:	fb03 f202 	mul.w	r2, r3, r2
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	8afb      	ldrh	r3, [r7, #22]
 8004b68:	04d9      	lsls	r1, r3, #19
 8004b6a:	4b38      	ldr	r3, [pc, #224]	; (8004c4c <USB_EPStartXfer+0x48c>)
 8004b6c:	400b      	ands	r3, r1
 8004b6e:	69b9      	ldr	r1, [r7, #24]
 8004b70:	0148      	lsls	r0, r1, #5
 8004b72:	69f9      	ldr	r1, [r7, #28]
 8004b74:	4401      	add	r1, r0
 8004b76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b94:	69b9      	ldr	r1, [r7, #24]
 8004b96:	0148      	lsls	r0, r1, #5
 8004b98:	69f9      	ldr	r1, [r7, #28]
 8004b9a:	4401      	add	r1, r0
 8004b9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ba4:	79fb      	ldrb	r3, [r7, #7]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d10d      	bne.n	8004bc6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	6919      	ldr	r1, [r3, #16]
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc2:	460a      	mov	r2, r1
 8004bc4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	791b      	ldrb	r3, [r3, #4]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d128      	bne.n	8004c20 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d110      	bne.n	8004c00 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	0151      	lsls	r1, r2, #5
 8004bf0:	69fa      	ldr	r2, [r7, #28]
 8004bf2:	440a      	add	r2, r1
 8004bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	e00f      	b.n	8004c20 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	0151      	lsls	r1, r2, #5
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	440a      	add	r2, r1
 8004c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	0151      	lsls	r1, r2, #5
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	440a      	add	r2, r1
 8004c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3720      	adds	r7, #32
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	1ff80000 	.word	0x1ff80000

08004c50 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	785b      	ldrb	r3, [r3, #1]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	f040 80ce 	bne.w	8004e0e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d132      	bne.n	8004ce0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	0151      	lsls	r1, r2, #5
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	440a      	add	r2, r1
 8004c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	0151      	lsls	r1, r2, #5
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	440a      	add	r2, r1
 8004cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	0151      	lsls	r1, r2, #5
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	440a      	add	r2, r1
 8004cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd8:	0cdb      	lsrs	r3, r3, #19
 8004cda:	04db      	lsls	r3, r3, #19
 8004cdc:	6113      	str	r3, [r2, #16]
 8004cde:	e04e      	b.n	8004d7e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	0151      	lsls	r1, r2, #5
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	440a      	add	r2, r1
 8004cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cfa:	0cdb      	lsrs	r3, r3, #19
 8004cfc:	04db      	lsls	r3, r3, #19
 8004cfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	0151      	lsls	r1, r2, #5
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	440a      	add	r2, r1
 8004d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d22:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	699a      	ldr	r2, [r3, #24]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d903      	bls.n	8004d38 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	0151      	lsls	r1, r2, #5
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d6e:	6939      	ldr	r1, [r7, #16]
 8004d70:	0148      	lsls	r0, r1, #5
 8004d72:	6979      	ldr	r1, [r7, #20]
 8004d74:	4401      	add	r1, r0
 8004d76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d11e      	bne.n	8004dc2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d009      	beq.n	8004da0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d98:	461a      	mov	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	0151      	lsls	r1, r2, #5
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	440a      	add	r2, r1
 8004db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	e097      	b.n	8004ef2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	0151      	lsls	r1, r2, #5
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	440a      	add	r2, r1
 8004dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ddc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004de0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 8083 	beq.w	8004ef2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004e02:	6979      	ldr	r1, [r7, #20]
 8004e04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	634b      	str	r3, [r1, #52]	; 0x34
 8004e0c:	e071      	b.n	8004ef2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	0151      	lsls	r1, r2, #5
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	440a      	add	r2, r1
 8004e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e28:	0cdb      	lsrs	r3, r3, #19
 8004e2a:	04db      	lsls	r3, r3, #19
 8004e2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	0151      	lsls	r1, r2, #5
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	440a      	add	r2, r1
 8004e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e50:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	0151      	lsls	r1, r2, #5
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	440a      	add	r2, r1
 8004e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ea0:	6939      	ldr	r1, [r7, #16]
 8004ea2:	0148      	lsls	r0, r1, #5
 8004ea4:	6979      	ldr	r1, [r7, #20]
 8004ea6:	4401      	add	r1, r0
 8004ea8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004eac:	4313      	orrs	r3, r2
 8004eae:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d10d      	bne.n	8004ed2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d009      	beq.n	8004ed2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	6919      	ldr	r1, [r3, #16]
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ece:	460a      	mov	r2, r1
 8004ed0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	0151      	lsls	r1, r2, #5
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	440a      	add	r2, r1
 8004ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ef0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	785b      	ldrb	r3, [r3, #1]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d14a      	bne.n	8004fb4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f36:	f040 8086 	bne.w	8005046 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	7812      	ldrb	r2, [r2, #0]
 8004f4e:	0151      	lsls	r1, r2, #5
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	440a      	add	r2, r1
 8004f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f5c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	7812      	ldrb	r2, [r2, #0]
 8004f72:	0151      	lsls	r1, r2, #5
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	440a      	add	r2, r1
 8004f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3301      	adds	r3, #1
 8004f86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d902      	bls.n	8004f98 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	75fb      	strb	r3, [r7, #23]
          break;
 8004f96:	e056      	b.n	8005046 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fb0:	d0e7      	beq.n	8004f82 <USB_EPStopXfer+0x82>
 8004fb2:	e048      	b.n	8005046 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fcc:	d13b      	bne.n	8005046 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	7812      	ldrb	r2, [r2, #0]
 8004fe2:	0151      	lsls	r1, r2, #5
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	440a      	add	r2, r1
 8004fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ff0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	7812      	ldrb	r2, [r2, #0]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	440a      	add	r2, r1
 800500c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005010:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005014:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3301      	adds	r3, #1
 800501a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005022:	4293      	cmp	r3, r2
 8005024:	d902      	bls.n	800502c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	75fb      	strb	r3, [r7, #23]
          break;
 800502a:	e00c      	b.n	8005046 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005044:	d0e7      	beq.n	8005016 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005046:	7dfb      	ldrb	r3, [r7, #23]
}
 8005048:	4618      	mov	r0, r3
 800504a:	371c      	adds	r7, #28
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005054:	b480      	push	{r7}
 8005056:	b089      	sub	sp, #36	; 0x24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	4611      	mov	r1, r2
 8005060:	461a      	mov	r2, r3
 8005062:	460b      	mov	r3, r1
 8005064:	71fb      	strb	r3, [r7, #7]
 8005066:	4613      	mov	r3, r2
 8005068:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005072:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005076:	2b00      	cmp	r3, #0
 8005078:	d123      	bne.n	80050c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800507a:	88bb      	ldrh	r3, [r7, #4]
 800507c:	3303      	adds	r3, #3
 800507e:	089b      	lsrs	r3, r3, #2
 8005080:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	e018      	b.n	80050ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	031a      	lsls	r2, r3, #12
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	4413      	add	r3, r2
 8005090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005094:	461a      	mov	r2, r3
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	3301      	adds	r3, #1
 80050a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	3301      	adds	r3, #1
 80050a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	3301      	adds	r3, #1
 80050ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	3301      	adds	r3, #1
 80050b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	3301      	adds	r3, #1
 80050b8:	61bb      	str	r3, [r7, #24]
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d3e2      	bcc.n	8005088 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3724      	adds	r7, #36	; 0x24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b08b      	sub	sp, #44	; 0x2c
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	4613      	mov	r3, r2
 80050dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050e6:	88fb      	ldrh	r3, [r7, #6]
 80050e8:	089b      	lsrs	r3, r3, #2
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050ee:	88fb      	ldrh	r3, [r7, #6]
 80050f0:	f003 0303 	and.w	r3, r3, #3
 80050f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80050f6:	2300      	movs	r3, #0
 80050f8:	623b      	str	r3, [r7, #32]
 80050fa:	e014      	b.n	8005126 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	601a      	str	r2, [r3, #0]
    pDest++;
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	3301      	adds	r3, #1
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	3301      	adds	r3, #1
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	3301      	adds	r3, #1
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	3301      	adds	r3, #1
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	3301      	adds	r3, #1
 8005124:	623b      	str	r3, [r7, #32]
 8005126:	6a3a      	ldr	r2, [r7, #32]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	429a      	cmp	r2, r3
 800512c:	d3e6      	bcc.n	80050fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800512e:	8bfb      	ldrh	r3, [r7, #30]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01e      	beq.n	8005172 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800513e:	461a      	mov	r2, r3
 8005140:	f107 0310 	add.w	r3, r7, #16
 8005144:	6812      	ldr	r2, [r2, #0]
 8005146:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
 8005154:	b2da      	uxtb	r2, r3
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	701a      	strb	r2, [r3, #0]
      i++;
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	3301      	adds	r3, #1
 800515e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	3301      	adds	r3, #1
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005166:	8bfb      	ldrh	r3, [r7, #30]
 8005168:	3b01      	subs	r3, #1
 800516a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800516c:	8bfb      	ldrh	r3, [r7, #30]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1ea      	bne.n	8005148 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005174:	4618      	mov	r0, r3
 8005176:	372c      	adds	r7, #44	; 0x2c
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	785b      	ldrb	r3, [r3, #1]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d12c      	bne.n	80051f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	db12      	blt.n	80051d4 <USB_EPSetStall+0x54>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00f      	beq.n	80051d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	0151      	lsls	r1, r2, #5
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	440a      	add	r2, r1
 80051ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	0151      	lsls	r1, r2, #5
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	440a      	add	r2, r1
 80051ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	e02b      	b.n	800524e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	db12      	blt.n	800522e <USB_EPSetStall+0xae>
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00f      	beq.n	800522e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	0151      	lsls	r1, r2, #5
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	440a      	add	r2, r1
 8005224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005228:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800522c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	0151      	lsls	r1, r2, #5
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	440a      	add	r2, r1
 8005244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800524c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	785b      	ldrb	r3, [r3, #1]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d128      	bne.n	80052ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	0151      	lsls	r1, r2, #5
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	440a      	add	r2, r1
 800528e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005292:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005296:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	791b      	ldrb	r3, [r3, #4]
 800529c:	2b03      	cmp	r3, #3
 800529e:	d003      	beq.n	80052a8 <USB_EPClearStall+0x4c>
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	791b      	ldrb	r3, [r3, #4]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d138      	bne.n	800531a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	0151      	lsls	r1, r2, #5
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	440a      	add	r2, r1
 80052be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	e027      	b.n	800531a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	0151      	lsls	r1, r2, #5
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	440a      	add	r2, r1
 80052e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	791b      	ldrb	r3, [r3, #4]
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d003      	beq.n	80052fa <USB_EPClearStall+0x9e>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	791b      	ldrb	r3, [r3, #4]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d10f      	bne.n	800531a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005318:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005346:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800534a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800535c:	68f9      	ldr	r1, [r7, #12]
 800535e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005362:	4313      	orrs	r3, r2
 8005364:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800538e:	f023 0303 	bic.w	r3, r3, #3
 8005392:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053a2:	f023 0302 	bic.w	r3, r3, #2
 80053a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b085      	sub	sp, #20
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053d0:	f023 0303 	bic.w	r3, r3, #3
 80053d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053e4:	f043 0302 	orr.w	r3, r3, #2
 80053e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4013      	ands	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005410:	68fb      	ldr	r3, [r7, #12]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800541e:	b480      	push	{r7}
 8005420:	b085      	sub	sp, #20
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	4013      	ands	r3, r2
 8005440:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	0c1b      	lsrs	r3, r3, #16
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005452:	b480      	push	{r7}
 8005454:	b085      	sub	sp, #20
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	4013      	ands	r3, r2
 8005474:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	b29b      	uxth	r3, r3
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005486:	b480      	push	{r7}
 8005488:	b085      	sub	sp, #20
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	460b      	mov	r3, r1
 8005490:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005496:	78fb      	ldrb	r3, [r7, #3]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	4013      	ands	r3, r2
 80054b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054b4:	68bb      	ldr	r3, [r7, #8]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b087      	sub	sp, #28
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054e6:	78fb      	ldrb	r3, [r7, #3]
 80054e8:	f003 030f 	and.w	r3, r3, #15
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	fa22 f303 	lsr.w	r3, r2, r3
 80054f2:	01db      	lsls	r3, r3, #7
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4013      	ands	r3, r2
 800550e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005510:	68bb      	ldr	r3, [r7, #8]
}
 8005512:	4618      	mov	r0, r3
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f003 0301 	and.w	r3, r3, #1
}
 800552e:	4618      	mov	r0, r3
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005554:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005558:	f023 0307 	bic.w	r3, r3, #7
 800555c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800556c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005570:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	460b      	mov	r3, r1
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	333c      	adds	r3, #60	; 0x3c
 8005596:	3304      	adds	r3, #4
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	4a26      	ldr	r2, [pc, #152]	; (8005638 <USB_EP0_OutStart+0xb8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d90a      	bls.n	80055ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055b4:	d101      	bne.n	80055ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	e037      	b.n	800562a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c0:	461a      	mov	r2, r3
 80055c2:	2300      	movs	r3, #0
 80055c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e8:	f043 0318 	orr.w	r3, r3, #24
 80055ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005600:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005602:	7afb      	ldrb	r3, [r7, #11]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d10f      	bne.n	8005628 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560e:	461a      	mov	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005622:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005626:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	4f54300a 	.word	0x4f54300a

0800563c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3301      	adds	r3, #1
 800564c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <USB_CoreReset+0x64>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d901      	bls.n	800565a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e01b      	b.n	8005692 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	daf2      	bge.n	8005648 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f043 0201 	orr.w	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3301      	adds	r3, #1
 8005676:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <USB_CoreReset+0x64>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d901      	bls.n	8005684 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e006      	b.n	8005692 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b01      	cmp	r3, #1
 800568e:	d0f0      	beq.n	8005672 <USB_CoreReset+0x36>

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	00030d40 	.word	0x00030d40

080056a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80056b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80056b4:	f002 fc3c 	bl	8007f30 <USBD_static_malloc>
 80056b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d109      	bne.n	80056d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	32b0      	adds	r2, #176	; 0xb0
 80056ca:	2100      	movs	r1, #0
 80056cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80056d0:	2302      	movs	r3, #2
 80056d2:	e0d4      	b.n	800587e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80056d4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80056d8:	2100      	movs	r1, #0
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f002 fc96 	bl	800800c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	32b0      	adds	r2, #176	; 0xb0
 80056ea:	68f9      	ldr	r1, [r7, #12]
 80056ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	32b0      	adds	r2, #176	; 0xb0
 80056fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	7c1b      	ldrb	r3, [r3, #16]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d138      	bne.n	800577e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800570c:	4b5e      	ldr	r3, [pc, #376]	; (8005888 <USBD_CDC_Init+0x1e4>)
 800570e:	7819      	ldrb	r1, [r3, #0]
 8005710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005714:	2202      	movs	r2, #2
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f002 fae7 	bl	8007cea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800571c:	4b5a      	ldr	r3, [pc, #360]	; (8005888 <USBD_CDC_Init+0x1e4>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	f003 020f 	and.w	r2, r3, #15
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	440b      	add	r3, r1
 8005730:	3324      	adds	r3, #36	; 0x24
 8005732:	2201      	movs	r2, #1
 8005734:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005736:	4b55      	ldr	r3, [pc, #340]	; (800588c <USBD_CDC_Init+0x1e8>)
 8005738:	7819      	ldrb	r1, [r3, #0]
 800573a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800573e:	2202      	movs	r2, #2
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f002 fad2 	bl	8007cea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005746:	4b51      	ldr	r3, [pc, #324]	; (800588c <USBD_CDC_Init+0x1e8>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	f003 020f 	and.w	r2, r3, #15
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800575e:	2201      	movs	r2, #1
 8005760:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005762:	4b4b      	ldr	r3, [pc, #300]	; (8005890 <USBD_CDC_Init+0x1ec>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	f003 020f 	and.w	r2, r3, #15
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	3326      	adds	r3, #38	; 0x26
 8005778:	2210      	movs	r2, #16
 800577a:	801a      	strh	r2, [r3, #0]
 800577c:	e035      	b.n	80057ea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800577e:	4b42      	ldr	r3, [pc, #264]	; (8005888 <USBD_CDC_Init+0x1e4>)
 8005780:	7819      	ldrb	r1, [r3, #0]
 8005782:	2340      	movs	r3, #64	; 0x40
 8005784:	2202      	movs	r2, #2
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f002 faaf 	bl	8007cea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800578c:	4b3e      	ldr	r3, [pc, #248]	; (8005888 <USBD_CDC_Init+0x1e4>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	f003 020f 	and.w	r2, r3, #15
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	440b      	add	r3, r1
 80057a0:	3324      	adds	r3, #36	; 0x24
 80057a2:	2201      	movs	r2, #1
 80057a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80057a6:	4b39      	ldr	r3, [pc, #228]	; (800588c <USBD_CDC_Init+0x1e8>)
 80057a8:	7819      	ldrb	r1, [r3, #0]
 80057aa:	2340      	movs	r3, #64	; 0x40
 80057ac:	2202      	movs	r2, #2
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f002 fa9b 	bl	8007cea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80057b4:	4b35      	ldr	r3, [pc, #212]	; (800588c <USBD_CDC_Init+0x1e8>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	f003 020f 	and.w	r2, r3, #15
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80057cc:	2201      	movs	r2, #1
 80057ce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80057d0:	4b2f      	ldr	r3, [pc, #188]	; (8005890 <USBD_CDC_Init+0x1ec>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	f003 020f 	and.w	r2, r3, #15
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	3326      	adds	r3, #38	; 0x26
 80057e6:	2210      	movs	r2, #16
 80057e8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80057ea:	4b29      	ldr	r3, [pc, #164]	; (8005890 <USBD_CDC_Init+0x1ec>)
 80057ec:	7819      	ldrb	r1, [r3, #0]
 80057ee:	2308      	movs	r3, #8
 80057f0:	2203      	movs	r2, #3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f002 fa79 	bl	8007cea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80057f8:	4b25      	ldr	r3, [pc, #148]	; (8005890 <USBD_CDC_Init+0x1ec>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	f003 020f 	and.w	r2, r3, #15
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	3324      	adds	r3, #36	; 0x24
 800580e:	2201      	movs	r2, #1
 8005810:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	33b0      	adds	r3, #176	; 0xb0
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005848:	2302      	movs	r3, #2
 800584a:	e018      	b.n	800587e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	7c1b      	ldrb	r3, [r3, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005854:	4b0d      	ldr	r3, [pc, #52]	; (800588c <USBD_CDC_Init+0x1e8>)
 8005856:	7819      	ldrb	r1, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800585e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f002 fb30 	bl	8007ec8 <USBD_LL_PrepareReceive>
 8005868:	e008      	b.n	800587c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800586a:	4b08      	ldr	r3, [pc, #32]	; (800588c <USBD_CDC_Init+0x1e8>)
 800586c:	7819      	ldrb	r1, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005874:	2340      	movs	r3, #64	; 0x40
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f002 fb26 	bl	8007ec8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20000093 	.word	0x20000093
 800588c:	20000094 	.word	0x20000094
 8005890:	20000095 	.word	0x20000095

08005894 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80058a0:	4b3a      	ldr	r3, [pc, #232]	; (800598c <USBD_CDC_DeInit+0xf8>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f002 fa45 	bl	8007d36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80058ac:	4b37      	ldr	r3, [pc, #220]	; (800598c <USBD_CDC_DeInit+0xf8>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	f003 020f 	and.w	r2, r3, #15
 80058b4:	6879      	ldr	r1, [r7, #4]
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	440b      	add	r3, r1
 80058c0:	3324      	adds	r3, #36	; 0x24
 80058c2:	2200      	movs	r2, #0
 80058c4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80058c6:	4b32      	ldr	r3, [pc, #200]	; (8005990 <USBD_CDC_DeInit+0xfc>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f002 fa32 	bl	8007d36 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80058d2:	4b2f      	ldr	r3, [pc, #188]	; (8005990 <USBD_CDC_DeInit+0xfc>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	f003 020f 	and.w	r2, r3, #15
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80058ea:	2200      	movs	r2, #0
 80058ec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80058ee:	4b29      	ldr	r3, [pc, #164]	; (8005994 <USBD_CDC_DeInit+0x100>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	4619      	mov	r1, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f002 fa1e 	bl	8007d36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80058fa:	4b26      	ldr	r3, [pc, #152]	; (8005994 <USBD_CDC_DeInit+0x100>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	f003 020f 	and.w	r2, r3, #15
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	4613      	mov	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	440b      	add	r3, r1
 800590e:	3324      	adds	r3, #36	; 0x24
 8005910:	2200      	movs	r2, #0
 8005912:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005914:	4b1f      	ldr	r3, [pc, #124]	; (8005994 <USBD_CDC_DeInit+0x100>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	f003 020f 	and.w	r2, r3, #15
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	440b      	add	r3, r1
 8005928:	3326      	adds	r3, #38	; 0x26
 800592a:	2200      	movs	r2, #0
 800592c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	32b0      	adds	r2, #176	; 0xb0
 8005938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01f      	beq.n	8005980 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	33b0      	adds	r3, #176	; 0xb0
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	32b0      	adds	r2, #176	; 0xb0
 800595e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005962:	4618      	mov	r0, r3
 8005964:	f002 faf2 	bl	8007f4c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	32b0      	adds	r2, #176	; 0xb0
 8005972:	2100      	movs	r1, #0
 8005974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000093 	.word	0x20000093
 8005990:	20000094 	.word	0x20000094
 8005994:	20000095 	.word	0x20000095

08005998 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	32b0      	adds	r2, #176	; 0xb0
 80059ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e0bf      	b.n	8005b48 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d050      	beq.n	8005a76 <USBD_CDC_Setup+0xde>
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	f040 80af 	bne.w	8005b38 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	88db      	ldrh	r3, [r3, #6]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d03a      	beq.n	8005a58 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	b25b      	sxtb	r3, r3
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	da1b      	bge.n	8005a24 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	33b0      	adds	r3, #176	; 0xb0
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005a02:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	88d2      	ldrh	r2, [r2, #6]
 8005a08:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	88db      	ldrh	r3, [r3, #6]
 8005a0e:	2b07      	cmp	r3, #7
 8005a10:	bf28      	it	cs
 8005a12:	2307      	movcs	r3, #7
 8005a14:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	89fa      	ldrh	r2, [r7, #14]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f001 fd43 	bl	80074a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005a22:	e090      	b.n	8005b46 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	785a      	ldrb	r2, [r3, #1]
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	88db      	ldrh	r3, [r3, #6]
 8005a32:	2b3f      	cmp	r3, #63	; 0x3f
 8005a34:	d803      	bhi.n	8005a3e <USBD_CDC_Setup+0xa6>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	88db      	ldrh	r3, [r3, #6]
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	e000      	b.n	8005a40 <USBD_CDC_Setup+0xa8>
 8005a3e:	2240      	movs	r2, #64	; 0x40
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005a46:	6939      	ldr	r1, [r7, #16]
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005a4e:	461a      	mov	r2, r3
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f001 fd55 	bl	8007500 <USBD_CtlPrepareRx>
      break;
 8005a56:	e076      	b.n	8005b46 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	33b0      	adds	r3, #176	; 0xb0
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	7850      	ldrb	r0, [r2, #1]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	6839      	ldr	r1, [r7, #0]
 8005a72:	4798      	blx	r3
      break;
 8005a74:	e067      	b.n	8005b46 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	785b      	ldrb	r3, [r3, #1]
 8005a7a:	2b0b      	cmp	r3, #11
 8005a7c:	d851      	bhi.n	8005b22 <USBD_CDC_Setup+0x18a>
 8005a7e:	a201      	add	r2, pc, #4	; (adr r2, 8005a84 <USBD_CDC_Setup+0xec>)
 8005a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a84:	08005ab5 	.word	0x08005ab5
 8005a88:	08005b31 	.word	0x08005b31
 8005a8c:	08005b23 	.word	0x08005b23
 8005a90:	08005b23 	.word	0x08005b23
 8005a94:	08005b23 	.word	0x08005b23
 8005a98:	08005b23 	.word	0x08005b23
 8005a9c:	08005b23 	.word	0x08005b23
 8005aa0:	08005b23 	.word	0x08005b23
 8005aa4:	08005b23 	.word	0x08005b23
 8005aa8:	08005b23 	.word	0x08005b23
 8005aac:	08005adf 	.word	0x08005adf
 8005ab0:	08005b09 	.word	0x08005b09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d107      	bne.n	8005ad0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005ac0:	f107 030a 	add.w	r3, r7, #10
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f001 fced 	bl	80074a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ace:	e032      	b.n	8005b36 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005ad0:	6839      	ldr	r1, [r7, #0]
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f001 fc77 	bl	80073c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	75fb      	strb	r3, [r7, #23]
          break;
 8005adc:	e02b      	b.n	8005b36 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d107      	bne.n	8005afa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005aea:	f107 030d 	add.w	r3, r7, #13
 8005aee:	2201      	movs	r2, #1
 8005af0:	4619      	mov	r1, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f001 fcd8 	bl	80074a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005af8:	e01d      	b.n	8005b36 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005afa:	6839      	ldr	r1, [r7, #0]
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f001 fc62 	bl	80073c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b02:	2303      	movs	r3, #3
 8005b04:	75fb      	strb	r3, [r7, #23]
          break;
 8005b06:	e016      	b.n	8005b36 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d00f      	beq.n	8005b34 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005b14:	6839      	ldr	r1, [r7, #0]
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f001 fc55 	bl	80073c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005b20:	e008      	b.n	8005b34 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005b22:	6839      	ldr	r1, [r7, #0]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f001 fc4e 	bl	80073c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	75fb      	strb	r3, [r7, #23]
          break;
 8005b2e:	e002      	b.n	8005b36 <USBD_CDC_Setup+0x19e>
          break;
 8005b30:	bf00      	nop
 8005b32:	e008      	b.n	8005b46 <USBD_CDC_Setup+0x1ae>
          break;
 8005b34:	bf00      	nop
      }
      break;
 8005b36:	e006      	b.n	8005b46 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005b38:	6839      	ldr	r1, [r7, #0]
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f001 fc43 	bl	80073c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005b40:	2303      	movs	r3, #3
 8005b42:	75fb      	strb	r3, [r7, #23]
      break;
 8005b44:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005b62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	32b0      	adds	r2, #176	; 0xb0
 8005b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e065      	b.n	8005c46 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	32b0      	adds	r2, #176	; 0xb0
 8005b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b88:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b8a:	78fb      	ldrb	r3, [r7, #3]
 8005b8c:	f003 020f 	and.w	r2, r3, #15
 8005b90:	6879      	ldr	r1, [r7, #4]
 8005b92:	4613      	mov	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	440b      	add	r3, r1
 8005b9c:	3318      	adds	r3, #24
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d02f      	beq.n	8005c04 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	f003 020f 	and.w	r2, r3, #15
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	4613      	mov	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	3318      	adds	r3, #24
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	78fb      	ldrb	r3, [r7, #3]
 8005bbc:	f003 010f 	and.w	r1, r3, #15
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	440b      	add	r3, r1
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4403      	add	r3, r0
 8005bcc:	3348      	adds	r3, #72	; 0x48
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	fbb2 f1f3 	udiv	r1, r2, r3
 8005bd4:	fb01 f303 	mul.w	r3, r1, r3
 8005bd8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d112      	bne.n	8005c04 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	f003 020f 	and.w	r2, r3, #15
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	440b      	add	r3, r1
 8005bf0:	3318      	adds	r3, #24
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005bf6:	78f9      	ldrb	r1, [r7, #3]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f002 f942 	bl	8007e86 <USBD_LL_Transmit>
 8005c02:	e01f      	b.n	8005c44 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	33b0      	adds	r3, #176	; 0xb0
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d010      	beq.n	8005c44 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	33b0      	adds	r3, #176	; 0xb0
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005c40:	78fa      	ldrb	r2, [r7, #3]
 8005c42:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	460b      	mov	r3, r1
 8005c58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	32b0      	adds	r2, #176	; 0xb0
 8005c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	32b0      	adds	r2, #176	; 0xb0
 8005c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e01a      	b.n	8005cb6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	4619      	mov	r1, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f002 f940 	bl	8007f0a <USBD_LL_GetRxDataSize>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	33b0      	adds	r3, #176	; 0xb0
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	32b0      	adds	r2, #176	; 0xb0
 8005cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e025      	b.n	8005d2c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	33b0      	adds	r3, #176	; 0xb0
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d01a      	beq.n	8005d2a <USBD_CDC_EP0_RxReady+0x6c>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005cfa:	2bff      	cmp	r3, #255	; 0xff
 8005cfc:	d015      	beq.n	8005d2a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	33b0      	adds	r3, #176	; 0xb0
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005d16:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005d1e:	b292      	uxth	r2, r2
 8005d20:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	22ff      	movs	r2, #255	; 0xff
 8005d26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d3c:	2182      	movs	r1, #130	; 0x82
 8005d3e:	4818      	ldr	r0, [pc, #96]	; (8005da0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d40:	f000 fd09 	bl	8006756 <USBD_GetEpDesc>
 8005d44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d46:	2101      	movs	r1, #1
 8005d48:	4815      	ldr	r0, [pc, #84]	; (8005da0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d4a:	f000 fd04 	bl	8006756 <USBD_GetEpDesc>
 8005d4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d50:	2181      	movs	r1, #129	; 0x81
 8005d52:	4813      	ldr	r0, [pc, #76]	; (8005da0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d54:	f000 fcff 	bl	8006756 <USBD_GetEpDesc>
 8005d58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2210      	movs	r2, #16
 8005d64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d006      	beq.n	8005d7a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d74:	711a      	strb	r2, [r3, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d006      	beq.n	8005d8e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d88:	711a      	strb	r2, [r3, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2243      	movs	r2, #67	; 0x43
 8005d92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d94:	4b02      	ldr	r3, [pc, #8]	; (8005da0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3718      	adds	r7, #24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000050 	.word	0x20000050

08005da4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005dac:	2182      	movs	r1, #130	; 0x82
 8005dae:	4818      	ldr	r0, [pc, #96]	; (8005e10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005db0:	f000 fcd1 	bl	8006756 <USBD_GetEpDesc>
 8005db4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005db6:	2101      	movs	r1, #1
 8005db8:	4815      	ldr	r0, [pc, #84]	; (8005e10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005dba:	f000 fccc 	bl	8006756 <USBD_GetEpDesc>
 8005dbe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005dc0:	2181      	movs	r1, #129	; 0x81
 8005dc2:	4813      	ldr	r0, [pc, #76]	; (8005e10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005dc4:	f000 fcc7 	bl	8006756 <USBD_GetEpDesc>
 8005dc8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2210      	movs	r2, #16
 8005dd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d006      	beq.n	8005dea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2200      	movs	r2, #0
 8005de0:	711a      	strb	r2, [r3, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f042 0202 	orr.w	r2, r2, #2
 8005de8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d006      	beq.n	8005dfe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	711a      	strb	r2, [r3, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f042 0202 	orr.w	r2, r2, #2
 8005dfc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2243      	movs	r2, #67	; 0x43
 8005e02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e04:	4b02      	ldr	r3, [pc, #8]	; (8005e10 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000050 	.word	0x20000050

08005e14 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e1c:	2182      	movs	r1, #130	; 0x82
 8005e1e:	4818      	ldr	r0, [pc, #96]	; (8005e80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e20:	f000 fc99 	bl	8006756 <USBD_GetEpDesc>
 8005e24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e26:	2101      	movs	r1, #1
 8005e28:	4815      	ldr	r0, [pc, #84]	; (8005e80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e2a:	f000 fc94 	bl	8006756 <USBD_GetEpDesc>
 8005e2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e30:	2181      	movs	r1, #129	; 0x81
 8005e32:	4813      	ldr	r0, [pc, #76]	; (8005e80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e34:	f000 fc8f 	bl	8006756 <USBD_GetEpDesc>
 8005e38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d002      	beq.n	8005e46 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2210      	movs	r2, #16
 8005e44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d006      	beq.n	8005e5a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e54:	711a      	strb	r2, [r3, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d006      	beq.n	8005e6e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e68:	711a      	strb	r2, [r3, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2243      	movs	r2, #67	; 0x43
 8005e72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e74:	4b02      	ldr	r3, [pc, #8]	; (8005e80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	20000050 	.word	0x20000050

08005e84 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	220a      	movs	r2, #10
 8005e90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e92:	4b03      	ldr	r3, [pc, #12]	; (8005ea0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	2000000c 	.word	0x2000000c

08005ea4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e009      	b.n	8005ecc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	33b0      	adds	r3, #176	; 0xb0
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	32b0      	adds	r2, #176	; 0xb0
 8005eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e008      	b.n	8005f10 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	371c      	adds	r7, #28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	32b0      	adds	r2, #176	; 0xb0
 8005f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e004      	b.n	8005f4a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
	...

08005f58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	32b0      	adds	r2, #176	; 0xb0
 8005f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f6e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	32b0      	adds	r2, #176	; 0xb0
 8005f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e018      	b.n	8005fb8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	7c1b      	ldrb	r3, [r3, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10a      	bne.n	8005fa4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f8e:	4b0c      	ldr	r3, [pc, #48]	; (8005fc0 <USBD_CDC_ReceivePacket+0x68>)
 8005f90:	7819      	ldrb	r1, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f001 ff93 	bl	8007ec8 <USBD_LL_PrepareReceive>
 8005fa2:	e008      	b.n	8005fb6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fa4:	4b06      	ldr	r3, [pc, #24]	; (8005fc0 <USBD_CDC_ReceivePacket+0x68>)
 8005fa6:	7819      	ldrb	r1, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fae:	2340      	movs	r3, #64	; 0x40
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f001 ff89 	bl	8007ec8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	20000094 	.word	0x20000094

08005fc4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e01f      	b.n	800601c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	79fa      	ldrb	r2, [r7, #7]
 800600e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f001 fe03 	bl	8007c1c <USBD_LL_Init>
 8006016:	4603      	mov	r3, r0
 8006018:	75fb      	strb	r3, [r7, #23]

  return ret;
 800601a:	7dfb      	ldrb	r3, [r7, #23]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3718      	adds	r7, #24
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006038:	2303      	movs	r3, #3
 800603a:	e025      	b.n	8006088 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	32ae      	adds	r2, #174	; 0xae
 800604e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00f      	beq.n	8006078 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	32ae      	adds	r2, #174	; 0xae
 8006062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	f107 020e 	add.w	r2, r7, #14
 800606c:	4610      	mov	r0, r2
 800606e:	4798      	blx	r3
 8006070:	4602      	mov	r2, r0
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f001 fe0b 	bl	8007cb4 <USBD_LL_Start>
 800609e:	4603      	mov	r3, r0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b084      	sub	sp, #16
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	460b      	mov	r3, r1
 80060c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d009      	beq.n	80060ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	78fa      	ldrb	r2, [r7, #3]
 80060e2:	4611      	mov	r1, r2
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	4798      	blx	r3
 80060e8:	4603      	mov	r3, r0
 80060ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	460b      	mov	r3, r1
 8006100:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	78fa      	ldrb	r2, [r7, #3]
 8006110:	4611      	mov	r1, r2
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	4798      	blx	r3
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800611c:	2303      	movs	r3, #3
 800611e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006120:	7bfb      	ldrb	r3, [r7, #15]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	4618      	mov	r0, r3
 800613e:	f001 f908 	bl	8007352 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006150:	461a      	mov	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	2b02      	cmp	r3, #2
 8006164:	d01a      	beq.n	800619c <USBD_LL_SetupStage+0x72>
 8006166:	2b02      	cmp	r3, #2
 8006168:	d822      	bhi.n	80061b0 <USBD_LL_SetupStage+0x86>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <USBD_LL_SetupStage+0x4a>
 800616e:	2b01      	cmp	r3, #1
 8006170:	d00a      	beq.n	8006188 <USBD_LL_SetupStage+0x5e>
 8006172:	e01d      	b.n	80061b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fb5f 	bl	8006840 <USBD_StdDevReq>
 8006182:	4603      	mov	r3, r0
 8006184:	73fb      	strb	r3, [r7, #15]
      break;
 8006186:	e020      	b.n	80061ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fbc7 	bl	8006924 <USBD_StdItfReq>
 8006196:	4603      	mov	r3, r0
 8006198:	73fb      	strb	r3, [r7, #15]
      break;
 800619a:	e016      	b.n	80061ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fc29 	bl	80069fc <USBD_StdEPReq>
 80061aa:	4603      	mov	r3, r0
 80061ac:	73fb      	strb	r3, [r7, #15]
      break;
 80061ae:	e00c      	b.n	80061ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f001 fdd8 	bl	8007d74 <USBD_LL_StallEP>
 80061c4:	4603      	mov	r3, r0
 80061c6:	73fb      	strb	r3, [r7, #15]
      break;
 80061c8:	bf00      	nop
  }

  return ret;
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	460b      	mov	r3, r1
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80061e6:	7afb      	ldrb	r3, [r7, #11]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d16e      	bne.n	80062ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80061f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	f040 8098 	bne.w	8006330 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	429a      	cmp	r2, r3
 800620a:	d913      	bls.n	8006234 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	1ad2      	subs	r2, r2, r3
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	4293      	cmp	r3, r2
 8006224:	bf28      	it	cs
 8006226:	4613      	movcs	r3, r2
 8006228:	461a      	mov	r2, r3
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f001 f984 	bl	800753a <USBD_CtlContinueRx>
 8006232:	e07d      	b.n	8006330 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800623a:	f003 031f 	and.w	r3, r3, #31
 800623e:	2b02      	cmp	r3, #2
 8006240:	d014      	beq.n	800626c <USBD_LL_DataOutStage+0x98>
 8006242:	2b02      	cmp	r3, #2
 8006244:	d81d      	bhi.n	8006282 <USBD_LL_DataOutStage+0xae>
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <USBD_LL_DataOutStage+0x7c>
 800624a:	2b01      	cmp	r3, #1
 800624c:	d003      	beq.n	8006256 <USBD_LL_DataOutStage+0x82>
 800624e:	e018      	b.n	8006282 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006250:	2300      	movs	r3, #0
 8006252:	75bb      	strb	r3, [r7, #22]
            break;
 8006254:	e018      	b.n	8006288 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800625c:	b2db      	uxtb	r3, r3
 800625e:	4619      	mov	r1, r3
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 fa5e 	bl	8006722 <USBD_CoreFindIF>
 8006266:	4603      	mov	r3, r0
 8006268:	75bb      	strb	r3, [r7, #22]
            break;
 800626a:	e00d      	b.n	8006288 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006272:	b2db      	uxtb	r3, r3
 8006274:	4619      	mov	r1, r3
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 fa60 	bl	800673c <USBD_CoreFindEP>
 800627c:	4603      	mov	r3, r0
 800627e:	75bb      	strb	r3, [r7, #22]
            break;
 8006280:	e002      	b.n	8006288 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	75bb      	strb	r3, [r7, #22]
            break;
 8006286:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006288:	7dbb      	ldrb	r3, [r7, #22]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d119      	bne.n	80062c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b03      	cmp	r3, #3
 8006298:	d113      	bne.n	80062c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800629a:	7dba      	ldrb	r2, [r7, #22]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	32ae      	adds	r2, #174	; 0xae
 80062a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00b      	beq.n	80062c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80062aa:	7dba      	ldrb	r2, [r7, #22]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80062b2:	7dba      	ldrb	r2, [r7, #22]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	32ae      	adds	r2, #174	; 0xae
 80062b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f001 f94a 	bl	800755c <USBD_CtlSendStatus>
 80062c8:	e032      	b.n	8006330 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80062ca:	7afb      	ldrb	r3, [r7, #11]
 80062cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	4619      	mov	r1, r3
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 fa31 	bl	800673c <USBD_CoreFindEP>
 80062da:	4603      	mov	r3, r0
 80062dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062de:	7dbb      	ldrb	r3, [r7, #22]
 80062e0:	2bff      	cmp	r3, #255	; 0xff
 80062e2:	d025      	beq.n	8006330 <USBD_LL_DataOutStage+0x15c>
 80062e4:	7dbb      	ldrb	r3, [r7, #22]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d122      	bne.n	8006330 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d117      	bne.n	8006326 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80062f6:	7dba      	ldrb	r2, [r7, #22]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	32ae      	adds	r2, #174	; 0xae
 80062fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00f      	beq.n	8006326 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006306:	7dba      	ldrb	r2, [r7, #22]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800630e:	7dba      	ldrb	r2, [r7, #22]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	32ae      	adds	r2, #174	; 0xae
 8006314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	7afa      	ldrb	r2, [r7, #11]
 800631c:	4611      	mov	r1, r2
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	4798      	blx	r3
 8006322:	4603      	mov	r3, r0
 8006324:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006326:	7dfb      	ldrb	r3, [r7, #23]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800632c:	7dfb      	ldrb	r3, [r7, #23]
 800632e:	e000      	b.n	8006332 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b086      	sub	sp, #24
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	460b      	mov	r3, r1
 8006344:	607a      	str	r2, [r7, #4]
 8006346:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006348:	7afb      	ldrb	r3, [r7, #11]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d16f      	bne.n	800642e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3314      	adds	r3, #20
 8006352:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800635a:	2b02      	cmp	r3, #2
 800635c:	d15a      	bne.n	8006414 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	429a      	cmp	r2, r3
 8006368:	d914      	bls.n	8006394 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	689a      	ldr	r2, [r3, #8]
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	1ad2      	subs	r2, r2, r3
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	461a      	mov	r2, r3
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f001 f8ac 	bl	80074de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006386:	2300      	movs	r3, #0
 8006388:	2200      	movs	r2, #0
 800638a:	2100      	movs	r1, #0
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f001 fd9b 	bl	8007ec8 <USBD_LL_PrepareReceive>
 8006392:	e03f      	b.n	8006414 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	429a      	cmp	r2, r3
 800639e:	d11c      	bne.n	80063da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d316      	bcc.n	80063da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d20f      	bcs.n	80063da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80063ba:	2200      	movs	r2, #0
 80063bc:	2100      	movs	r1, #0
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f001 f88d 	bl	80074de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063cc:	2300      	movs	r3, #0
 80063ce:	2200      	movs	r2, #0
 80063d0:	2100      	movs	r1, #0
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f001 fd78 	bl	8007ec8 <USBD_LL_PrepareReceive>
 80063d8:	e01c      	b.n	8006414 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d10f      	bne.n	8006406 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d009      	beq.n	8006406 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006406:	2180      	movs	r1, #128	; 0x80
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f001 fcb3 	bl	8007d74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f001 f8b7 	bl	8007582 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d03a      	beq.n	8006494 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f7ff fe42 	bl	80060a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800642c:	e032      	b.n	8006494 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800642e:	7afb      	ldrb	r3, [r7, #11]
 8006430:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006434:	b2db      	uxtb	r3, r3
 8006436:	4619      	mov	r1, r3
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 f97f 	bl	800673c <USBD_CoreFindEP>
 800643e:	4603      	mov	r3, r0
 8006440:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006442:	7dfb      	ldrb	r3, [r7, #23]
 8006444:	2bff      	cmp	r3, #255	; 0xff
 8006446:	d025      	beq.n	8006494 <USBD_LL_DataInStage+0x15a>
 8006448:	7dfb      	ldrb	r3, [r7, #23]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d122      	bne.n	8006494 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b03      	cmp	r3, #3
 8006458:	d11c      	bne.n	8006494 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800645a:	7dfa      	ldrb	r2, [r7, #23]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	32ae      	adds	r2, #174	; 0xae
 8006460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d014      	beq.n	8006494 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800646a:	7dfa      	ldrb	r2, [r7, #23]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006472:	7dfa      	ldrb	r2, [r7, #23]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	32ae      	adds	r2, #174	; 0xae
 8006478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	7afa      	ldrb	r2, [r7, #11]
 8006480:	4611      	mov	r1, r2
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	4798      	blx	r3
 8006486:	4603      	mov	r3, r0
 8006488:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800648a:	7dbb      	ldrb	r3, [r7, #22]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006490:	7dbb      	ldrb	r3, [r7, #22]
 8006492:	e000      	b.n	8006496 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d014      	beq.n	8006504 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00e      	beq.n	8006504 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6852      	ldr	r2, [r2, #4]
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	4611      	mov	r1, r2
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	4798      	blx	r3
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006500:	2303      	movs	r3, #3
 8006502:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006504:	2340      	movs	r3, #64	; 0x40
 8006506:	2200      	movs	r2, #0
 8006508:	2100      	movs	r1, #0
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f001 fbed 	bl	8007cea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2240      	movs	r2, #64	; 0x40
 800651c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006520:	2340      	movs	r3, #64	; 0x40
 8006522:	2200      	movs	r2, #0
 8006524:	2180      	movs	r1, #128	; 0x80
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f001 fbdf 	bl	8007cea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2240      	movs	r2, #64	; 0x40
 8006536:	621a      	str	r2, [r3, #32]

  return ret;
 8006538:	7bfb      	ldrb	r3, [r7, #15]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006542:	b480      	push	{r7}
 8006544:	b083      	sub	sp, #12
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	460b      	mov	r3, r1
 800654c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	78fa      	ldrb	r2, [r7, #3]
 8006552:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006570:	b2da      	uxtb	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2204      	movs	r2, #4
 800657c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d106      	bne.n	80065b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d110      	bne.n	80065f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00b      	beq.n	80065f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d005      	beq.n	80065f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b082      	sub	sp, #8
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	460b      	mov	r3, r1
 8006608:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	32ae      	adds	r2, #174	; 0xae
 8006614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800661c:	2303      	movs	r3, #3
 800661e:	e01c      	b.n	800665a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b03      	cmp	r3, #3
 800662a:	d115      	bne.n	8006658 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	32ae      	adds	r2, #174	; 0xae
 8006636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00b      	beq.n	8006658 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	32ae      	adds	r2, #174	; 0xae
 800664a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	78fa      	ldrb	r2, [r7, #3]
 8006652:	4611      	mov	r1, r2
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	460b      	mov	r3, r1
 800666c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	32ae      	adds	r2, #174	; 0xae
 8006678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006680:	2303      	movs	r3, #3
 8006682:	e01c      	b.n	80066be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b03      	cmp	r3, #3
 800668e:	d115      	bne.n	80066bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	32ae      	adds	r2, #174	; 0xae
 800669a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	32ae      	adds	r2, #174	; 0xae
 80066ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	78fa      	ldrb	r2, [r7, #3]
 80066b6:	4611      	mov	r1, r2
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00e      	beq.n	8006718 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	6852      	ldr	r2, [r2, #4]
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	4611      	mov	r1, r2
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	4798      	blx	r3
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006714:	2303      	movs	r3, #3
 8006716:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006718:	7bfb      	ldrb	r3, [r7, #15]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	460b      	mov	r3, r1
 800672c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800672e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006748:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b086      	sub	sp, #24
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	460b      	mov	r3, r1
 8006760:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800676a:	2300      	movs	r3, #0
 800676c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	885b      	ldrh	r3, [r3, #2]
 8006772:	b29a      	uxth	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	429a      	cmp	r2, r3
 800677c:	d920      	bls.n	80067c0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	b29b      	uxth	r3, r3
 8006784:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006786:	e013      	b.n	80067b0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006788:	f107 030a 	add.w	r3, r7, #10
 800678c:	4619      	mov	r1, r3
 800678e:	6978      	ldr	r0, [r7, #20]
 8006790:	f000 f81b 	bl	80067ca <USBD_GetNextDesc>
 8006794:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	785b      	ldrb	r3, [r3, #1]
 800679a:	2b05      	cmp	r3, #5
 800679c:	d108      	bne.n	80067b0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	789b      	ldrb	r3, [r3, #2]
 80067a6:	78fa      	ldrb	r2, [r7, #3]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d008      	beq.n	80067be <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80067ac:	2300      	movs	r3, #0
 80067ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	885b      	ldrh	r3, [r3, #2]
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	897b      	ldrh	r3, [r7, #10]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d8e5      	bhi.n	8006788 <USBD_GetEpDesc+0x32>
 80067bc:	e000      	b.n	80067c0 <USBD_GetEpDesc+0x6a>
          break;
 80067be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80067c0:	693b      	ldr	r3, [r7, #16]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	881a      	ldrh	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	4413      	add	r3, r2
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4413      	add	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80067f6:	68fb      	ldr	r3, [r7, #12]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006804:	b480      	push	{r7}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	3301      	adds	r3, #1
 800681a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006822:	8a3b      	ldrh	r3, [r7, #16]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	b21a      	sxth	r2, r3
 8006828:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800682c:	4313      	orrs	r3, r2
 800682e:	b21b      	sxth	r3, r3
 8006830:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006832:	89fb      	ldrh	r3, [r7, #14]
}
 8006834:	4618      	mov	r0, r3
 8006836:	371c      	adds	r7, #28
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006856:	2b40      	cmp	r3, #64	; 0x40
 8006858:	d005      	beq.n	8006866 <USBD_StdDevReq+0x26>
 800685a:	2b40      	cmp	r3, #64	; 0x40
 800685c:	d857      	bhi.n	800690e <USBD_StdDevReq+0xce>
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00f      	beq.n	8006882 <USBD_StdDevReq+0x42>
 8006862:	2b20      	cmp	r3, #32
 8006864:	d153      	bne.n	800690e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	32ae      	adds	r2, #174	; 0xae
 8006870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	4798      	blx	r3
 800687c:	4603      	mov	r3, r0
 800687e:	73fb      	strb	r3, [r7, #15]
      break;
 8006880:	e04a      	b.n	8006918 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	785b      	ldrb	r3, [r3, #1]
 8006886:	2b09      	cmp	r3, #9
 8006888:	d83b      	bhi.n	8006902 <USBD_StdDevReq+0xc2>
 800688a:	a201      	add	r2, pc, #4	; (adr r2, 8006890 <USBD_StdDevReq+0x50>)
 800688c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006890:	080068e5 	.word	0x080068e5
 8006894:	080068f9 	.word	0x080068f9
 8006898:	08006903 	.word	0x08006903
 800689c:	080068ef 	.word	0x080068ef
 80068a0:	08006903 	.word	0x08006903
 80068a4:	080068c3 	.word	0x080068c3
 80068a8:	080068b9 	.word	0x080068b9
 80068ac:	08006903 	.word	0x08006903
 80068b0:	080068db 	.word	0x080068db
 80068b4:	080068cd 	.word	0x080068cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fa3c 	bl	8006d38 <USBD_GetDescriptor>
          break;
 80068c0:	e024      	b.n	800690c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fba1 	bl	800700c <USBD_SetAddress>
          break;
 80068ca:	e01f      	b.n	800690c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fbe0 	bl	8007094 <USBD_SetConfig>
 80068d4:	4603      	mov	r3, r0
 80068d6:	73fb      	strb	r3, [r7, #15]
          break;
 80068d8:	e018      	b.n	800690c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fc83 	bl	80071e8 <USBD_GetConfig>
          break;
 80068e2:	e013      	b.n	800690c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fcb4 	bl	8007254 <USBD_GetStatus>
          break;
 80068ec:	e00e      	b.n	800690c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fce3 	bl	80072bc <USBD_SetFeature>
          break;
 80068f6:	e009      	b.n	800690c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80068f8:	6839      	ldr	r1, [r7, #0]
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fd07 	bl	800730e <USBD_ClrFeature>
          break;
 8006900:	e004      	b.n	800690c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fd5e 	bl	80073c6 <USBD_CtlError>
          break;
 800690a:	bf00      	nop
      }
      break;
 800690c:	e004      	b.n	8006918 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fd58 	bl	80073c6 <USBD_CtlError>
      break;
 8006916:	bf00      	nop
  }

  return ret;
 8006918:	7bfb      	ldrb	r3, [r7, #15]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop

08006924 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800693a:	2b40      	cmp	r3, #64	; 0x40
 800693c:	d005      	beq.n	800694a <USBD_StdItfReq+0x26>
 800693e:	2b40      	cmp	r3, #64	; 0x40
 8006940:	d852      	bhi.n	80069e8 <USBD_StdItfReq+0xc4>
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <USBD_StdItfReq+0x26>
 8006946:	2b20      	cmp	r3, #32
 8006948:	d14e      	bne.n	80069e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006950:	b2db      	uxtb	r3, r3
 8006952:	3b01      	subs	r3, #1
 8006954:	2b02      	cmp	r3, #2
 8006956:	d840      	bhi.n	80069da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	889b      	ldrh	r3, [r3, #4]
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b01      	cmp	r3, #1
 8006960:	d836      	bhi.n	80069d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	889b      	ldrh	r3, [r3, #4]
 8006966:	b2db      	uxtb	r3, r3
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff fed9 	bl	8006722 <USBD_CoreFindIF>
 8006970:	4603      	mov	r3, r0
 8006972:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006974:	7bbb      	ldrb	r3, [r7, #14]
 8006976:	2bff      	cmp	r3, #255	; 0xff
 8006978:	d01d      	beq.n	80069b6 <USBD_StdItfReq+0x92>
 800697a:	7bbb      	ldrb	r3, [r7, #14]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d11a      	bne.n	80069b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006980:	7bba      	ldrb	r2, [r7, #14]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	32ae      	adds	r2, #174	; 0xae
 8006986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00f      	beq.n	80069b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006990:	7bba      	ldrb	r2, [r7, #14]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006998:	7bba      	ldrb	r2, [r7, #14]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	32ae      	adds	r2, #174	; 0xae
 800699e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4798      	blx	r3
 80069aa:	4603      	mov	r3, r0
 80069ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80069ae:	e004      	b.n	80069ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80069b0:	2303      	movs	r3, #3
 80069b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80069b4:	e001      	b.n	80069ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80069b6:	2303      	movs	r3, #3
 80069b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	88db      	ldrh	r3, [r3, #6]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d110      	bne.n	80069e4 <USBD_StdItfReq+0xc0>
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10d      	bne.n	80069e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fdc7 	bl	800755c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80069ce:	e009      	b.n	80069e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fcf7 	bl	80073c6 <USBD_CtlError>
          break;
 80069d8:	e004      	b.n	80069e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fcf2 	bl	80073c6 <USBD_CtlError>
          break;
 80069e2:	e000      	b.n	80069e6 <USBD_StdItfReq+0xc2>
          break;
 80069e4:	bf00      	nop
      }
      break;
 80069e6:	e004      	b.n	80069f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fceb 	bl	80073c6 <USBD_CtlError>
      break;
 80069f0:	bf00      	nop
  }

  return ret;
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	889b      	ldrh	r3, [r3, #4]
 8006a0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a18:	2b40      	cmp	r3, #64	; 0x40
 8006a1a:	d007      	beq.n	8006a2c <USBD_StdEPReq+0x30>
 8006a1c:	2b40      	cmp	r3, #64	; 0x40
 8006a1e:	f200 817f 	bhi.w	8006d20 <USBD_StdEPReq+0x324>
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d02a      	beq.n	8006a7c <USBD_StdEPReq+0x80>
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	f040 817a 	bne.w	8006d20 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a2c:	7bbb      	ldrb	r3, [r7, #14]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff fe83 	bl	800673c <USBD_CoreFindEP>
 8006a36:	4603      	mov	r3, r0
 8006a38:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a3a:	7b7b      	ldrb	r3, [r7, #13]
 8006a3c:	2bff      	cmp	r3, #255	; 0xff
 8006a3e:	f000 8174 	beq.w	8006d2a <USBD_StdEPReq+0x32e>
 8006a42:	7b7b      	ldrb	r3, [r7, #13]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f040 8170 	bne.w	8006d2a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006a4a:	7b7a      	ldrb	r2, [r7, #13]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006a52:	7b7a      	ldrb	r2, [r7, #13]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	32ae      	adds	r2, #174	; 0xae
 8006a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 8163 	beq.w	8006d2a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006a64:	7b7a      	ldrb	r2, [r7, #13]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	32ae      	adds	r2, #174	; 0xae
 8006a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	4798      	blx	r3
 8006a76:	4603      	mov	r3, r0
 8006a78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a7a:	e156      	b.n	8006d2a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	785b      	ldrb	r3, [r3, #1]
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d008      	beq.n	8006a96 <USBD_StdEPReq+0x9a>
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	f300 8145 	bgt.w	8006d14 <USBD_StdEPReq+0x318>
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 809b 	beq.w	8006bc6 <USBD_StdEPReq+0x1ca>
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d03c      	beq.n	8006b0e <USBD_StdEPReq+0x112>
 8006a94:	e13e      	b.n	8006d14 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d002      	beq.n	8006aa8 <USBD_StdEPReq+0xac>
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	d016      	beq.n	8006ad4 <USBD_StdEPReq+0xd8>
 8006aa6:	e02c      	b.n	8006b02 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00d      	beq.n	8006aca <USBD_StdEPReq+0xce>
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
 8006ab0:	2b80      	cmp	r3, #128	; 0x80
 8006ab2:	d00a      	beq.n	8006aca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 f95b 	bl	8007d74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006abe:	2180      	movs	r1, #128	; 0x80
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f001 f957 	bl	8007d74 <USBD_LL_StallEP>
 8006ac6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ac8:	e020      	b.n	8006b0c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fc7a 	bl	80073c6 <USBD_CtlError>
              break;
 8006ad2:	e01b      	b.n	8006b0c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	885b      	ldrh	r3, [r3, #2]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10e      	bne.n	8006afa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006adc:	7bbb      	ldrb	r3, [r7, #14]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00b      	beq.n	8006afa <USBD_StdEPReq+0xfe>
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	2b80      	cmp	r3, #128	; 0x80
 8006ae6:	d008      	beq.n	8006afa <USBD_StdEPReq+0xfe>
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	88db      	ldrh	r3, [r3, #6]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d104      	bne.n	8006afa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006af0:	7bbb      	ldrb	r3, [r7, #14]
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 f93d 	bl	8007d74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fd2e 	bl	800755c <USBD_CtlSendStatus>

              break;
 8006b00:	e004      	b.n	8006b0c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fc5e 	bl	80073c6 <USBD_CtlError>
              break;
 8006b0a:	bf00      	nop
          }
          break;
 8006b0c:	e107      	b.n	8006d1e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d002      	beq.n	8006b20 <USBD_StdEPReq+0x124>
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d016      	beq.n	8006b4c <USBD_StdEPReq+0x150>
 8006b1e:	e04b      	b.n	8006bb8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b20:	7bbb      	ldrb	r3, [r7, #14]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00d      	beq.n	8006b42 <USBD_StdEPReq+0x146>
 8006b26:	7bbb      	ldrb	r3, [r7, #14]
 8006b28:	2b80      	cmp	r3, #128	; 0x80
 8006b2a:	d00a      	beq.n	8006b42 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b2c:	7bbb      	ldrb	r3, [r7, #14]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 f91f 	bl	8007d74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b36:	2180      	movs	r1, #128	; 0x80
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f001 f91b 	bl	8007d74 <USBD_LL_StallEP>
 8006b3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b40:	e040      	b.n	8006bc4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fc3e 	bl	80073c6 <USBD_CtlError>
              break;
 8006b4a:	e03b      	b.n	8006bc4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	885b      	ldrh	r3, [r3, #2]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d136      	bne.n	8006bc2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b54:	7bbb      	ldrb	r3, [r7, #14]
 8006b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d004      	beq.n	8006b68 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 f925 	bl	8007db2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fcf7 	bl	800755c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b6e:	7bbb      	ldrb	r3, [r7, #14]
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7ff fde2 	bl	800673c <USBD_CoreFindEP>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b7c:	7b7b      	ldrb	r3, [r7, #13]
 8006b7e:	2bff      	cmp	r3, #255	; 0xff
 8006b80:	d01f      	beq.n	8006bc2 <USBD_StdEPReq+0x1c6>
 8006b82:	7b7b      	ldrb	r3, [r7, #13]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d11c      	bne.n	8006bc2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006b88:	7b7a      	ldrb	r2, [r7, #13]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006b90:	7b7a      	ldrb	r2, [r7, #13]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	32ae      	adds	r2, #174	; 0xae
 8006b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d010      	beq.n	8006bc2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006ba0:	7b7a      	ldrb	r2, [r7, #13]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	32ae      	adds	r2, #174	; 0xae
 8006ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	4798      	blx	r3
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006bb6:	e004      	b.n	8006bc2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006bb8:	6839      	ldr	r1, [r7, #0]
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fc03 	bl	80073c6 <USBD_CtlError>
              break;
 8006bc0:	e000      	b.n	8006bc4 <USBD_StdEPReq+0x1c8>
              break;
 8006bc2:	bf00      	nop
          }
          break;
 8006bc4:	e0ab      	b.n	8006d1e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d002      	beq.n	8006bd8 <USBD_StdEPReq+0x1dc>
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d032      	beq.n	8006c3c <USBD_StdEPReq+0x240>
 8006bd6:	e097      	b.n	8006d08 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bd8:	7bbb      	ldrb	r3, [r7, #14]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d007      	beq.n	8006bee <USBD_StdEPReq+0x1f2>
 8006bde:	7bbb      	ldrb	r3, [r7, #14]
 8006be0:	2b80      	cmp	r3, #128	; 0x80
 8006be2:	d004      	beq.n	8006bee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fbed 	bl	80073c6 <USBD_CtlError>
                break;
 8006bec:	e091      	b.n	8006d12 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	da0b      	bge.n	8006c0e <USBD_StdEPReq+0x212>
 8006bf6:	7bbb      	ldrb	r3, [r7, #14]
 8006bf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	3310      	adds	r3, #16
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	4413      	add	r3, r2
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	e00b      	b.n	8006c26 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	4413      	add	r3, r2
 8006c24:	3304      	adds	r3, #4
 8006c26:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2202      	movs	r2, #2
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fc37 	bl	80074a8 <USBD_CtlSendData>
              break;
 8006c3a:	e06a      	b.n	8006d12 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	da11      	bge.n	8006c68 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
 8006c46:	f003 020f 	and.w	r2, r3, #15
 8006c4a:	6879      	ldr	r1, [r7, #4]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	440b      	add	r3, r1
 8006c56:	3324      	adds	r3, #36	; 0x24
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d117      	bne.n	8006c8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fbb0 	bl	80073c6 <USBD_CtlError>
                  break;
 8006c66:	e054      	b.n	8006d12 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	f003 020f 	and.w	r2, r3, #15
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	440b      	add	r3, r1
 8006c7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d104      	bne.n	8006c8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fb9d 	bl	80073c6 <USBD_CtlError>
                  break;
 8006c8c:	e041      	b.n	8006d12 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	da0b      	bge.n	8006cae <USBD_StdEPReq+0x2b2>
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	3310      	adds	r3, #16
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	4413      	add	r3, r2
 8006caa:	3304      	adds	r3, #4
 8006cac:	e00b      	b.n	8006cc6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cae:	7bbb      	ldrb	r3, [r7, #14]
 8006cb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <USBD_StdEPReq+0x2d8>
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
 8006cd0:	2b80      	cmp	r3, #128	; 0x80
 8006cd2:	d103      	bne.n	8006cdc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	e00e      	b.n	8006cfa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 f885 	bl	8007df0 <USBD_LL_IsStallEP>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	e002      	b.n	8006cfa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fbd1 	bl	80074a8 <USBD_CtlSendData>
              break;
 8006d06:	e004      	b.n	8006d12 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fb5b 	bl	80073c6 <USBD_CtlError>
              break;
 8006d10:	bf00      	nop
          }
          break;
 8006d12:	e004      	b.n	8006d1e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fb55 	bl	80073c6 <USBD_CtlError>
          break;
 8006d1c:	bf00      	nop
      }
      break;
 8006d1e:	e005      	b.n	8006d2c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fb4f 	bl	80073c6 <USBD_CtlError>
      break;
 8006d28:	e000      	b.n	8006d2c <USBD_StdEPReq+0x330>
      break;
 8006d2a:	bf00      	nop
  }

  return ret;
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
	...

08006d38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	885b      	ldrh	r3, [r3, #2]
 8006d52:	0a1b      	lsrs	r3, r3, #8
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	2b06      	cmp	r3, #6
 8006d5a:	f200 8128 	bhi.w	8006fae <USBD_GetDescriptor+0x276>
 8006d5e:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <USBD_GetDescriptor+0x2c>)
 8006d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d64:	08006d81 	.word	0x08006d81
 8006d68:	08006d99 	.word	0x08006d99
 8006d6c:	08006dd9 	.word	0x08006dd9
 8006d70:	08006faf 	.word	0x08006faf
 8006d74:	08006faf 	.word	0x08006faf
 8006d78:	08006f4f 	.word	0x08006f4f
 8006d7c:	08006f7b 	.word	0x08006f7b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	7c12      	ldrb	r2, [r2, #16]
 8006d8c:	f107 0108 	add.w	r1, r7, #8
 8006d90:	4610      	mov	r0, r2
 8006d92:	4798      	blx	r3
 8006d94:	60f8      	str	r0, [r7, #12]
      break;
 8006d96:	e112      	b.n	8006fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	7c1b      	ldrb	r3, [r3, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10d      	bne.n	8006dbc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da8:	f107 0208 	add.w	r2, r7, #8
 8006dac:	4610      	mov	r0, r2
 8006dae:	4798      	blx	r3
 8006db0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3301      	adds	r3, #1
 8006db6:	2202      	movs	r2, #2
 8006db8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006dba:	e100      	b.n	8006fbe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	f107 0208 	add.w	r2, r7, #8
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4798      	blx	r3
 8006dcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	701a      	strb	r2, [r3, #0]
      break;
 8006dd6:	e0f2      	b.n	8006fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	885b      	ldrh	r3, [r3, #2]
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b05      	cmp	r3, #5
 8006de0:	f200 80ac 	bhi.w	8006f3c <USBD_GetDescriptor+0x204>
 8006de4:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <USBD_GetDescriptor+0xb4>)
 8006de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dea:	bf00      	nop
 8006dec:	08006e05 	.word	0x08006e05
 8006df0:	08006e39 	.word	0x08006e39
 8006df4:	08006e6d 	.word	0x08006e6d
 8006df8:	08006ea1 	.word	0x08006ea1
 8006dfc:	08006ed5 	.word	0x08006ed5
 8006e00:	08006f09 	.word	0x08006f09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00b      	beq.n	8006e28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	7c12      	ldrb	r2, [r2, #16]
 8006e1c:	f107 0108 	add.w	r1, r7, #8
 8006e20:	4610      	mov	r0, r2
 8006e22:	4798      	blx	r3
 8006e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e26:	e091      	b.n	8006f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 facb 	bl	80073c6 <USBD_CtlError>
            err++;
 8006e30:	7afb      	ldrb	r3, [r7, #11]
 8006e32:	3301      	adds	r3, #1
 8006e34:	72fb      	strb	r3, [r7, #11]
          break;
 8006e36:	e089      	b.n	8006f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00b      	beq.n	8006e5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	7c12      	ldrb	r2, [r2, #16]
 8006e50:	f107 0108 	add.w	r1, r7, #8
 8006e54:	4610      	mov	r0, r2
 8006e56:	4798      	blx	r3
 8006e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e5a:	e077      	b.n	8006f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fab1 	bl	80073c6 <USBD_CtlError>
            err++;
 8006e64:	7afb      	ldrb	r3, [r7, #11]
 8006e66:	3301      	adds	r3, #1
 8006e68:	72fb      	strb	r3, [r7, #11]
          break;
 8006e6a:	e06f      	b.n	8006f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00b      	beq.n	8006e90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	7c12      	ldrb	r2, [r2, #16]
 8006e84:	f107 0108 	add.w	r1, r7, #8
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4798      	blx	r3
 8006e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e8e:	e05d      	b.n	8006f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fa97 	bl	80073c6 <USBD_CtlError>
            err++;
 8006e98:	7afb      	ldrb	r3, [r7, #11]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e9e:	e055      	b.n	8006f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00b      	beq.n	8006ec4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	7c12      	ldrb	r2, [r2, #16]
 8006eb8:	f107 0108 	add.w	r1, r7, #8
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	4798      	blx	r3
 8006ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ec2:	e043      	b.n	8006f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fa7d 	bl	80073c6 <USBD_CtlError>
            err++;
 8006ecc:	7afb      	ldrb	r3, [r7, #11]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ed2:	e03b      	b.n	8006f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00b      	beq.n	8006ef8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	7c12      	ldrb	r2, [r2, #16]
 8006eec:	f107 0108 	add.w	r1, r7, #8
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4798      	blx	r3
 8006ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ef6:	e029      	b.n	8006f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fa63 	bl	80073c6 <USBD_CtlError>
            err++;
 8006f00:	7afb      	ldrb	r3, [r7, #11]
 8006f02:	3301      	adds	r3, #1
 8006f04:	72fb      	strb	r3, [r7, #11]
          break;
 8006f06:	e021      	b.n	8006f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00b      	beq.n	8006f2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	7c12      	ldrb	r2, [r2, #16]
 8006f20:	f107 0108 	add.w	r1, r7, #8
 8006f24:	4610      	mov	r0, r2
 8006f26:	4798      	blx	r3
 8006f28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f2a:	e00f      	b.n	8006f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f2c:	6839      	ldr	r1, [r7, #0]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fa49 	bl	80073c6 <USBD_CtlError>
            err++;
 8006f34:	7afb      	ldrb	r3, [r7, #11]
 8006f36:	3301      	adds	r3, #1
 8006f38:	72fb      	strb	r3, [r7, #11]
          break;
 8006f3a:	e007      	b.n	8006f4c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fa41 	bl	80073c6 <USBD_CtlError>
          err++;
 8006f44:	7afb      	ldrb	r3, [r7, #11]
 8006f46:	3301      	adds	r3, #1
 8006f48:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006f4a:	bf00      	nop
      }
      break;
 8006f4c:	e037      	b.n	8006fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	7c1b      	ldrb	r3, [r3, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d109      	bne.n	8006f6a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5e:	f107 0208 	add.w	r2, r7, #8
 8006f62:	4610      	mov	r0, r2
 8006f64:	4798      	blx	r3
 8006f66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f68:	e029      	b.n	8006fbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fa2a 	bl	80073c6 <USBD_CtlError>
        err++;
 8006f72:	7afb      	ldrb	r3, [r7, #11]
 8006f74:	3301      	adds	r3, #1
 8006f76:	72fb      	strb	r3, [r7, #11]
      break;
 8006f78:	e021      	b.n	8006fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	7c1b      	ldrb	r3, [r3, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10d      	bne.n	8006f9e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8a:	f107 0208 	add.w	r2, r7, #8
 8006f8e:	4610      	mov	r0, r2
 8006f90:	4798      	blx	r3
 8006f92:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3301      	adds	r3, #1
 8006f98:	2207      	movs	r2, #7
 8006f9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f9c:	e00f      	b.n	8006fbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fa10 	bl	80073c6 <USBD_CtlError>
        err++;
 8006fa6:	7afb      	ldrb	r3, [r7, #11]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	72fb      	strb	r3, [r7, #11]
      break;
 8006fac:	e007      	b.n	8006fbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fa08 	bl	80073c6 <USBD_CtlError>
      err++;
 8006fb6:	7afb      	ldrb	r3, [r7, #11]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	72fb      	strb	r3, [r7, #11]
      break;
 8006fbc:	bf00      	nop
  }

  if (err != 0U)
 8006fbe:	7afb      	ldrb	r3, [r7, #11]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d11e      	bne.n	8007002 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	88db      	ldrh	r3, [r3, #6]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d016      	beq.n	8006ffa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006fcc:	893b      	ldrh	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00e      	beq.n	8006ff0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	88da      	ldrh	r2, [r3, #6]
 8006fd6:	893b      	ldrh	r3, [r7, #8]
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	bf28      	it	cs
 8006fdc:	4613      	movcs	r3, r2
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fe2:	893b      	ldrh	r3, [r7, #8]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	68f9      	ldr	r1, [r7, #12]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fa5d 	bl	80074a8 <USBD_CtlSendData>
 8006fee:	e009      	b.n	8007004 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f9e7 	bl	80073c6 <USBD_CtlError>
 8006ff8:	e004      	b.n	8007004 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 faae 	bl	800755c <USBD_CtlSendStatus>
 8007000:	e000      	b.n	8007004 <USBD_GetDescriptor+0x2cc>
    return;
 8007002:	bf00      	nop
  }
}
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop

0800700c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	889b      	ldrh	r3, [r3, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d131      	bne.n	8007082 <USBD_SetAddress+0x76>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	88db      	ldrh	r3, [r3, #6]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d12d      	bne.n	8007082 <USBD_SetAddress+0x76>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	885b      	ldrh	r3, [r3, #2]
 800702a:	2b7f      	cmp	r3, #127	; 0x7f
 800702c:	d829      	bhi.n	8007082 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	885b      	ldrh	r3, [r3, #2]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007038:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b03      	cmp	r3, #3
 8007044:	d104      	bne.n	8007050 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f9bc 	bl	80073c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800704e:	e01d      	b.n	800708c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	7bfa      	ldrb	r2, [r7, #15]
 8007054:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fef3 	bl	8007e48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fa7a 	bl	800755c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d004      	beq.n	8007078 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2202      	movs	r2, #2
 8007072:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007076:	e009      	b.n	800708c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007080:	e004      	b.n	800708c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f99e 	bl	80073c6 <USBD_CtlError>
  }
}
 800708a:	bf00      	nop
 800708c:	bf00      	nop
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	885b      	ldrh	r3, [r3, #2]
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	4b4e      	ldr	r3, [pc, #312]	; (80071e4 <USBD_SetConfig+0x150>)
 80070aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80070ac:	4b4d      	ldr	r3, [pc, #308]	; (80071e4 <USBD_SetConfig+0x150>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d905      	bls.n	80070c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f985 	bl	80073c6 <USBD_CtlError>
    return USBD_FAIL;
 80070bc:	2303      	movs	r3, #3
 80070be:	e08c      	b.n	80071da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d002      	beq.n	80070d2 <USBD_SetConfig+0x3e>
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d029      	beq.n	8007124 <USBD_SetConfig+0x90>
 80070d0:	e075      	b.n	80071be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80070d2:	4b44      	ldr	r3, [pc, #272]	; (80071e4 <USBD_SetConfig+0x150>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d020      	beq.n	800711c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80070da:	4b42      	ldr	r3, [pc, #264]	; (80071e4 <USBD_SetConfig+0x150>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070e4:	4b3f      	ldr	r3, [pc, #252]	; (80071e4 <USBD_SetConfig+0x150>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fe ffe7 	bl	80060be <USBD_SetClassConfig>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d008      	beq.n	800710c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f962 	bl	80073c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2202      	movs	r2, #2
 8007106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800710a:	e065      	b.n	80071d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fa25 	bl	800755c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2203      	movs	r2, #3
 8007116:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800711a:	e05d      	b.n	80071d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fa1d 	bl	800755c <USBD_CtlSendStatus>
      break;
 8007122:	e059      	b.n	80071d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007124:	4b2f      	ldr	r3, [pc, #188]	; (80071e4 <USBD_SetConfig+0x150>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d112      	bne.n	8007152 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007134:	4b2b      	ldr	r3, [pc, #172]	; (80071e4 <USBD_SetConfig+0x150>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800713e:	4b29      	ldr	r3, [pc, #164]	; (80071e4 <USBD_SetConfig+0x150>)
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7fe ffd6 	bl	80060f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fa06 	bl	800755c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007150:	e042      	b.n	80071d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007152:	4b24      	ldr	r3, [pc, #144]	; (80071e4 <USBD_SetConfig+0x150>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	429a      	cmp	r2, r3
 800715e:	d02a      	beq.n	80071b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7fe ffc4 	bl	80060f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800716e:	4b1d      	ldr	r3, [pc, #116]	; (80071e4 <USBD_SetConfig+0x150>)
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007178:	4b1a      	ldr	r3, [pc, #104]	; (80071e4 <USBD_SetConfig+0x150>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	4619      	mov	r1, r3
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fe ff9d 	bl	80060be <USBD_SetClassConfig>
 8007184:	4603      	mov	r3, r0
 8007186:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00f      	beq.n	80071ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f918 	bl	80073c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	b2db      	uxtb	r3, r3
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fe ffa9 	bl	80060f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80071ac:	e014      	b.n	80071d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f9d4 	bl	800755c <USBD_CtlSendStatus>
      break;
 80071b4:	e010      	b.n	80071d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f9d0 	bl	800755c <USBD_CtlSendStatus>
      break;
 80071bc:	e00c      	b.n	80071d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f900 	bl	80073c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071c6:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <USBD_SetConfig+0x150>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7fe ff92 	bl	80060f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80071d2:	2303      	movs	r3, #3
 80071d4:	73fb      	strb	r3, [r7, #15]
      break;
 80071d6:	bf00      	nop
  }

  return ret;
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	20000348 	.word	0x20000348

080071e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	88db      	ldrh	r3, [r3, #6]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d004      	beq.n	8007204 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f8e2 	bl	80073c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007202:	e023      	b.n	800724c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	dc02      	bgt.n	8007216 <USBD_GetConfig+0x2e>
 8007210:	2b00      	cmp	r3, #0
 8007212:	dc03      	bgt.n	800721c <USBD_GetConfig+0x34>
 8007214:	e015      	b.n	8007242 <USBD_GetConfig+0x5a>
 8007216:	2b03      	cmp	r3, #3
 8007218:	d00b      	beq.n	8007232 <USBD_GetConfig+0x4a>
 800721a:	e012      	b.n	8007242 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3308      	adds	r3, #8
 8007226:	2201      	movs	r2, #1
 8007228:	4619      	mov	r1, r3
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f93c 	bl	80074a8 <USBD_CtlSendData>
        break;
 8007230:	e00c      	b.n	800724c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	3304      	adds	r3, #4
 8007236:	2201      	movs	r2, #1
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f934 	bl	80074a8 <USBD_CtlSendData>
        break;
 8007240:	e004      	b.n	800724c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f8be 	bl	80073c6 <USBD_CtlError>
        break;
 800724a:	bf00      	nop
}
 800724c:	bf00      	nop
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007264:	b2db      	uxtb	r3, r3
 8007266:	3b01      	subs	r3, #1
 8007268:	2b02      	cmp	r3, #2
 800726a:	d81e      	bhi.n	80072aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	88db      	ldrh	r3, [r3, #6]
 8007270:	2b02      	cmp	r3, #2
 8007272:	d004      	beq.n	800727e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f8a5 	bl	80073c6 <USBD_CtlError>
        break;
 800727c:	e01a      	b.n	80072b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800728a:	2b00      	cmp	r3, #0
 800728c:	d005      	beq.n	800729a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	f043 0202 	orr.w	r2, r3, #2
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	330c      	adds	r3, #12
 800729e:	2202      	movs	r2, #2
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f900 	bl	80074a8 <USBD_CtlSendData>
      break;
 80072a8:	e004      	b.n	80072b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f88a 	bl	80073c6 <USBD_CtlError>
      break;
 80072b2:	bf00      	nop
  }
}
 80072b4:	bf00      	nop
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	885b      	ldrh	r3, [r3, #2]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d107      	bne.n	80072de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f940 	bl	800755c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80072dc:	e013      	b.n	8007306 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	885b      	ldrh	r3, [r3, #2]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d10b      	bne.n	80072fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	889b      	ldrh	r3, [r3, #4]
 80072ea:	0a1b      	lsrs	r3, r3, #8
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f930 	bl	800755c <USBD_CtlSendStatus>
}
 80072fc:	e003      	b.n	8007306 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f860 	bl	80073c6 <USBD_CtlError>
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731e:	b2db      	uxtb	r3, r3
 8007320:	3b01      	subs	r3, #1
 8007322:	2b02      	cmp	r3, #2
 8007324:	d80b      	bhi.n	800733e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	885b      	ldrh	r3, [r3, #2]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d10c      	bne.n	8007348 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f910 	bl	800755c <USBD_CtlSendStatus>
      }
      break;
 800733c:	e004      	b.n	8007348 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f840 	bl	80073c6 <USBD_CtlError>
      break;
 8007346:	e000      	b.n	800734a <USBD_ClrFeature+0x3c>
      break;
 8007348:	bf00      	nop
  }
}
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	781a      	ldrb	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3301      	adds	r3, #1
 800736c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	781a      	ldrb	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3301      	adds	r3, #1
 800737a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f7ff fa41 	bl	8006804 <SWAPBYTE>
 8007382:	4603      	mov	r3, r0
 8007384:	461a      	mov	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	3301      	adds	r3, #1
 800738e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3301      	adds	r3, #1
 8007394:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f7ff fa34 	bl	8006804 <SWAPBYTE>
 800739c:	4603      	mov	r3, r0
 800739e:	461a      	mov	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	3301      	adds	r3, #1
 80073a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3301      	adds	r3, #1
 80073ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f7ff fa27 	bl	8006804 <SWAPBYTE>
 80073b6:	4603      	mov	r3, r0
 80073b8:	461a      	mov	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	80da      	strh	r2, [r3, #6]
}
 80073be:	bf00      	nop
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80073d0:	2180      	movs	r1, #128	; 0x80
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fcce 	bl	8007d74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80073d8:	2100      	movs	r1, #0
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fcca 	bl	8007d74 <USBD_LL_StallEP>
}
 80073e0:	bf00      	nop
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d036      	beq.n	800746c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007402:	6938      	ldr	r0, [r7, #16]
 8007404:	f000 f836 	bl	8007474 <USBD_GetLen>
 8007408:	4603      	mov	r3, r0
 800740a:	3301      	adds	r3, #1
 800740c:	b29b      	uxth	r3, r3
 800740e:	005b      	lsls	r3, r3, #1
 8007410:	b29a      	uxth	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	4413      	add	r3, r2
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	7812      	ldrb	r2, [r2, #0]
 8007420:	701a      	strb	r2, [r3, #0]
  idx++;
 8007422:	7dfb      	ldrb	r3, [r7, #23]
 8007424:	3301      	adds	r3, #1
 8007426:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	4413      	add	r3, r2
 800742e:	2203      	movs	r2, #3
 8007430:	701a      	strb	r2, [r3, #0]
  idx++;
 8007432:	7dfb      	ldrb	r3, [r7, #23]
 8007434:	3301      	adds	r3, #1
 8007436:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007438:	e013      	b.n	8007462 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800743a:	7dfb      	ldrb	r3, [r7, #23]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	4413      	add	r3, r2
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	7812      	ldrb	r2, [r2, #0]
 8007444:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	3301      	adds	r3, #1
 800744a:	613b      	str	r3, [r7, #16]
    idx++;
 800744c:	7dfb      	ldrb	r3, [r7, #23]
 800744e:	3301      	adds	r3, #1
 8007450:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007452:	7dfb      	ldrb	r3, [r7, #23]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	4413      	add	r3, r2
 8007458:	2200      	movs	r2, #0
 800745a:	701a      	strb	r2, [r3, #0]
    idx++;
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	3301      	adds	r3, #1
 8007460:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e7      	bne.n	800743a <USBD_GetString+0x52>
 800746a:	e000      	b.n	800746e <USBD_GetString+0x86>
    return;
 800746c:	bf00      	nop
  }
}
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007484:	e005      	b.n	8007492 <USBD_GetLen+0x1e>
  {
    len++;
 8007486:	7bfb      	ldrb	r3, [r7, #15]
 8007488:	3301      	adds	r3, #1
 800748a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	3301      	adds	r3, #1
 8007490:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1f5      	bne.n	8007486 <USBD_GetLen+0x12>
  }

  return len;
 800749a:	7bfb      	ldrb	r3, [r7, #15]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2202      	movs	r2, #2
 80074b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	2100      	movs	r1, #0
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 fcd9 	bl	8007e86 <USBD_LL_Transmit>

  return USBD_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b084      	sub	sp, #16
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	2100      	movs	r1, #0
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f000 fcc8 	bl	8007e86 <USBD_LL_Transmit>

  return USBD_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2203      	movs	r2, #3
 8007510:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	2100      	movs	r1, #0
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f000 fccc 	bl	8007ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	2100      	movs	r1, #0
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 fcbb 	bl	8007ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2204      	movs	r2, #4
 8007568:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800756c:	2300      	movs	r3, #0
 800756e:	2200      	movs	r2, #0
 8007570:	2100      	movs	r1, #0
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fc87 	bl	8007e86 <USBD_LL_Transmit>

  return USBD_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2205      	movs	r2, #5
 800758e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007592:	2300      	movs	r3, #0
 8007594:	2200      	movs	r2, #0
 8007596:	2100      	movs	r1, #0
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fc95 	bl	8007ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075ac:	2200      	movs	r2, #0
 80075ae:	4912      	ldr	r1, [pc, #72]	; (80075f8 <MX_USB_DEVICE_Init+0x50>)
 80075b0:	4812      	ldr	r0, [pc, #72]	; (80075fc <MX_USB_DEVICE_Init+0x54>)
 80075b2:	f7fe fd07 	bl	8005fc4 <USBD_Init>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80075bc:	f7f9 fdec 	bl	8001198 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80075c0:	490f      	ldr	r1, [pc, #60]	; (8007600 <MX_USB_DEVICE_Init+0x58>)
 80075c2:	480e      	ldr	r0, [pc, #56]	; (80075fc <MX_USB_DEVICE_Init+0x54>)
 80075c4:	f7fe fd2e 	bl	8006024 <USBD_RegisterClass>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80075ce:	f7f9 fde3 	bl	8001198 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80075d2:	490c      	ldr	r1, [pc, #48]	; (8007604 <MX_USB_DEVICE_Init+0x5c>)
 80075d4:	4809      	ldr	r0, [pc, #36]	; (80075fc <MX_USB_DEVICE_Init+0x54>)
 80075d6:	f7fe fc65 	bl	8005ea4 <USBD_CDC_RegisterInterface>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80075e0:	f7f9 fdda 	bl	8001198 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80075e4:	4805      	ldr	r0, [pc, #20]	; (80075fc <MX_USB_DEVICE_Init+0x54>)
 80075e6:	f7fe fd53 	bl	8006090 <USBD_Start>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80075f0:	f7f9 fdd2 	bl	8001198 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80075f4:	bf00      	nop
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	200000b4 	.word	0x200000b4
 80075fc:	2000034c 	.word	0x2000034c
 8007600:	20000018 	.word	0x20000018
 8007604:	200000a0 	.word	0x200000a0

08007608 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800760c:	2200      	movs	r2, #0
 800760e:	4905      	ldr	r1, [pc, #20]	; (8007624 <CDC_Init_FS+0x1c>)
 8007610:	4805      	ldr	r0, [pc, #20]	; (8007628 <CDC_Init_FS+0x20>)
 8007612:	f7fe fc61 	bl	8005ed8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007616:	4905      	ldr	r1, [pc, #20]	; (800762c <CDC_Init_FS+0x24>)
 8007618:	4803      	ldr	r0, [pc, #12]	; (8007628 <CDC_Init_FS+0x20>)
 800761a:	f7fe fc7f 	bl	8005f1c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800761e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007620:	4618      	mov	r0, r3
 8007622:	bd80      	pop	{r7, pc}
 8007624:	20000e28 	.word	0x20000e28
 8007628:	2000034c 	.word	0x2000034c
 800762c:	20000628 	.word	0x20000628

08007630 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007634:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007636:	4618      	mov	r0, r3
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	4603      	mov	r3, r0
 8007648:	6039      	str	r1, [r7, #0]
 800764a:	71fb      	strb	r3, [r7, #7]
 800764c:	4613      	mov	r3, r2
 800764e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007650:	79fb      	ldrb	r3, [r7, #7]
 8007652:	2b23      	cmp	r3, #35	; 0x23
 8007654:	d85c      	bhi.n	8007710 <CDC_Control_FS+0xd0>
 8007656:	a201      	add	r2, pc, #4	; (adr r2, 800765c <CDC_Control_FS+0x1c>)
 8007658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765c:	08007711 	.word	0x08007711
 8007660:	08007711 	.word	0x08007711
 8007664:	08007711 	.word	0x08007711
 8007668:	08007711 	.word	0x08007711
 800766c:	08007711 	.word	0x08007711
 8007670:	08007711 	.word	0x08007711
 8007674:	08007711 	.word	0x08007711
 8007678:	08007711 	.word	0x08007711
 800767c:	08007711 	.word	0x08007711
 8007680:	08007711 	.word	0x08007711
 8007684:	08007711 	.word	0x08007711
 8007688:	08007711 	.word	0x08007711
 800768c:	08007711 	.word	0x08007711
 8007690:	08007711 	.word	0x08007711
 8007694:	08007711 	.word	0x08007711
 8007698:	08007711 	.word	0x08007711
 800769c:	08007711 	.word	0x08007711
 80076a0:	08007711 	.word	0x08007711
 80076a4:	08007711 	.word	0x08007711
 80076a8:	08007711 	.word	0x08007711
 80076ac:	08007711 	.word	0x08007711
 80076b0:	08007711 	.word	0x08007711
 80076b4:	08007711 	.word	0x08007711
 80076b8:	08007711 	.word	0x08007711
 80076bc:	08007711 	.word	0x08007711
 80076c0:	08007711 	.word	0x08007711
 80076c4:	08007711 	.word	0x08007711
 80076c8:	08007711 	.word	0x08007711
 80076cc:	08007711 	.word	0x08007711
 80076d0:	08007711 	.word	0x08007711
 80076d4:	08007711 	.word	0x08007711
 80076d8:	08007711 	.word	0x08007711
 80076dc:	080076ed 	.word	0x080076ed
 80076e0:	080076ff 	.word	0x080076ff
 80076e4:	08007711 	.word	0x08007711
 80076e8:	08007711 	.word	0x08007711
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80076ec:	4b0c      	ldr	r3, [pc, #48]	; (8007720 <CDC_Control_FS+0xe0>)
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	6810      	ldr	r0, [r2, #0]
 80076f2:	6018      	str	r0, [r3, #0]
 80076f4:	8891      	ldrh	r1, [r2, #4]
 80076f6:	7992      	ldrb	r2, [r2, #6]
 80076f8:	8099      	strh	r1, [r3, #4]
 80076fa:	719a      	strb	r2, [r3, #6]
    break;
 80076fc:	e009      	b.n	8007712 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	 memcpy(pbuf, lineCoding, sizeof(lineCoding));
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	4a07      	ldr	r2, [pc, #28]	; (8007720 <CDC_Control_FS+0xe0>)
 8007702:	6810      	ldr	r0, [r2, #0]
 8007704:	6018      	str	r0, [r3, #0]
 8007706:	8891      	ldrh	r1, [r2, #4]
 8007708:	7992      	ldrb	r2, [r2, #6]
 800770a:	8099      	strh	r1, [r3, #4]
 800770c:	719a      	strb	r2, [r3, #6]
    break;
 800770e:	e000      	b.n	8007712 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007710:	bf00      	nop
  }

  return (USBD_OK);
 8007712:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	20000098 	.word	0x20000098

08007724 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	4805      	ldr	r0, [pc, #20]	; (8007748 <CDC_Receive_FS+0x24>)
 8007732:	f7fe fbf3 	bl	8005f1c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007736:	4804      	ldr	r0, [pc, #16]	; (8007748 <CDC_Receive_FS+0x24>)
 8007738:	f7fe fc0e 	bl	8005f58 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800773c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	2000034c 	.word	0x2000034c

0800774c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	4613      	mov	r3, r2
 8007758:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800775e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007762:	4618      	mov	r0, r3
 8007764:	371c      	adds	r7, #28
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
	...

08007770 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	4603      	mov	r3, r0
 8007778:	6039      	str	r1, [r7, #0]
 800777a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2212      	movs	r2, #18
 8007780:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007782:	4b03      	ldr	r3, [pc, #12]	; (8007790 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007784:	4618      	mov	r0, r3
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	200000d0 	.word	0x200000d0

08007794 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	6039      	str	r1, [r7, #0]
 800779e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2204      	movs	r2, #4
 80077a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077a6:	4b03      	ldr	r3, [pc, #12]	; (80077b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	200000e4 	.word	0x200000e4

080077b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	4603      	mov	r3, r0
 80077c0:	6039      	str	r1, [r7, #0]
 80077c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077c4:	79fb      	ldrb	r3, [r7, #7]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d105      	bne.n	80077d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	4907      	ldr	r1, [pc, #28]	; (80077ec <USBD_FS_ProductStrDescriptor+0x34>)
 80077ce:	4808      	ldr	r0, [pc, #32]	; (80077f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80077d0:	f7ff fe0a 	bl	80073e8 <USBD_GetString>
 80077d4:	e004      	b.n	80077e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	4904      	ldr	r1, [pc, #16]	; (80077ec <USBD_FS_ProductStrDescriptor+0x34>)
 80077da:	4805      	ldr	r0, [pc, #20]	; (80077f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80077dc:	f7ff fe04 	bl	80073e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077e0:	4b02      	ldr	r3, [pc, #8]	; (80077ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	20001628 	.word	0x20001628
 80077f0:	0800aa60 	.word	0x0800aa60

080077f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	6039      	str	r1, [r7, #0]
 80077fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	4904      	ldr	r1, [pc, #16]	; (8007814 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007804:	4804      	ldr	r0, [pc, #16]	; (8007818 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007806:	f7ff fdef 	bl	80073e8 <USBD_GetString>
  return USBD_StrDesc;
 800780a:	4b02      	ldr	r3, [pc, #8]	; (8007814 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	20001628 	.word	0x20001628
 8007818:	0800aa78 	.word	0x0800aa78

0800781c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	4603      	mov	r3, r0
 8007824:	6039      	str	r1, [r7, #0]
 8007826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	221a      	movs	r2, #26
 800782c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800782e:	f000 f843 	bl	80078b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007832:	4b02      	ldr	r3, [pc, #8]	; (800783c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	200000e8 	.word	0x200000e8

08007840 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	4603      	mov	r3, r0
 8007848:	6039      	str	r1, [r7, #0]
 800784a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800784c:	79fb      	ldrb	r3, [r7, #7]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d105      	bne.n	800785e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	4907      	ldr	r1, [pc, #28]	; (8007874 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007856:	4808      	ldr	r0, [pc, #32]	; (8007878 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007858:	f7ff fdc6 	bl	80073e8 <USBD_GetString>
 800785c:	e004      	b.n	8007868 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	4904      	ldr	r1, [pc, #16]	; (8007874 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007862:	4805      	ldr	r0, [pc, #20]	; (8007878 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007864:	f7ff fdc0 	bl	80073e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007868:	4b02      	ldr	r3, [pc, #8]	; (8007874 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800786a:	4618      	mov	r0, r3
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	20001628 	.word	0x20001628
 8007878:	0800aa8c 	.word	0x0800aa8c

0800787c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	6039      	str	r1, [r7, #0]
 8007886:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007888:	79fb      	ldrb	r3, [r7, #7]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d105      	bne.n	800789a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	4907      	ldr	r1, [pc, #28]	; (80078b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007892:	4808      	ldr	r0, [pc, #32]	; (80078b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007894:	f7ff fda8 	bl	80073e8 <USBD_GetString>
 8007898:	e004      	b.n	80078a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	4904      	ldr	r1, [pc, #16]	; (80078b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800789e:	4805      	ldr	r0, [pc, #20]	; (80078b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078a0:	f7ff fda2 	bl	80073e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078a4:	4b02      	ldr	r3, [pc, #8]	; (80078b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20001628 	.word	0x20001628
 80078b4:	0800aa98 	.word	0x0800aa98

080078b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078be:	4b0f      	ldr	r3, [pc, #60]	; (80078fc <Get_SerialNum+0x44>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078c4:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <Get_SerialNum+0x48>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078ca:	4b0e      	ldr	r3, [pc, #56]	; (8007904 <Get_SerialNum+0x4c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4413      	add	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d009      	beq.n	80078f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80078de:	2208      	movs	r2, #8
 80078e0:	4909      	ldr	r1, [pc, #36]	; (8007908 <Get_SerialNum+0x50>)
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 f814 	bl	8007910 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80078e8:	2204      	movs	r2, #4
 80078ea:	4908      	ldr	r1, [pc, #32]	; (800790c <Get_SerialNum+0x54>)
 80078ec:	68b8      	ldr	r0, [r7, #8]
 80078ee:	f000 f80f 	bl	8007910 <IntToUnicode>
  }
}
 80078f2:	bf00      	nop
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	1fff7a10 	.word	0x1fff7a10
 8007900:	1fff7a14 	.word	0x1fff7a14
 8007904:	1fff7a18 	.word	0x1fff7a18
 8007908:	200000ea 	.word	0x200000ea
 800790c:	200000fa 	.word	0x200000fa

08007910 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007910:	b480      	push	{r7}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	4613      	mov	r3, r2
 800791c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007922:	2300      	movs	r3, #0
 8007924:	75fb      	strb	r3, [r7, #23]
 8007926:	e027      	b.n	8007978 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	0f1b      	lsrs	r3, r3, #28
 800792c:	2b09      	cmp	r3, #9
 800792e:	d80b      	bhi.n	8007948 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	0f1b      	lsrs	r3, r3, #28
 8007934:	b2da      	uxtb	r2, r3
 8007936:	7dfb      	ldrb	r3, [r7, #23]
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	4619      	mov	r1, r3
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	440b      	add	r3, r1
 8007940:	3230      	adds	r2, #48	; 0x30
 8007942:	b2d2      	uxtb	r2, r2
 8007944:	701a      	strb	r2, [r3, #0]
 8007946:	e00a      	b.n	800795e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	0f1b      	lsrs	r3, r3, #28
 800794c:	b2da      	uxtb	r2, r3
 800794e:	7dfb      	ldrb	r3, [r7, #23]
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	4619      	mov	r1, r3
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	440b      	add	r3, r1
 8007958:	3237      	adds	r2, #55	; 0x37
 800795a:	b2d2      	uxtb	r2, r2
 800795c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	011b      	lsls	r3, r3, #4
 8007962:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007964:	7dfb      	ldrb	r3, [r7, #23]
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	3301      	adds	r3, #1
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	4413      	add	r3, r2
 800796e:	2200      	movs	r2, #0
 8007970:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007972:	7dfb      	ldrb	r3, [r7, #23]
 8007974:	3301      	adds	r3, #1
 8007976:	75fb      	strb	r3, [r7, #23]
 8007978:	7dfa      	ldrb	r2, [r7, #23]
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	429a      	cmp	r2, r3
 800797e:	d3d3      	bcc.n	8007928 <IntToUnicode+0x18>
  }
}
 8007980:	bf00      	nop
 8007982:	bf00      	nop
 8007984:	371c      	adds	r7, #28
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
	...

08007990 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b08a      	sub	sp, #40	; 0x28
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007998:	f107 0314 	add.w	r3, r7, #20
 800799c:	2200      	movs	r2, #0
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	605a      	str	r2, [r3, #4]
 80079a2:	609a      	str	r2, [r3, #8]
 80079a4:	60da      	str	r2, [r3, #12]
 80079a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079b0:	d13a      	bne.n	8007a28 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079b2:	2300      	movs	r3, #0
 80079b4:	613b      	str	r3, [r7, #16]
 80079b6:	4b1e      	ldr	r3, [pc, #120]	; (8007a30 <HAL_PCD_MspInit+0xa0>)
 80079b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ba:	4a1d      	ldr	r2, [pc, #116]	; (8007a30 <HAL_PCD_MspInit+0xa0>)
 80079bc:	f043 0301 	orr.w	r3, r3, #1
 80079c0:	6313      	str	r3, [r2, #48]	; 0x30
 80079c2:	4b1b      	ldr	r3, [pc, #108]	; (8007a30 <HAL_PCD_MspInit+0xa0>)
 80079c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	613b      	str	r3, [r7, #16]
 80079cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80079ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80079d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079d4:	2302      	movs	r3, #2
 80079d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079d8:	2300      	movs	r3, #0
 80079da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079dc:	2303      	movs	r3, #3
 80079de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80079e0:	230a      	movs	r3, #10
 80079e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079e4:	f107 0314 	add.w	r3, r7, #20
 80079e8:	4619      	mov	r1, r3
 80079ea:	4812      	ldr	r0, [pc, #72]	; (8007a34 <HAL_PCD_MspInit+0xa4>)
 80079ec:	f7fa f98e 	bl	8001d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80079f0:	4b0f      	ldr	r3, [pc, #60]	; (8007a30 <HAL_PCD_MspInit+0xa0>)
 80079f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f4:	4a0e      	ldr	r2, [pc, #56]	; (8007a30 <HAL_PCD_MspInit+0xa0>)
 80079f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079fa:	6353      	str	r3, [r2, #52]	; 0x34
 80079fc:	2300      	movs	r3, #0
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	4b0b      	ldr	r3, [pc, #44]	; (8007a30 <HAL_PCD_MspInit+0xa0>)
 8007a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a04:	4a0a      	ldr	r2, [pc, #40]	; (8007a30 <HAL_PCD_MspInit+0xa0>)
 8007a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a0a:	6453      	str	r3, [r2, #68]	; 0x44
 8007a0c:	4b08      	ldr	r3, [pc, #32]	; (8007a30 <HAL_PCD_MspInit+0xa0>)
 8007a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a14:	60fb      	str	r3, [r7, #12]
 8007a16:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	2043      	movs	r0, #67	; 0x43
 8007a1e:	f7fa f93e 	bl	8001c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a22:	2043      	movs	r0, #67	; 0x43
 8007a24:	f7fa f957 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a28:	bf00      	nop
 8007a2a:	3728      	adds	r7, #40	; 0x28
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	40023800 	.word	0x40023800
 8007a34:	40020000 	.word	0x40020000

08007a38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4610      	mov	r0, r2
 8007a50:	f7fe fb6b 	bl	800612a <USBD_LL_SetupStage>
}
 8007a54:	bf00      	nop
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007a6e:	78fa      	ldrb	r2, [r7, #3]
 8007a70:	6879      	ldr	r1, [r7, #4]
 8007a72:	4613      	mov	r3, r2
 8007a74:	00db      	lsls	r3, r3, #3
 8007a76:	4413      	add	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	440b      	add	r3, r1
 8007a7c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	78fb      	ldrb	r3, [r7, #3]
 8007a84:	4619      	mov	r1, r3
 8007a86:	f7fe fba5 	bl	80061d4 <USBD_LL_DataOutStage>
}
 8007a8a:	bf00      	nop
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b082      	sub	sp, #8
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007aa4:	78fa      	ldrb	r2, [r7, #3]
 8007aa6:	6879      	ldr	r1, [r7, #4]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	00db      	lsls	r3, r3, #3
 8007aac:	4413      	add	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	440b      	add	r3, r1
 8007ab2:	334c      	adds	r3, #76	; 0x4c
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	78fb      	ldrb	r3, [r7, #3]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	f7fe fc3e 	bl	800633a <USBD_LL_DataInStage>
}
 8007abe:	bf00      	nop
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fe fd72 	bl	80065be <USBD_LL_SOF>
}
 8007ada:	bf00      	nop
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007aea:	2301      	movs	r3, #1
 8007aec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d102      	bne.n	8007afc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73fb      	strb	r3, [r7, #15]
 8007afa:	e008      	b.n	8007b0e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d102      	bne.n	8007b0a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007b04:	2301      	movs	r3, #1
 8007b06:	73fb      	strb	r3, [r7, #15]
 8007b08:	e001      	b.n	8007b0e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007b0a:	f7f9 fb45 	bl	8001198 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b14:	7bfa      	ldrb	r2, [r7, #15]
 8007b16:	4611      	mov	r1, r2
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fe fd12 	bl	8006542 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fe fcba 	bl	800649e <USBD_LL_Reset>
}
 8007b2a:	bf00      	nop
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
	...

08007b34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fe fd0d 	bl	8006562 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	6812      	ldr	r2, [r2, #0]
 8007b56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b5a:	f043 0301 	orr.w	r3, r3, #1
 8007b5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d005      	beq.n	8007b74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b68:	4b04      	ldr	r3, [pc, #16]	; (8007b7c <HAL_PCD_SuspendCallback+0x48>)
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	4a03      	ldr	r2, [pc, #12]	; (8007b7c <HAL_PCD_SuspendCallback+0x48>)
 8007b6e:	f043 0306 	orr.w	r3, r3, #6
 8007b72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b74:	bf00      	nop
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	e000ed00 	.word	0xe000ed00

08007b80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fe fcfd 	bl	800658e <USBD_LL_Resume>
}
 8007b94:	bf00      	nop
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bae:	78fa      	ldrb	r2, [r7, #3]
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fe fd55 	bl	8006662 <USBD_LL_IsoOUTIncomplete>
}
 8007bb8:	bf00      	nop
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bd2:	78fa      	ldrb	r2, [r7, #3]
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe fd11 	bl	80065fe <USBD_LL_IsoINIncomplete>
}
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fe fd67 	bl	80066c6 <USBD_LL_DevConnected>
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fe fd64 	bl	80066dc <USBD_LL_DevDisconnected>
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d13c      	bne.n	8007ca6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007c2c:	4a20      	ldr	r2, [pc, #128]	; (8007cb0 <USBD_LL_Init+0x94>)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a1e      	ldr	r2, [pc, #120]	; (8007cb0 <USBD_LL_Init+0x94>)
 8007c38:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c3c:	4b1c      	ldr	r3, [pc, #112]	; (8007cb0 <USBD_LL_Init+0x94>)
 8007c3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007c42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007c44:	4b1a      	ldr	r3, [pc, #104]	; (8007cb0 <USBD_LL_Init+0x94>)
 8007c46:	2204      	movs	r2, #4
 8007c48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c4a:	4b19      	ldr	r3, [pc, #100]	; (8007cb0 <USBD_LL_Init+0x94>)
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c50:	4b17      	ldr	r3, [pc, #92]	; (8007cb0 <USBD_LL_Init+0x94>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c56:	4b16      	ldr	r3, [pc, #88]	; (8007cb0 <USBD_LL_Init+0x94>)
 8007c58:	2202      	movs	r2, #2
 8007c5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c5c:	4b14      	ldr	r3, [pc, #80]	; (8007cb0 <USBD_LL_Init+0x94>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c62:	4b13      	ldr	r3, [pc, #76]	; (8007cb0 <USBD_LL_Init+0x94>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c68:	4b11      	ldr	r3, [pc, #68]	; (8007cb0 <USBD_LL_Init+0x94>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007c6e:	4b10      	ldr	r3, [pc, #64]	; (8007cb0 <USBD_LL_Init+0x94>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c74:	4b0e      	ldr	r3, [pc, #56]	; (8007cb0 <USBD_LL_Init+0x94>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c7a:	480d      	ldr	r0, [pc, #52]	; (8007cb0 <USBD_LL_Init+0x94>)
 8007c7c:	f7fa fa16 	bl	80020ac <HAL_PCD_Init>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007c86:	f7f9 fa87 	bl	8001198 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007c8a:	2180      	movs	r1, #128	; 0x80
 8007c8c:	4808      	ldr	r0, [pc, #32]	; (8007cb0 <USBD_LL_Init+0x94>)
 8007c8e:	f7fb fc6e 	bl	800356e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007c92:	2240      	movs	r2, #64	; 0x40
 8007c94:	2100      	movs	r1, #0
 8007c96:	4806      	ldr	r0, [pc, #24]	; (8007cb0 <USBD_LL_Init+0x94>)
 8007c98:	f7fb fc22 	bl	80034e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007c9c:	2280      	movs	r2, #128	; 0x80
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	4803      	ldr	r0, [pc, #12]	; (8007cb0 <USBD_LL_Init+0x94>)
 8007ca2:	f7fb fc1d 	bl	80034e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20001828 	.word	0x20001828

08007cb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fa fb0b 	bl	80022e6 <HAL_PCD_Start>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 f942 	bl	8007f60 <USBD_Get_USB_Status>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ce0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	4608      	mov	r0, r1
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	70fb      	strb	r3, [r7, #3]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	70bb      	strb	r3, [r7, #2]
 8007d00:	4613      	mov	r3, r2
 8007d02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d12:	78bb      	ldrb	r3, [r7, #2]
 8007d14:	883a      	ldrh	r2, [r7, #0]
 8007d16:	78f9      	ldrb	r1, [r7, #3]
 8007d18:	f7fa ffdc 	bl	8002cd4 <HAL_PCD_EP_Open>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 f91c 	bl	8007f60 <USBD_Get_USB_Status>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d50:	78fa      	ldrb	r2, [r7, #3]
 8007d52:	4611      	mov	r1, r2
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7fb f825 	bl	8002da4 <HAL_PCD_EP_Close>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 f8fd 	bl	8007f60 <USBD_Get_USB_Status>
 8007d66:	4603      	mov	r3, r0
 8007d68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d8e:	78fa      	ldrb	r2, [r7, #3]
 8007d90:	4611      	mov	r1, r2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fb f8fd 	bl	8002f92 <HAL_PCD_EP_SetStall>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f000 f8de 	bl	8007f60 <USBD_Get_USB_Status>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b084      	sub	sp, #16
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007dcc:	78fa      	ldrb	r2, [r7, #3]
 8007dce:	4611      	mov	r1, r2
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fb f942 	bl	800305a <HAL_PCD_EP_ClrStall>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 f8bf 	bl	8007f60 <USBD_Get_USB_Status>
 8007de2:	4603      	mov	r3, r0
 8007de4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007de6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	da0b      	bge.n	8007e24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e0c:	78fb      	ldrb	r3, [r7, #3]
 8007e0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e12:	68f9      	ldr	r1, [r7, #12]
 8007e14:	4613      	mov	r3, r2
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	440b      	add	r3, r1
 8007e1e:	333e      	adds	r3, #62	; 0x3e
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	e00b      	b.n	8007e3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e24:	78fb      	ldrb	r3, [r7, #3]
 8007e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e2a:	68f9      	ldr	r1, [r7, #12]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	4413      	add	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	440b      	add	r3, r1
 8007e36:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007e3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	460b      	mov	r3, r1
 8007e52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e62:	78fa      	ldrb	r2, [r7, #3]
 8007e64:	4611      	mov	r1, r2
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fa ff0f 	bl	8002c8a <HAL_PCD_SetAddress>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 f874 	bl	8007f60 <USBD_Get_USB_Status>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b086      	sub	sp, #24
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	607a      	str	r2, [r7, #4]
 8007e90:	603b      	str	r3, [r7, #0]
 8007e92:	460b      	mov	r3, r1
 8007e94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ea4:	7af9      	ldrb	r1, [r7, #11]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	f7fb f828 	bl	8002efe <HAL_PCD_EP_Transmit>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eb2:	7dfb      	ldrb	r3, [r7, #23]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 f853 	bl	8007f60 <USBD_Get_USB_Status>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ebe:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	607a      	str	r2, [r7, #4]
 8007ed2:	603b      	str	r3, [r7, #0]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ee6:	7af9      	ldrb	r1, [r7, #11]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	f7fa ffa4 	bl	8002e38 <HAL_PCD_EP_Receive>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ef4:	7dfb      	ldrb	r3, [r7, #23]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 f832 	bl	8007f60 <USBD_Get_USB_Status>
 8007efc:	4603      	mov	r3, r0
 8007efe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f00:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	460b      	mov	r3, r1
 8007f14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f1c:	78fa      	ldrb	r2, [r7, #3]
 8007f1e:	4611      	mov	r1, r2
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fa ffd4 	bl	8002ece <HAL_PCD_EP_GetRxCount>
 8007f26:	4603      	mov	r3, r0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f38:	4b03      	ldr	r3, [pc, #12]	; (8007f48 <USBD_static_malloc+0x18>)
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	20001d34 	.word	0x20001d34

08007f4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]

}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	4603      	mov	r3, r0
 8007f68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f6e:	79fb      	ldrb	r3, [r7, #7]
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d817      	bhi.n	8007fa4 <USBD_Get_USB_Status+0x44>
 8007f74:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <USBD_Get_USB_Status+0x1c>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08007f8d 	.word	0x08007f8d
 8007f80:	08007f93 	.word	0x08007f93
 8007f84:	08007f99 	.word	0x08007f99
 8007f88:	08007f9f 	.word	0x08007f9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f90:	e00b      	b.n	8007faa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f92:	2303      	movs	r3, #3
 8007f94:	73fb      	strb	r3, [r7, #15]
    break;
 8007f96:	e008      	b.n	8007faa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f9c:	e005      	b.n	8007faa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa2:	e002      	b.n	8007faa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa8:	bf00      	nop
  }
  return usb_status;
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <__errno>:
 8007fb8:	4b01      	ldr	r3, [pc, #4]	; (8007fc0 <__errno+0x8>)
 8007fba:	6818      	ldr	r0, [r3, #0]
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	20000104 	.word	0x20000104

08007fc4 <__libc_init_array>:
 8007fc4:	b570      	push	{r4, r5, r6, lr}
 8007fc6:	4d0d      	ldr	r5, [pc, #52]	; (8007ffc <__libc_init_array+0x38>)
 8007fc8:	4c0d      	ldr	r4, [pc, #52]	; (8008000 <__libc_init_array+0x3c>)
 8007fca:	1b64      	subs	r4, r4, r5
 8007fcc:	10a4      	asrs	r4, r4, #2
 8007fce:	2600      	movs	r6, #0
 8007fd0:	42a6      	cmp	r6, r4
 8007fd2:	d109      	bne.n	8007fe8 <__libc_init_array+0x24>
 8007fd4:	4d0b      	ldr	r5, [pc, #44]	; (8008004 <__libc_init_array+0x40>)
 8007fd6:	4c0c      	ldr	r4, [pc, #48]	; (8008008 <__libc_init_array+0x44>)
 8007fd8:	f002 fd36 	bl	800aa48 <_init>
 8007fdc:	1b64      	subs	r4, r4, r5
 8007fde:	10a4      	asrs	r4, r4, #2
 8007fe0:	2600      	movs	r6, #0
 8007fe2:	42a6      	cmp	r6, r4
 8007fe4:	d105      	bne.n	8007ff2 <__libc_init_array+0x2e>
 8007fe6:	bd70      	pop	{r4, r5, r6, pc}
 8007fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fec:	4798      	blx	r3
 8007fee:	3601      	adds	r6, #1
 8007ff0:	e7ee      	b.n	8007fd0 <__libc_init_array+0xc>
 8007ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ff6:	4798      	blx	r3
 8007ff8:	3601      	adds	r6, #1
 8007ffa:	e7f2      	b.n	8007fe2 <__libc_init_array+0x1e>
 8007ffc:	0800ae9c 	.word	0x0800ae9c
 8008000:	0800ae9c 	.word	0x0800ae9c
 8008004:	0800ae9c 	.word	0x0800ae9c
 8008008:	0800aea0 	.word	0x0800aea0

0800800c <memset>:
 800800c:	4402      	add	r2, r0
 800800e:	4603      	mov	r3, r0
 8008010:	4293      	cmp	r3, r2
 8008012:	d100      	bne.n	8008016 <memset+0xa>
 8008014:	4770      	bx	lr
 8008016:	f803 1b01 	strb.w	r1, [r3], #1
 800801a:	e7f9      	b.n	8008010 <memset+0x4>

0800801c <__cvt>:
 800801c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008020:	ec55 4b10 	vmov	r4, r5, d0
 8008024:	2d00      	cmp	r5, #0
 8008026:	460e      	mov	r6, r1
 8008028:	4619      	mov	r1, r3
 800802a:	462b      	mov	r3, r5
 800802c:	bfbb      	ittet	lt
 800802e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008032:	461d      	movlt	r5, r3
 8008034:	2300      	movge	r3, #0
 8008036:	232d      	movlt	r3, #45	; 0x2d
 8008038:	700b      	strb	r3, [r1, #0]
 800803a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800803c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008040:	4691      	mov	r9, r2
 8008042:	f023 0820 	bic.w	r8, r3, #32
 8008046:	bfbc      	itt	lt
 8008048:	4622      	movlt	r2, r4
 800804a:	4614      	movlt	r4, r2
 800804c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008050:	d005      	beq.n	800805e <__cvt+0x42>
 8008052:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008056:	d100      	bne.n	800805a <__cvt+0x3e>
 8008058:	3601      	adds	r6, #1
 800805a:	2102      	movs	r1, #2
 800805c:	e000      	b.n	8008060 <__cvt+0x44>
 800805e:	2103      	movs	r1, #3
 8008060:	ab03      	add	r3, sp, #12
 8008062:	9301      	str	r3, [sp, #4]
 8008064:	ab02      	add	r3, sp, #8
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	ec45 4b10 	vmov	d0, r4, r5
 800806c:	4653      	mov	r3, sl
 800806e:	4632      	mov	r2, r6
 8008070:	f000 fcca 	bl	8008a08 <_dtoa_r>
 8008074:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008078:	4607      	mov	r7, r0
 800807a:	d102      	bne.n	8008082 <__cvt+0x66>
 800807c:	f019 0f01 	tst.w	r9, #1
 8008080:	d022      	beq.n	80080c8 <__cvt+0xac>
 8008082:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008086:	eb07 0906 	add.w	r9, r7, r6
 800808a:	d110      	bne.n	80080ae <__cvt+0x92>
 800808c:	783b      	ldrb	r3, [r7, #0]
 800808e:	2b30      	cmp	r3, #48	; 0x30
 8008090:	d10a      	bne.n	80080a8 <__cvt+0x8c>
 8008092:	2200      	movs	r2, #0
 8008094:	2300      	movs	r3, #0
 8008096:	4620      	mov	r0, r4
 8008098:	4629      	mov	r1, r5
 800809a:	f7f8 fd1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800809e:	b918      	cbnz	r0, 80080a8 <__cvt+0x8c>
 80080a0:	f1c6 0601 	rsb	r6, r6, #1
 80080a4:	f8ca 6000 	str.w	r6, [sl]
 80080a8:	f8da 3000 	ldr.w	r3, [sl]
 80080ac:	4499      	add	r9, r3
 80080ae:	2200      	movs	r2, #0
 80080b0:	2300      	movs	r3, #0
 80080b2:	4620      	mov	r0, r4
 80080b4:	4629      	mov	r1, r5
 80080b6:	f7f8 fd0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80080ba:	b108      	cbz	r0, 80080c0 <__cvt+0xa4>
 80080bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80080c0:	2230      	movs	r2, #48	; 0x30
 80080c2:	9b03      	ldr	r3, [sp, #12]
 80080c4:	454b      	cmp	r3, r9
 80080c6:	d307      	bcc.n	80080d8 <__cvt+0xbc>
 80080c8:	9b03      	ldr	r3, [sp, #12]
 80080ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080cc:	1bdb      	subs	r3, r3, r7
 80080ce:	4638      	mov	r0, r7
 80080d0:	6013      	str	r3, [r2, #0]
 80080d2:	b004      	add	sp, #16
 80080d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d8:	1c59      	adds	r1, r3, #1
 80080da:	9103      	str	r1, [sp, #12]
 80080dc:	701a      	strb	r2, [r3, #0]
 80080de:	e7f0      	b.n	80080c2 <__cvt+0xa6>

080080e0 <__exponent>:
 80080e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080e2:	4603      	mov	r3, r0
 80080e4:	2900      	cmp	r1, #0
 80080e6:	bfb8      	it	lt
 80080e8:	4249      	neglt	r1, r1
 80080ea:	f803 2b02 	strb.w	r2, [r3], #2
 80080ee:	bfb4      	ite	lt
 80080f0:	222d      	movlt	r2, #45	; 0x2d
 80080f2:	222b      	movge	r2, #43	; 0x2b
 80080f4:	2909      	cmp	r1, #9
 80080f6:	7042      	strb	r2, [r0, #1]
 80080f8:	dd2a      	ble.n	8008150 <__exponent+0x70>
 80080fa:	f10d 0407 	add.w	r4, sp, #7
 80080fe:	46a4      	mov	ip, r4
 8008100:	270a      	movs	r7, #10
 8008102:	46a6      	mov	lr, r4
 8008104:	460a      	mov	r2, r1
 8008106:	fb91 f6f7 	sdiv	r6, r1, r7
 800810a:	fb07 1516 	mls	r5, r7, r6, r1
 800810e:	3530      	adds	r5, #48	; 0x30
 8008110:	2a63      	cmp	r2, #99	; 0x63
 8008112:	f104 34ff 	add.w	r4, r4, #4294967295
 8008116:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800811a:	4631      	mov	r1, r6
 800811c:	dcf1      	bgt.n	8008102 <__exponent+0x22>
 800811e:	3130      	adds	r1, #48	; 0x30
 8008120:	f1ae 0502 	sub.w	r5, lr, #2
 8008124:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008128:	1c44      	adds	r4, r0, #1
 800812a:	4629      	mov	r1, r5
 800812c:	4561      	cmp	r1, ip
 800812e:	d30a      	bcc.n	8008146 <__exponent+0x66>
 8008130:	f10d 0209 	add.w	r2, sp, #9
 8008134:	eba2 020e 	sub.w	r2, r2, lr
 8008138:	4565      	cmp	r5, ip
 800813a:	bf88      	it	hi
 800813c:	2200      	movhi	r2, #0
 800813e:	4413      	add	r3, r2
 8008140:	1a18      	subs	r0, r3, r0
 8008142:	b003      	add	sp, #12
 8008144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800814a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800814e:	e7ed      	b.n	800812c <__exponent+0x4c>
 8008150:	2330      	movs	r3, #48	; 0x30
 8008152:	3130      	adds	r1, #48	; 0x30
 8008154:	7083      	strb	r3, [r0, #2]
 8008156:	70c1      	strb	r1, [r0, #3]
 8008158:	1d03      	adds	r3, r0, #4
 800815a:	e7f1      	b.n	8008140 <__exponent+0x60>

0800815c <_printf_float>:
 800815c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008160:	ed2d 8b02 	vpush	{d8}
 8008164:	b08d      	sub	sp, #52	; 0x34
 8008166:	460c      	mov	r4, r1
 8008168:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800816c:	4616      	mov	r6, r2
 800816e:	461f      	mov	r7, r3
 8008170:	4605      	mov	r5, r0
 8008172:	f001 fa37 	bl	80095e4 <_localeconv_r>
 8008176:	f8d0 a000 	ldr.w	sl, [r0]
 800817a:	4650      	mov	r0, sl
 800817c:	f7f8 f830 	bl	80001e0 <strlen>
 8008180:	2300      	movs	r3, #0
 8008182:	930a      	str	r3, [sp, #40]	; 0x28
 8008184:	6823      	ldr	r3, [r4, #0]
 8008186:	9305      	str	r3, [sp, #20]
 8008188:	f8d8 3000 	ldr.w	r3, [r8]
 800818c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008190:	3307      	adds	r3, #7
 8008192:	f023 0307 	bic.w	r3, r3, #7
 8008196:	f103 0208 	add.w	r2, r3, #8
 800819a:	f8c8 2000 	str.w	r2, [r8]
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80081aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081ae:	9307      	str	r3, [sp, #28]
 80081b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80081b4:	ee08 0a10 	vmov	s16, r0
 80081b8:	4b9f      	ldr	r3, [pc, #636]	; (8008438 <_printf_float+0x2dc>)
 80081ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081be:	f04f 32ff 	mov.w	r2, #4294967295
 80081c2:	f7f8 fcbb 	bl	8000b3c <__aeabi_dcmpun>
 80081c6:	bb88      	cbnz	r0, 800822c <_printf_float+0xd0>
 80081c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081cc:	4b9a      	ldr	r3, [pc, #616]	; (8008438 <_printf_float+0x2dc>)
 80081ce:	f04f 32ff 	mov.w	r2, #4294967295
 80081d2:	f7f8 fc95 	bl	8000b00 <__aeabi_dcmple>
 80081d6:	bb48      	cbnz	r0, 800822c <_printf_float+0xd0>
 80081d8:	2200      	movs	r2, #0
 80081da:	2300      	movs	r3, #0
 80081dc:	4640      	mov	r0, r8
 80081de:	4649      	mov	r1, r9
 80081e0:	f7f8 fc84 	bl	8000aec <__aeabi_dcmplt>
 80081e4:	b110      	cbz	r0, 80081ec <_printf_float+0x90>
 80081e6:	232d      	movs	r3, #45	; 0x2d
 80081e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081ec:	4b93      	ldr	r3, [pc, #588]	; (800843c <_printf_float+0x2e0>)
 80081ee:	4894      	ldr	r0, [pc, #592]	; (8008440 <_printf_float+0x2e4>)
 80081f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80081f4:	bf94      	ite	ls
 80081f6:	4698      	movls	r8, r3
 80081f8:	4680      	movhi	r8, r0
 80081fa:	2303      	movs	r3, #3
 80081fc:	6123      	str	r3, [r4, #16]
 80081fe:	9b05      	ldr	r3, [sp, #20]
 8008200:	f023 0204 	bic.w	r2, r3, #4
 8008204:	6022      	str	r2, [r4, #0]
 8008206:	f04f 0900 	mov.w	r9, #0
 800820a:	9700      	str	r7, [sp, #0]
 800820c:	4633      	mov	r3, r6
 800820e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008210:	4621      	mov	r1, r4
 8008212:	4628      	mov	r0, r5
 8008214:	f000 f9d8 	bl	80085c8 <_printf_common>
 8008218:	3001      	adds	r0, #1
 800821a:	f040 8090 	bne.w	800833e <_printf_float+0x1e2>
 800821e:	f04f 30ff 	mov.w	r0, #4294967295
 8008222:	b00d      	add	sp, #52	; 0x34
 8008224:	ecbd 8b02 	vpop	{d8}
 8008228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800822c:	4642      	mov	r2, r8
 800822e:	464b      	mov	r3, r9
 8008230:	4640      	mov	r0, r8
 8008232:	4649      	mov	r1, r9
 8008234:	f7f8 fc82 	bl	8000b3c <__aeabi_dcmpun>
 8008238:	b140      	cbz	r0, 800824c <_printf_float+0xf0>
 800823a:	464b      	mov	r3, r9
 800823c:	2b00      	cmp	r3, #0
 800823e:	bfbc      	itt	lt
 8008240:	232d      	movlt	r3, #45	; 0x2d
 8008242:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008246:	487f      	ldr	r0, [pc, #508]	; (8008444 <_printf_float+0x2e8>)
 8008248:	4b7f      	ldr	r3, [pc, #508]	; (8008448 <_printf_float+0x2ec>)
 800824a:	e7d1      	b.n	80081f0 <_printf_float+0x94>
 800824c:	6863      	ldr	r3, [r4, #4]
 800824e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008252:	9206      	str	r2, [sp, #24]
 8008254:	1c5a      	adds	r2, r3, #1
 8008256:	d13f      	bne.n	80082d8 <_printf_float+0x17c>
 8008258:	2306      	movs	r3, #6
 800825a:	6063      	str	r3, [r4, #4]
 800825c:	9b05      	ldr	r3, [sp, #20]
 800825e:	6861      	ldr	r1, [r4, #4]
 8008260:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008264:	2300      	movs	r3, #0
 8008266:	9303      	str	r3, [sp, #12]
 8008268:	ab0a      	add	r3, sp, #40	; 0x28
 800826a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800826e:	ab09      	add	r3, sp, #36	; 0x24
 8008270:	ec49 8b10 	vmov	d0, r8, r9
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	6022      	str	r2, [r4, #0]
 8008278:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800827c:	4628      	mov	r0, r5
 800827e:	f7ff fecd 	bl	800801c <__cvt>
 8008282:	9b06      	ldr	r3, [sp, #24]
 8008284:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008286:	2b47      	cmp	r3, #71	; 0x47
 8008288:	4680      	mov	r8, r0
 800828a:	d108      	bne.n	800829e <_printf_float+0x142>
 800828c:	1cc8      	adds	r0, r1, #3
 800828e:	db02      	blt.n	8008296 <_printf_float+0x13a>
 8008290:	6863      	ldr	r3, [r4, #4]
 8008292:	4299      	cmp	r1, r3
 8008294:	dd41      	ble.n	800831a <_printf_float+0x1be>
 8008296:	f1ab 0b02 	sub.w	fp, fp, #2
 800829a:	fa5f fb8b 	uxtb.w	fp, fp
 800829e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082a2:	d820      	bhi.n	80082e6 <_printf_float+0x18a>
 80082a4:	3901      	subs	r1, #1
 80082a6:	465a      	mov	r2, fp
 80082a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082ac:	9109      	str	r1, [sp, #36]	; 0x24
 80082ae:	f7ff ff17 	bl	80080e0 <__exponent>
 80082b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082b4:	1813      	adds	r3, r2, r0
 80082b6:	2a01      	cmp	r2, #1
 80082b8:	4681      	mov	r9, r0
 80082ba:	6123      	str	r3, [r4, #16]
 80082bc:	dc02      	bgt.n	80082c4 <_printf_float+0x168>
 80082be:	6822      	ldr	r2, [r4, #0]
 80082c0:	07d2      	lsls	r2, r2, #31
 80082c2:	d501      	bpl.n	80082c8 <_printf_float+0x16c>
 80082c4:	3301      	adds	r3, #1
 80082c6:	6123      	str	r3, [r4, #16]
 80082c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d09c      	beq.n	800820a <_printf_float+0xae>
 80082d0:	232d      	movs	r3, #45	; 0x2d
 80082d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082d6:	e798      	b.n	800820a <_printf_float+0xae>
 80082d8:	9a06      	ldr	r2, [sp, #24]
 80082da:	2a47      	cmp	r2, #71	; 0x47
 80082dc:	d1be      	bne.n	800825c <_printf_float+0x100>
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1bc      	bne.n	800825c <_printf_float+0x100>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e7b9      	b.n	800825a <_printf_float+0xfe>
 80082e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80082ea:	d118      	bne.n	800831e <_printf_float+0x1c2>
 80082ec:	2900      	cmp	r1, #0
 80082ee:	6863      	ldr	r3, [r4, #4]
 80082f0:	dd0b      	ble.n	800830a <_printf_float+0x1ae>
 80082f2:	6121      	str	r1, [r4, #16]
 80082f4:	b913      	cbnz	r3, 80082fc <_printf_float+0x1a0>
 80082f6:	6822      	ldr	r2, [r4, #0]
 80082f8:	07d0      	lsls	r0, r2, #31
 80082fa:	d502      	bpl.n	8008302 <_printf_float+0x1a6>
 80082fc:	3301      	adds	r3, #1
 80082fe:	440b      	add	r3, r1
 8008300:	6123      	str	r3, [r4, #16]
 8008302:	65a1      	str	r1, [r4, #88]	; 0x58
 8008304:	f04f 0900 	mov.w	r9, #0
 8008308:	e7de      	b.n	80082c8 <_printf_float+0x16c>
 800830a:	b913      	cbnz	r3, 8008312 <_printf_float+0x1b6>
 800830c:	6822      	ldr	r2, [r4, #0]
 800830e:	07d2      	lsls	r2, r2, #31
 8008310:	d501      	bpl.n	8008316 <_printf_float+0x1ba>
 8008312:	3302      	adds	r3, #2
 8008314:	e7f4      	b.n	8008300 <_printf_float+0x1a4>
 8008316:	2301      	movs	r3, #1
 8008318:	e7f2      	b.n	8008300 <_printf_float+0x1a4>
 800831a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800831e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008320:	4299      	cmp	r1, r3
 8008322:	db05      	blt.n	8008330 <_printf_float+0x1d4>
 8008324:	6823      	ldr	r3, [r4, #0]
 8008326:	6121      	str	r1, [r4, #16]
 8008328:	07d8      	lsls	r0, r3, #31
 800832a:	d5ea      	bpl.n	8008302 <_printf_float+0x1a6>
 800832c:	1c4b      	adds	r3, r1, #1
 800832e:	e7e7      	b.n	8008300 <_printf_float+0x1a4>
 8008330:	2900      	cmp	r1, #0
 8008332:	bfd4      	ite	le
 8008334:	f1c1 0202 	rsble	r2, r1, #2
 8008338:	2201      	movgt	r2, #1
 800833a:	4413      	add	r3, r2
 800833c:	e7e0      	b.n	8008300 <_printf_float+0x1a4>
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	055a      	lsls	r2, r3, #21
 8008342:	d407      	bmi.n	8008354 <_printf_float+0x1f8>
 8008344:	6923      	ldr	r3, [r4, #16]
 8008346:	4642      	mov	r2, r8
 8008348:	4631      	mov	r1, r6
 800834a:	4628      	mov	r0, r5
 800834c:	47b8      	blx	r7
 800834e:	3001      	adds	r0, #1
 8008350:	d12c      	bne.n	80083ac <_printf_float+0x250>
 8008352:	e764      	b.n	800821e <_printf_float+0xc2>
 8008354:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008358:	f240 80e0 	bls.w	800851c <_printf_float+0x3c0>
 800835c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008360:	2200      	movs	r2, #0
 8008362:	2300      	movs	r3, #0
 8008364:	f7f8 fbb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008368:	2800      	cmp	r0, #0
 800836a:	d034      	beq.n	80083d6 <_printf_float+0x27a>
 800836c:	4a37      	ldr	r2, [pc, #220]	; (800844c <_printf_float+0x2f0>)
 800836e:	2301      	movs	r3, #1
 8008370:	4631      	mov	r1, r6
 8008372:	4628      	mov	r0, r5
 8008374:	47b8      	blx	r7
 8008376:	3001      	adds	r0, #1
 8008378:	f43f af51 	beq.w	800821e <_printf_float+0xc2>
 800837c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008380:	429a      	cmp	r2, r3
 8008382:	db02      	blt.n	800838a <_printf_float+0x22e>
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	07d8      	lsls	r0, r3, #31
 8008388:	d510      	bpl.n	80083ac <_printf_float+0x250>
 800838a:	ee18 3a10 	vmov	r3, s16
 800838e:	4652      	mov	r2, sl
 8008390:	4631      	mov	r1, r6
 8008392:	4628      	mov	r0, r5
 8008394:	47b8      	blx	r7
 8008396:	3001      	adds	r0, #1
 8008398:	f43f af41 	beq.w	800821e <_printf_float+0xc2>
 800839c:	f04f 0800 	mov.w	r8, #0
 80083a0:	f104 091a 	add.w	r9, r4, #26
 80083a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a6:	3b01      	subs	r3, #1
 80083a8:	4543      	cmp	r3, r8
 80083aa:	dc09      	bgt.n	80083c0 <_printf_float+0x264>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	079b      	lsls	r3, r3, #30
 80083b0:	f100 8105 	bmi.w	80085be <_printf_float+0x462>
 80083b4:	68e0      	ldr	r0, [r4, #12]
 80083b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083b8:	4298      	cmp	r0, r3
 80083ba:	bfb8      	it	lt
 80083bc:	4618      	movlt	r0, r3
 80083be:	e730      	b.n	8008222 <_printf_float+0xc6>
 80083c0:	2301      	movs	r3, #1
 80083c2:	464a      	mov	r2, r9
 80083c4:	4631      	mov	r1, r6
 80083c6:	4628      	mov	r0, r5
 80083c8:	47b8      	blx	r7
 80083ca:	3001      	adds	r0, #1
 80083cc:	f43f af27 	beq.w	800821e <_printf_float+0xc2>
 80083d0:	f108 0801 	add.w	r8, r8, #1
 80083d4:	e7e6      	b.n	80083a4 <_printf_float+0x248>
 80083d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d8:	2b00      	cmp	r3, #0
 80083da:	dc39      	bgt.n	8008450 <_printf_float+0x2f4>
 80083dc:	4a1b      	ldr	r2, [pc, #108]	; (800844c <_printf_float+0x2f0>)
 80083de:	2301      	movs	r3, #1
 80083e0:	4631      	mov	r1, r6
 80083e2:	4628      	mov	r0, r5
 80083e4:	47b8      	blx	r7
 80083e6:	3001      	adds	r0, #1
 80083e8:	f43f af19 	beq.w	800821e <_printf_float+0xc2>
 80083ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083f0:	4313      	orrs	r3, r2
 80083f2:	d102      	bne.n	80083fa <_printf_float+0x29e>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	07d9      	lsls	r1, r3, #31
 80083f8:	d5d8      	bpl.n	80083ac <_printf_float+0x250>
 80083fa:	ee18 3a10 	vmov	r3, s16
 80083fe:	4652      	mov	r2, sl
 8008400:	4631      	mov	r1, r6
 8008402:	4628      	mov	r0, r5
 8008404:	47b8      	blx	r7
 8008406:	3001      	adds	r0, #1
 8008408:	f43f af09 	beq.w	800821e <_printf_float+0xc2>
 800840c:	f04f 0900 	mov.w	r9, #0
 8008410:	f104 0a1a 	add.w	sl, r4, #26
 8008414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008416:	425b      	negs	r3, r3
 8008418:	454b      	cmp	r3, r9
 800841a:	dc01      	bgt.n	8008420 <_printf_float+0x2c4>
 800841c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800841e:	e792      	b.n	8008346 <_printf_float+0x1ea>
 8008420:	2301      	movs	r3, #1
 8008422:	4652      	mov	r2, sl
 8008424:	4631      	mov	r1, r6
 8008426:	4628      	mov	r0, r5
 8008428:	47b8      	blx	r7
 800842a:	3001      	adds	r0, #1
 800842c:	f43f aef7 	beq.w	800821e <_printf_float+0xc2>
 8008430:	f109 0901 	add.w	r9, r9, #1
 8008434:	e7ee      	b.n	8008414 <_printf_float+0x2b8>
 8008436:	bf00      	nop
 8008438:	7fefffff 	.word	0x7fefffff
 800843c:	0800aabc 	.word	0x0800aabc
 8008440:	0800aac0 	.word	0x0800aac0
 8008444:	0800aac8 	.word	0x0800aac8
 8008448:	0800aac4 	.word	0x0800aac4
 800844c:	0800aacc 	.word	0x0800aacc
 8008450:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008452:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008454:	429a      	cmp	r2, r3
 8008456:	bfa8      	it	ge
 8008458:	461a      	movge	r2, r3
 800845a:	2a00      	cmp	r2, #0
 800845c:	4691      	mov	r9, r2
 800845e:	dc37      	bgt.n	80084d0 <_printf_float+0x374>
 8008460:	f04f 0b00 	mov.w	fp, #0
 8008464:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008468:	f104 021a 	add.w	r2, r4, #26
 800846c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800846e:	9305      	str	r3, [sp, #20]
 8008470:	eba3 0309 	sub.w	r3, r3, r9
 8008474:	455b      	cmp	r3, fp
 8008476:	dc33      	bgt.n	80084e0 <_printf_float+0x384>
 8008478:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800847c:	429a      	cmp	r2, r3
 800847e:	db3b      	blt.n	80084f8 <_printf_float+0x39c>
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	07da      	lsls	r2, r3, #31
 8008484:	d438      	bmi.n	80084f8 <_printf_float+0x39c>
 8008486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008488:	9a05      	ldr	r2, [sp, #20]
 800848a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800848c:	1a9a      	subs	r2, r3, r2
 800848e:	eba3 0901 	sub.w	r9, r3, r1
 8008492:	4591      	cmp	r9, r2
 8008494:	bfa8      	it	ge
 8008496:	4691      	movge	r9, r2
 8008498:	f1b9 0f00 	cmp.w	r9, #0
 800849c:	dc35      	bgt.n	800850a <_printf_float+0x3ae>
 800849e:	f04f 0800 	mov.w	r8, #0
 80084a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084a6:	f104 0a1a 	add.w	sl, r4, #26
 80084aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084ae:	1a9b      	subs	r3, r3, r2
 80084b0:	eba3 0309 	sub.w	r3, r3, r9
 80084b4:	4543      	cmp	r3, r8
 80084b6:	f77f af79 	ble.w	80083ac <_printf_float+0x250>
 80084ba:	2301      	movs	r3, #1
 80084bc:	4652      	mov	r2, sl
 80084be:	4631      	mov	r1, r6
 80084c0:	4628      	mov	r0, r5
 80084c2:	47b8      	blx	r7
 80084c4:	3001      	adds	r0, #1
 80084c6:	f43f aeaa 	beq.w	800821e <_printf_float+0xc2>
 80084ca:	f108 0801 	add.w	r8, r8, #1
 80084ce:	e7ec      	b.n	80084aa <_printf_float+0x34e>
 80084d0:	4613      	mov	r3, r2
 80084d2:	4631      	mov	r1, r6
 80084d4:	4642      	mov	r2, r8
 80084d6:	4628      	mov	r0, r5
 80084d8:	47b8      	blx	r7
 80084da:	3001      	adds	r0, #1
 80084dc:	d1c0      	bne.n	8008460 <_printf_float+0x304>
 80084de:	e69e      	b.n	800821e <_printf_float+0xc2>
 80084e0:	2301      	movs	r3, #1
 80084e2:	4631      	mov	r1, r6
 80084e4:	4628      	mov	r0, r5
 80084e6:	9205      	str	r2, [sp, #20]
 80084e8:	47b8      	blx	r7
 80084ea:	3001      	adds	r0, #1
 80084ec:	f43f ae97 	beq.w	800821e <_printf_float+0xc2>
 80084f0:	9a05      	ldr	r2, [sp, #20]
 80084f2:	f10b 0b01 	add.w	fp, fp, #1
 80084f6:	e7b9      	b.n	800846c <_printf_float+0x310>
 80084f8:	ee18 3a10 	vmov	r3, s16
 80084fc:	4652      	mov	r2, sl
 80084fe:	4631      	mov	r1, r6
 8008500:	4628      	mov	r0, r5
 8008502:	47b8      	blx	r7
 8008504:	3001      	adds	r0, #1
 8008506:	d1be      	bne.n	8008486 <_printf_float+0x32a>
 8008508:	e689      	b.n	800821e <_printf_float+0xc2>
 800850a:	9a05      	ldr	r2, [sp, #20]
 800850c:	464b      	mov	r3, r9
 800850e:	4442      	add	r2, r8
 8008510:	4631      	mov	r1, r6
 8008512:	4628      	mov	r0, r5
 8008514:	47b8      	blx	r7
 8008516:	3001      	adds	r0, #1
 8008518:	d1c1      	bne.n	800849e <_printf_float+0x342>
 800851a:	e680      	b.n	800821e <_printf_float+0xc2>
 800851c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800851e:	2a01      	cmp	r2, #1
 8008520:	dc01      	bgt.n	8008526 <_printf_float+0x3ca>
 8008522:	07db      	lsls	r3, r3, #31
 8008524:	d538      	bpl.n	8008598 <_printf_float+0x43c>
 8008526:	2301      	movs	r3, #1
 8008528:	4642      	mov	r2, r8
 800852a:	4631      	mov	r1, r6
 800852c:	4628      	mov	r0, r5
 800852e:	47b8      	blx	r7
 8008530:	3001      	adds	r0, #1
 8008532:	f43f ae74 	beq.w	800821e <_printf_float+0xc2>
 8008536:	ee18 3a10 	vmov	r3, s16
 800853a:	4652      	mov	r2, sl
 800853c:	4631      	mov	r1, r6
 800853e:	4628      	mov	r0, r5
 8008540:	47b8      	blx	r7
 8008542:	3001      	adds	r0, #1
 8008544:	f43f ae6b 	beq.w	800821e <_printf_float+0xc2>
 8008548:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800854c:	2200      	movs	r2, #0
 800854e:	2300      	movs	r3, #0
 8008550:	f7f8 fac2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008554:	b9d8      	cbnz	r0, 800858e <_printf_float+0x432>
 8008556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008558:	f108 0201 	add.w	r2, r8, #1
 800855c:	3b01      	subs	r3, #1
 800855e:	4631      	mov	r1, r6
 8008560:	4628      	mov	r0, r5
 8008562:	47b8      	blx	r7
 8008564:	3001      	adds	r0, #1
 8008566:	d10e      	bne.n	8008586 <_printf_float+0x42a>
 8008568:	e659      	b.n	800821e <_printf_float+0xc2>
 800856a:	2301      	movs	r3, #1
 800856c:	4652      	mov	r2, sl
 800856e:	4631      	mov	r1, r6
 8008570:	4628      	mov	r0, r5
 8008572:	47b8      	blx	r7
 8008574:	3001      	adds	r0, #1
 8008576:	f43f ae52 	beq.w	800821e <_printf_float+0xc2>
 800857a:	f108 0801 	add.w	r8, r8, #1
 800857e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008580:	3b01      	subs	r3, #1
 8008582:	4543      	cmp	r3, r8
 8008584:	dcf1      	bgt.n	800856a <_printf_float+0x40e>
 8008586:	464b      	mov	r3, r9
 8008588:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800858c:	e6dc      	b.n	8008348 <_printf_float+0x1ec>
 800858e:	f04f 0800 	mov.w	r8, #0
 8008592:	f104 0a1a 	add.w	sl, r4, #26
 8008596:	e7f2      	b.n	800857e <_printf_float+0x422>
 8008598:	2301      	movs	r3, #1
 800859a:	4642      	mov	r2, r8
 800859c:	e7df      	b.n	800855e <_printf_float+0x402>
 800859e:	2301      	movs	r3, #1
 80085a0:	464a      	mov	r2, r9
 80085a2:	4631      	mov	r1, r6
 80085a4:	4628      	mov	r0, r5
 80085a6:	47b8      	blx	r7
 80085a8:	3001      	adds	r0, #1
 80085aa:	f43f ae38 	beq.w	800821e <_printf_float+0xc2>
 80085ae:	f108 0801 	add.w	r8, r8, #1
 80085b2:	68e3      	ldr	r3, [r4, #12]
 80085b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085b6:	1a5b      	subs	r3, r3, r1
 80085b8:	4543      	cmp	r3, r8
 80085ba:	dcf0      	bgt.n	800859e <_printf_float+0x442>
 80085bc:	e6fa      	b.n	80083b4 <_printf_float+0x258>
 80085be:	f04f 0800 	mov.w	r8, #0
 80085c2:	f104 0919 	add.w	r9, r4, #25
 80085c6:	e7f4      	b.n	80085b2 <_printf_float+0x456>

080085c8 <_printf_common>:
 80085c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085cc:	4616      	mov	r6, r2
 80085ce:	4699      	mov	r9, r3
 80085d0:	688a      	ldr	r2, [r1, #8]
 80085d2:	690b      	ldr	r3, [r1, #16]
 80085d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085d8:	4293      	cmp	r3, r2
 80085da:	bfb8      	it	lt
 80085dc:	4613      	movlt	r3, r2
 80085de:	6033      	str	r3, [r6, #0]
 80085e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085e4:	4607      	mov	r7, r0
 80085e6:	460c      	mov	r4, r1
 80085e8:	b10a      	cbz	r2, 80085ee <_printf_common+0x26>
 80085ea:	3301      	adds	r3, #1
 80085ec:	6033      	str	r3, [r6, #0]
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	0699      	lsls	r1, r3, #26
 80085f2:	bf42      	ittt	mi
 80085f4:	6833      	ldrmi	r3, [r6, #0]
 80085f6:	3302      	addmi	r3, #2
 80085f8:	6033      	strmi	r3, [r6, #0]
 80085fa:	6825      	ldr	r5, [r4, #0]
 80085fc:	f015 0506 	ands.w	r5, r5, #6
 8008600:	d106      	bne.n	8008610 <_printf_common+0x48>
 8008602:	f104 0a19 	add.w	sl, r4, #25
 8008606:	68e3      	ldr	r3, [r4, #12]
 8008608:	6832      	ldr	r2, [r6, #0]
 800860a:	1a9b      	subs	r3, r3, r2
 800860c:	42ab      	cmp	r3, r5
 800860e:	dc26      	bgt.n	800865e <_printf_common+0x96>
 8008610:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008614:	1e13      	subs	r3, r2, #0
 8008616:	6822      	ldr	r2, [r4, #0]
 8008618:	bf18      	it	ne
 800861a:	2301      	movne	r3, #1
 800861c:	0692      	lsls	r2, r2, #26
 800861e:	d42b      	bmi.n	8008678 <_printf_common+0xb0>
 8008620:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008624:	4649      	mov	r1, r9
 8008626:	4638      	mov	r0, r7
 8008628:	47c0      	blx	r8
 800862a:	3001      	adds	r0, #1
 800862c:	d01e      	beq.n	800866c <_printf_common+0xa4>
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	68e5      	ldr	r5, [r4, #12]
 8008632:	6832      	ldr	r2, [r6, #0]
 8008634:	f003 0306 	and.w	r3, r3, #6
 8008638:	2b04      	cmp	r3, #4
 800863a:	bf08      	it	eq
 800863c:	1aad      	subeq	r5, r5, r2
 800863e:	68a3      	ldr	r3, [r4, #8]
 8008640:	6922      	ldr	r2, [r4, #16]
 8008642:	bf0c      	ite	eq
 8008644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008648:	2500      	movne	r5, #0
 800864a:	4293      	cmp	r3, r2
 800864c:	bfc4      	itt	gt
 800864e:	1a9b      	subgt	r3, r3, r2
 8008650:	18ed      	addgt	r5, r5, r3
 8008652:	2600      	movs	r6, #0
 8008654:	341a      	adds	r4, #26
 8008656:	42b5      	cmp	r5, r6
 8008658:	d11a      	bne.n	8008690 <_printf_common+0xc8>
 800865a:	2000      	movs	r0, #0
 800865c:	e008      	b.n	8008670 <_printf_common+0xa8>
 800865e:	2301      	movs	r3, #1
 8008660:	4652      	mov	r2, sl
 8008662:	4649      	mov	r1, r9
 8008664:	4638      	mov	r0, r7
 8008666:	47c0      	blx	r8
 8008668:	3001      	adds	r0, #1
 800866a:	d103      	bne.n	8008674 <_printf_common+0xac>
 800866c:	f04f 30ff 	mov.w	r0, #4294967295
 8008670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008674:	3501      	adds	r5, #1
 8008676:	e7c6      	b.n	8008606 <_printf_common+0x3e>
 8008678:	18e1      	adds	r1, r4, r3
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	2030      	movs	r0, #48	; 0x30
 800867e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008682:	4422      	add	r2, r4
 8008684:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008688:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800868c:	3302      	adds	r3, #2
 800868e:	e7c7      	b.n	8008620 <_printf_common+0x58>
 8008690:	2301      	movs	r3, #1
 8008692:	4622      	mov	r2, r4
 8008694:	4649      	mov	r1, r9
 8008696:	4638      	mov	r0, r7
 8008698:	47c0      	blx	r8
 800869a:	3001      	adds	r0, #1
 800869c:	d0e6      	beq.n	800866c <_printf_common+0xa4>
 800869e:	3601      	adds	r6, #1
 80086a0:	e7d9      	b.n	8008656 <_printf_common+0x8e>
	...

080086a4 <_printf_i>:
 80086a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086a8:	7e0f      	ldrb	r7, [r1, #24]
 80086aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086ac:	2f78      	cmp	r7, #120	; 0x78
 80086ae:	4691      	mov	r9, r2
 80086b0:	4680      	mov	r8, r0
 80086b2:	460c      	mov	r4, r1
 80086b4:	469a      	mov	sl, r3
 80086b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086ba:	d807      	bhi.n	80086cc <_printf_i+0x28>
 80086bc:	2f62      	cmp	r7, #98	; 0x62
 80086be:	d80a      	bhi.n	80086d6 <_printf_i+0x32>
 80086c0:	2f00      	cmp	r7, #0
 80086c2:	f000 80d8 	beq.w	8008876 <_printf_i+0x1d2>
 80086c6:	2f58      	cmp	r7, #88	; 0x58
 80086c8:	f000 80a3 	beq.w	8008812 <_printf_i+0x16e>
 80086cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086d4:	e03a      	b.n	800874c <_printf_i+0xa8>
 80086d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086da:	2b15      	cmp	r3, #21
 80086dc:	d8f6      	bhi.n	80086cc <_printf_i+0x28>
 80086de:	a101      	add	r1, pc, #4	; (adr r1, 80086e4 <_printf_i+0x40>)
 80086e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086e4:	0800873d 	.word	0x0800873d
 80086e8:	08008751 	.word	0x08008751
 80086ec:	080086cd 	.word	0x080086cd
 80086f0:	080086cd 	.word	0x080086cd
 80086f4:	080086cd 	.word	0x080086cd
 80086f8:	080086cd 	.word	0x080086cd
 80086fc:	08008751 	.word	0x08008751
 8008700:	080086cd 	.word	0x080086cd
 8008704:	080086cd 	.word	0x080086cd
 8008708:	080086cd 	.word	0x080086cd
 800870c:	080086cd 	.word	0x080086cd
 8008710:	0800885d 	.word	0x0800885d
 8008714:	08008781 	.word	0x08008781
 8008718:	0800883f 	.word	0x0800883f
 800871c:	080086cd 	.word	0x080086cd
 8008720:	080086cd 	.word	0x080086cd
 8008724:	0800887f 	.word	0x0800887f
 8008728:	080086cd 	.word	0x080086cd
 800872c:	08008781 	.word	0x08008781
 8008730:	080086cd 	.word	0x080086cd
 8008734:	080086cd 	.word	0x080086cd
 8008738:	08008847 	.word	0x08008847
 800873c:	682b      	ldr	r3, [r5, #0]
 800873e:	1d1a      	adds	r2, r3, #4
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	602a      	str	r2, [r5, #0]
 8008744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800874c:	2301      	movs	r3, #1
 800874e:	e0a3      	b.n	8008898 <_printf_i+0x1f4>
 8008750:	6820      	ldr	r0, [r4, #0]
 8008752:	6829      	ldr	r1, [r5, #0]
 8008754:	0606      	lsls	r6, r0, #24
 8008756:	f101 0304 	add.w	r3, r1, #4
 800875a:	d50a      	bpl.n	8008772 <_printf_i+0xce>
 800875c:	680e      	ldr	r6, [r1, #0]
 800875e:	602b      	str	r3, [r5, #0]
 8008760:	2e00      	cmp	r6, #0
 8008762:	da03      	bge.n	800876c <_printf_i+0xc8>
 8008764:	232d      	movs	r3, #45	; 0x2d
 8008766:	4276      	negs	r6, r6
 8008768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800876c:	485e      	ldr	r0, [pc, #376]	; (80088e8 <_printf_i+0x244>)
 800876e:	230a      	movs	r3, #10
 8008770:	e019      	b.n	80087a6 <_printf_i+0x102>
 8008772:	680e      	ldr	r6, [r1, #0]
 8008774:	602b      	str	r3, [r5, #0]
 8008776:	f010 0f40 	tst.w	r0, #64	; 0x40
 800877a:	bf18      	it	ne
 800877c:	b236      	sxthne	r6, r6
 800877e:	e7ef      	b.n	8008760 <_printf_i+0xbc>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	6820      	ldr	r0, [r4, #0]
 8008784:	1d19      	adds	r1, r3, #4
 8008786:	6029      	str	r1, [r5, #0]
 8008788:	0601      	lsls	r1, r0, #24
 800878a:	d501      	bpl.n	8008790 <_printf_i+0xec>
 800878c:	681e      	ldr	r6, [r3, #0]
 800878e:	e002      	b.n	8008796 <_printf_i+0xf2>
 8008790:	0646      	lsls	r6, r0, #25
 8008792:	d5fb      	bpl.n	800878c <_printf_i+0xe8>
 8008794:	881e      	ldrh	r6, [r3, #0]
 8008796:	4854      	ldr	r0, [pc, #336]	; (80088e8 <_printf_i+0x244>)
 8008798:	2f6f      	cmp	r7, #111	; 0x6f
 800879a:	bf0c      	ite	eq
 800879c:	2308      	moveq	r3, #8
 800879e:	230a      	movne	r3, #10
 80087a0:	2100      	movs	r1, #0
 80087a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087a6:	6865      	ldr	r5, [r4, #4]
 80087a8:	60a5      	str	r5, [r4, #8]
 80087aa:	2d00      	cmp	r5, #0
 80087ac:	bfa2      	ittt	ge
 80087ae:	6821      	ldrge	r1, [r4, #0]
 80087b0:	f021 0104 	bicge.w	r1, r1, #4
 80087b4:	6021      	strge	r1, [r4, #0]
 80087b6:	b90e      	cbnz	r6, 80087bc <_printf_i+0x118>
 80087b8:	2d00      	cmp	r5, #0
 80087ba:	d04d      	beq.n	8008858 <_printf_i+0x1b4>
 80087bc:	4615      	mov	r5, r2
 80087be:	fbb6 f1f3 	udiv	r1, r6, r3
 80087c2:	fb03 6711 	mls	r7, r3, r1, r6
 80087c6:	5dc7      	ldrb	r7, [r0, r7]
 80087c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087cc:	4637      	mov	r7, r6
 80087ce:	42bb      	cmp	r3, r7
 80087d0:	460e      	mov	r6, r1
 80087d2:	d9f4      	bls.n	80087be <_printf_i+0x11a>
 80087d4:	2b08      	cmp	r3, #8
 80087d6:	d10b      	bne.n	80087f0 <_printf_i+0x14c>
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	07de      	lsls	r6, r3, #31
 80087dc:	d508      	bpl.n	80087f0 <_printf_i+0x14c>
 80087de:	6923      	ldr	r3, [r4, #16]
 80087e0:	6861      	ldr	r1, [r4, #4]
 80087e2:	4299      	cmp	r1, r3
 80087e4:	bfde      	ittt	le
 80087e6:	2330      	movle	r3, #48	; 0x30
 80087e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087f0:	1b52      	subs	r2, r2, r5
 80087f2:	6122      	str	r2, [r4, #16]
 80087f4:	f8cd a000 	str.w	sl, [sp]
 80087f8:	464b      	mov	r3, r9
 80087fa:	aa03      	add	r2, sp, #12
 80087fc:	4621      	mov	r1, r4
 80087fe:	4640      	mov	r0, r8
 8008800:	f7ff fee2 	bl	80085c8 <_printf_common>
 8008804:	3001      	adds	r0, #1
 8008806:	d14c      	bne.n	80088a2 <_printf_i+0x1fe>
 8008808:	f04f 30ff 	mov.w	r0, #4294967295
 800880c:	b004      	add	sp, #16
 800880e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008812:	4835      	ldr	r0, [pc, #212]	; (80088e8 <_printf_i+0x244>)
 8008814:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008818:	6829      	ldr	r1, [r5, #0]
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008820:	6029      	str	r1, [r5, #0]
 8008822:	061d      	lsls	r5, r3, #24
 8008824:	d514      	bpl.n	8008850 <_printf_i+0x1ac>
 8008826:	07df      	lsls	r7, r3, #31
 8008828:	bf44      	itt	mi
 800882a:	f043 0320 	orrmi.w	r3, r3, #32
 800882e:	6023      	strmi	r3, [r4, #0]
 8008830:	b91e      	cbnz	r6, 800883a <_printf_i+0x196>
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	f023 0320 	bic.w	r3, r3, #32
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	2310      	movs	r3, #16
 800883c:	e7b0      	b.n	80087a0 <_printf_i+0xfc>
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	f043 0320 	orr.w	r3, r3, #32
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	2378      	movs	r3, #120	; 0x78
 8008848:	4828      	ldr	r0, [pc, #160]	; (80088ec <_printf_i+0x248>)
 800884a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800884e:	e7e3      	b.n	8008818 <_printf_i+0x174>
 8008850:	0659      	lsls	r1, r3, #25
 8008852:	bf48      	it	mi
 8008854:	b2b6      	uxthmi	r6, r6
 8008856:	e7e6      	b.n	8008826 <_printf_i+0x182>
 8008858:	4615      	mov	r5, r2
 800885a:	e7bb      	b.n	80087d4 <_printf_i+0x130>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	6826      	ldr	r6, [r4, #0]
 8008860:	6961      	ldr	r1, [r4, #20]
 8008862:	1d18      	adds	r0, r3, #4
 8008864:	6028      	str	r0, [r5, #0]
 8008866:	0635      	lsls	r5, r6, #24
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	d501      	bpl.n	8008870 <_printf_i+0x1cc>
 800886c:	6019      	str	r1, [r3, #0]
 800886e:	e002      	b.n	8008876 <_printf_i+0x1d2>
 8008870:	0670      	lsls	r0, r6, #25
 8008872:	d5fb      	bpl.n	800886c <_printf_i+0x1c8>
 8008874:	8019      	strh	r1, [r3, #0]
 8008876:	2300      	movs	r3, #0
 8008878:	6123      	str	r3, [r4, #16]
 800887a:	4615      	mov	r5, r2
 800887c:	e7ba      	b.n	80087f4 <_printf_i+0x150>
 800887e:	682b      	ldr	r3, [r5, #0]
 8008880:	1d1a      	adds	r2, r3, #4
 8008882:	602a      	str	r2, [r5, #0]
 8008884:	681d      	ldr	r5, [r3, #0]
 8008886:	6862      	ldr	r2, [r4, #4]
 8008888:	2100      	movs	r1, #0
 800888a:	4628      	mov	r0, r5
 800888c:	f7f7 fcb0 	bl	80001f0 <memchr>
 8008890:	b108      	cbz	r0, 8008896 <_printf_i+0x1f2>
 8008892:	1b40      	subs	r0, r0, r5
 8008894:	6060      	str	r0, [r4, #4]
 8008896:	6863      	ldr	r3, [r4, #4]
 8008898:	6123      	str	r3, [r4, #16]
 800889a:	2300      	movs	r3, #0
 800889c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088a0:	e7a8      	b.n	80087f4 <_printf_i+0x150>
 80088a2:	6923      	ldr	r3, [r4, #16]
 80088a4:	462a      	mov	r2, r5
 80088a6:	4649      	mov	r1, r9
 80088a8:	4640      	mov	r0, r8
 80088aa:	47d0      	blx	sl
 80088ac:	3001      	adds	r0, #1
 80088ae:	d0ab      	beq.n	8008808 <_printf_i+0x164>
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	079b      	lsls	r3, r3, #30
 80088b4:	d413      	bmi.n	80088de <_printf_i+0x23a>
 80088b6:	68e0      	ldr	r0, [r4, #12]
 80088b8:	9b03      	ldr	r3, [sp, #12]
 80088ba:	4298      	cmp	r0, r3
 80088bc:	bfb8      	it	lt
 80088be:	4618      	movlt	r0, r3
 80088c0:	e7a4      	b.n	800880c <_printf_i+0x168>
 80088c2:	2301      	movs	r3, #1
 80088c4:	4632      	mov	r2, r6
 80088c6:	4649      	mov	r1, r9
 80088c8:	4640      	mov	r0, r8
 80088ca:	47d0      	blx	sl
 80088cc:	3001      	adds	r0, #1
 80088ce:	d09b      	beq.n	8008808 <_printf_i+0x164>
 80088d0:	3501      	adds	r5, #1
 80088d2:	68e3      	ldr	r3, [r4, #12]
 80088d4:	9903      	ldr	r1, [sp, #12]
 80088d6:	1a5b      	subs	r3, r3, r1
 80088d8:	42ab      	cmp	r3, r5
 80088da:	dcf2      	bgt.n	80088c2 <_printf_i+0x21e>
 80088dc:	e7eb      	b.n	80088b6 <_printf_i+0x212>
 80088de:	2500      	movs	r5, #0
 80088e0:	f104 0619 	add.w	r6, r4, #25
 80088e4:	e7f5      	b.n	80088d2 <_printf_i+0x22e>
 80088e6:	bf00      	nop
 80088e8:	0800aace 	.word	0x0800aace
 80088ec:	0800aadf 	.word	0x0800aadf

080088f0 <quorem>:
 80088f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f4:	6903      	ldr	r3, [r0, #16]
 80088f6:	690c      	ldr	r4, [r1, #16]
 80088f8:	42a3      	cmp	r3, r4
 80088fa:	4607      	mov	r7, r0
 80088fc:	f2c0 8081 	blt.w	8008a02 <quorem+0x112>
 8008900:	3c01      	subs	r4, #1
 8008902:	f101 0814 	add.w	r8, r1, #20
 8008906:	f100 0514 	add.w	r5, r0, #20
 800890a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800890e:	9301      	str	r3, [sp, #4]
 8008910:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008914:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008918:	3301      	adds	r3, #1
 800891a:	429a      	cmp	r2, r3
 800891c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008920:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008924:	fbb2 f6f3 	udiv	r6, r2, r3
 8008928:	d331      	bcc.n	800898e <quorem+0x9e>
 800892a:	f04f 0e00 	mov.w	lr, #0
 800892e:	4640      	mov	r0, r8
 8008930:	46ac      	mov	ip, r5
 8008932:	46f2      	mov	sl, lr
 8008934:	f850 2b04 	ldr.w	r2, [r0], #4
 8008938:	b293      	uxth	r3, r2
 800893a:	fb06 e303 	mla	r3, r6, r3, lr
 800893e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008942:	b29b      	uxth	r3, r3
 8008944:	ebaa 0303 	sub.w	r3, sl, r3
 8008948:	f8dc a000 	ldr.w	sl, [ip]
 800894c:	0c12      	lsrs	r2, r2, #16
 800894e:	fa13 f38a 	uxtah	r3, r3, sl
 8008952:	fb06 e202 	mla	r2, r6, r2, lr
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	9b00      	ldr	r3, [sp, #0]
 800895a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800895e:	b292      	uxth	r2, r2
 8008960:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008964:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008968:	f8bd 3000 	ldrh.w	r3, [sp]
 800896c:	4581      	cmp	r9, r0
 800896e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008972:	f84c 3b04 	str.w	r3, [ip], #4
 8008976:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800897a:	d2db      	bcs.n	8008934 <quorem+0x44>
 800897c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008980:	b92b      	cbnz	r3, 800898e <quorem+0x9e>
 8008982:	9b01      	ldr	r3, [sp, #4]
 8008984:	3b04      	subs	r3, #4
 8008986:	429d      	cmp	r5, r3
 8008988:	461a      	mov	r2, r3
 800898a:	d32e      	bcc.n	80089ea <quorem+0xfa>
 800898c:	613c      	str	r4, [r7, #16]
 800898e:	4638      	mov	r0, r7
 8008990:	f001 f8c4 	bl	8009b1c <__mcmp>
 8008994:	2800      	cmp	r0, #0
 8008996:	db24      	blt.n	80089e2 <quorem+0xf2>
 8008998:	3601      	adds	r6, #1
 800899a:	4628      	mov	r0, r5
 800899c:	f04f 0c00 	mov.w	ip, #0
 80089a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80089a4:	f8d0 e000 	ldr.w	lr, [r0]
 80089a8:	b293      	uxth	r3, r2
 80089aa:	ebac 0303 	sub.w	r3, ip, r3
 80089ae:	0c12      	lsrs	r2, r2, #16
 80089b0:	fa13 f38e 	uxtah	r3, r3, lr
 80089b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80089b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089bc:	b29b      	uxth	r3, r3
 80089be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089c2:	45c1      	cmp	r9, r8
 80089c4:	f840 3b04 	str.w	r3, [r0], #4
 80089c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80089cc:	d2e8      	bcs.n	80089a0 <quorem+0xb0>
 80089ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089d6:	b922      	cbnz	r2, 80089e2 <quorem+0xf2>
 80089d8:	3b04      	subs	r3, #4
 80089da:	429d      	cmp	r5, r3
 80089dc:	461a      	mov	r2, r3
 80089de:	d30a      	bcc.n	80089f6 <quorem+0x106>
 80089e0:	613c      	str	r4, [r7, #16]
 80089e2:	4630      	mov	r0, r6
 80089e4:	b003      	add	sp, #12
 80089e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ea:	6812      	ldr	r2, [r2, #0]
 80089ec:	3b04      	subs	r3, #4
 80089ee:	2a00      	cmp	r2, #0
 80089f0:	d1cc      	bne.n	800898c <quorem+0x9c>
 80089f2:	3c01      	subs	r4, #1
 80089f4:	e7c7      	b.n	8008986 <quorem+0x96>
 80089f6:	6812      	ldr	r2, [r2, #0]
 80089f8:	3b04      	subs	r3, #4
 80089fa:	2a00      	cmp	r2, #0
 80089fc:	d1f0      	bne.n	80089e0 <quorem+0xf0>
 80089fe:	3c01      	subs	r4, #1
 8008a00:	e7eb      	b.n	80089da <quorem+0xea>
 8008a02:	2000      	movs	r0, #0
 8008a04:	e7ee      	b.n	80089e4 <quorem+0xf4>
	...

08008a08 <_dtoa_r>:
 8008a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0c:	ed2d 8b04 	vpush	{d8-d9}
 8008a10:	ec57 6b10 	vmov	r6, r7, d0
 8008a14:	b093      	sub	sp, #76	; 0x4c
 8008a16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a1c:	9106      	str	r1, [sp, #24]
 8008a1e:	ee10 aa10 	vmov	sl, s0
 8008a22:	4604      	mov	r4, r0
 8008a24:	9209      	str	r2, [sp, #36]	; 0x24
 8008a26:	930c      	str	r3, [sp, #48]	; 0x30
 8008a28:	46bb      	mov	fp, r7
 8008a2a:	b975      	cbnz	r5, 8008a4a <_dtoa_r+0x42>
 8008a2c:	2010      	movs	r0, #16
 8008a2e:	f000 fddd 	bl	80095ec <malloc>
 8008a32:	4602      	mov	r2, r0
 8008a34:	6260      	str	r0, [r4, #36]	; 0x24
 8008a36:	b920      	cbnz	r0, 8008a42 <_dtoa_r+0x3a>
 8008a38:	4ba7      	ldr	r3, [pc, #668]	; (8008cd8 <_dtoa_r+0x2d0>)
 8008a3a:	21ea      	movs	r1, #234	; 0xea
 8008a3c:	48a7      	ldr	r0, [pc, #668]	; (8008cdc <_dtoa_r+0x2d4>)
 8008a3e:	f001 fa75 	bl	8009f2c <__assert_func>
 8008a42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a46:	6005      	str	r5, [r0, #0]
 8008a48:	60c5      	str	r5, [r0, #12]
 8008a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a4c:	6819      	ldr	r1, [r3, #0]
 8008a4e:	b151      	cbz	r1, 8008a66 <_dtoa_r+0x5e>
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	604a      	str	r2, [r1, #4]
 8008a54:	2301      	movs	r3, #1
 8008a56:	4093      	lsls	r3, r2
 8008a58:	608b      	str	r3, [r1, #8]
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 fe1c 	bl	8009698 <_Bfree>
 8008a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]
 8008a66:	1e3b      	subs	r3, r7, #0
 8008a68:	bfaa      	itet	ge
 8008a6a:	2300      	movge	r3, #0
 8008a6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008a70:	f8c8 3000 	strge.w	r3, [r8]
 8008a74:	4b9a      	ldr	r3, [pc, #616]	; (8008ce0 <_dtoa_r+0x2d8>)
 8008a76:	bfbc      	itt	lt
 8008a78:	2201      	movlt	r2, #1
 8008a7a:	f8c8 2000 	strlt.w	r2, [r8]
 8008a7e:	ea33 030b 	bics.w	r3, r3, fp
 8008a82:	d11b      	bne.n	8008abc <_dtoa_r+0xb4>
 8008a84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a86:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a8a:	6013      	str	r3, [r2, #0]
 8008a8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a90:	4333      	orrs	r3, r6
 8008a92:	f000 8592 	beq.w	80095ba <_dtoa_r+0xbb2>
 8008a96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a98:	b963      	cbnz	r3, 8008ab4 <_dtoa_r+0xac>
 8008a9a:	4b92      	ldr	r3, [pc, #584]	; (8008ce4 <_dtoa_r+0x2dc>)
 8008a9c:	e022      	b.n	8008ae4 <_dtoa_r+0xdc>
 8008a9e:	4b92      	ldr	r3, [pc, #584]	; (8008ce8 <_dtoa_r+0x2e0>)
 8008aa0:	9301      	str	r3, [sp, #4]
 8008aa2:	3308      	adds	r3, #8
 8008aa4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008aa6:	6013      	str	r3, [r2, #0]
 8008aa8:	9801      	ldr	r0, [sp, #4]
 8008aaa:	b013      	add	sp, #76	; 0x4c
 8008aac:	ecbd 8b04 	vpop	{d8-d9}
 8008ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab4:	4b8b      	ldr	r3, [pc, #556]	; (8008ce4 <_dtoa_r+0x2dc>)
 8008ab6:	9301      	str	r3, [sp, #4]
 8008ab8:	3303      	adds	r3, #3
 8008aba:	e7f3      	b.n	8008aa4 <_dtoa_r+0x9c>
 8008abc:	2200      	movs	r2, #0
 8008abe:	2300      	movs	r3, #0
 8008ac0:	4650      	mov	r0, sl
 8008ac2:	4659      	mov	r1, fp
 8008ac4:	f7f8 f808 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ac8:	ec4b ab19 	vmov	d9, sl, fp
 8008acc:	4680      	mov	r8, r0
 8008ace:	b158      	cbz	r0, 8008ae8 <_dtoa_r+0xe0>
 8008ad0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 856b 	beq.w	80095b4 <_dtoa_r+0xbac>
 8008ade:	4883      	ldr	r0, [pc, #524]	; (8008cec <_dtoa_r+0x2e4>)
 8008ae0:	6018      	str	r0, [r3, #0]
 8008ae2:	1e43      	subs	r3, r0, #1
 8008ae4:	9301      	str	r3, [sp, #4]
 8008ae6:	e7df      	b.n	8008aa8 <_dtoa_r+0xa0>
 8008ae8:	ec4b ab10 	vmov	d0, sl, fp
 8008aec:	aa10      	add	r2, sp, #64	; 0x40
 8008aee:	a911      	add	r1, sp, #68	; 0x44
 8008af0:	4620      	mov	r0, r4
 8008af2:	f001 f8b9 	bl	8009c68 <__d2b>
 8008af6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008afa:	ee08 0a10 	vmov	s16, r0
 8008afe:	2d00      	cmp	r5, #0
 8008b00:	f000 8084 	beq.w	8008c0c <_dtoa_r+0x204>
 8008b04:	ee19 3a90 	vmov	r3, s19
 8008b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008b10:	4656      	mov	r6, sl
 8008b12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008b16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008b1e:	4b74      	ldr	r3, [pc, #464]	; (8008cf0 <_dtoa_r+0x2e8>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	4630      	mov	r0, r6
 8008b24:	4639      	mov	r1, r7
 8008b26:	f7f7 fbb7 	bl	8000298 <__aeabi_dsub>
 8008b2a:	a365      	add	r3, pc, #404	; (adr r3, 8008cc0 <_dtoa_r+0x2b8>)
 8008b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b30:	f7f7 fd6a 	bl	8000608 <__aeabi_dmul>
 8008b34:	a364      	add	r3, pc, #400	; (adr r3, 8008cc8 <_dtoa_r+0x2c0>)
 8008b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3a:	f7f7 fbaf 	bl	800029c <__adddf3>
 8008b3e:	4606      	mov	r6, r0
 8008b40:	4628      	mov	r0, r5
 8008b42:	460f      	mov	r7, r1
 8008b44:	f7f7 fcf6 	bl	8000534 <__aeabi_i2d>
 8008b48:	a361      	add	r3, pc, #388	; (adr r3, 8008cd0 <_dtoa_r+0x2c8>)
 8008b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4e:	f7f7 fd5b 	bl	8000608 <__aeabi_dmul>
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	4630      	mov	r0, r6
 8008b58:	4639      	mov	r1, r7
 8008b5a:	f7f7 fb9f 	bl	800029c <__adddf3>
 8008b5e:	4606      	mov	r6, r0
 8008b60:	460f      	mov	r7, r1
 8008b62:	f7f8 f801 	bl	8000b68 <__aeabi_d2iz>
 8008b66:	2200      	movs	r2, #0
 8008b68:	9000      	str	r0, [sp, #0]
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	4639      	mov	r1, r7
 8008b70:	f7f7 ffbc 	bl	8000aec <__aeabi_dcmplt>
 8008b74:	b150      	cbz	r0, 8008b8c <_dtoa_r+0x184>
 8008b76:	9800      	ldr	r0, [sp, #0]
 8008b78:	f7f7 fcdc 	bl	8000534 <__aeabi_i2d>
 8008b7c:	4632      	mov	r2, r6
 8008b7e:	463b      	mov	r3, r7
 8008b80:	f7f7 ffaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b84:	b910      	cbnz	r0, 8008b8c <_dtoa_r+0x184>
 8008b86:	9b00      	ldr	r3, [sp, #0]
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	9b00      	ldr	r3, [sp, #0]
 8008b8e:	2b16      	cmp	r3, #22
 8008b90:	d85a      	bhi.n	8008c48 <_dtoa_r+0x240>
 8008b92:	9a00      	ldr	r2, [sp, #0]
 8008b94:	4b57      	ldr	r3, [pc, #348]	; (8008cf4 <_dtoa_r+0x2ec>)
 8008b96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	ec51 0b19 	vmov	r0, r1, d9
 8008ba2:	f7f7 ffa3 	bl	8000aec <__aeabi_dcmplt>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d050      	beq.n	8008c4c <_dtoa_r+0x244>
 8008baa:	9b00      	ldr	r3, [sp, #0]
 8008bac:	3b01      	subs	r3, #1
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bb6:	1b5d      	subs	r5, r3, r5
 8008bb8:	1e6b      	subs	r3, r5, #1
 8008bba:	9305      	str	r3, [sp, #20]
 8008bbc:	bf45      	ittet	mi
 8008bbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008bc2:	9304      	strmi	r3, [sp, #16]
 8008bc4:	2300      	movpl	r3, #0
 8008bc6:	2300      	movmi	r3, #0
 8008bc8:	bf4c      	ite	mi
 8008bca:	9305      	strmi	r3, [sp, #20]
 8008bcc:	9304      	strpl	r3, [sp, #16]
 8008bce:	9b00      	ldr	r3, [sp, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	db3d      	blt.n	8008c50 <_dtoa_r+0x248>
 8008bd4:	9b05      	ldr	r3, [sp, #20]
 8008bd6:	9a00      	ldr	r2, [sp, #0]
 8008bd8:	920a      	str	r2, [sp, #40]	; 0x28
 8008bda:	4413      	add	r3, r2
 8008bdc:	9305      	str	r3, [sp, #20]
 8008bde:	2300      	movs	r3, #0
 8008be0:	9307      	str	r3, [sp, #28]
 8008be2:	9b06      	ldr	r3, [sp, #24]
 8008be4:	2b09      	cmp	r3, #9
 8008be6:	f200 8089 	bhi.w	8008cfc <_dtoa_r+0x2f4>
 8008bea:	2b05      	cmp	r3, #5
 8008bec:	bfc4      	itt	gt
 8008bee:	3b04      	subgt	r3, #4
 8008bf0:	9306      	strgt	r3, [sp, #24]
 8008bf2:	9b06      	ldr	r3, [sp, #24]
 8008bf4:	f1a3 0302 	sub.w	r3, r3, #2
 8008bf8:	bfcc      	ite	gt
 8008bfa:	2500      	movgt	r5, #0
 8008bfc:	2501      	movle	r5, #1
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	f200 8087 	bhi.w	8008d12 <_dtoa_r+0x30a>
 8008c04:	e8df f003 	tbb	[pc, r3]
 8008c08:	59383a2d 	.word	0x59383a2d
 8008c0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008c10:	441d      	add	r5, r3
 8008c12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c16:	2b20      	cmp	r3, #32
 8008c18:	bfc1      	itttt	gt
 8008c1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008c22:	fa0b f303 	lslgt.w	r3, fp, r3
 8008c26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008c2a:	bfda      	itte	le
 8008c2c:	f1c3 0320 	rsble	r3, r3, #32
 8008c30:	fa06 f003 	lslle.w	r0, r6, r3
 8008c34:	4318      	orrgt	r0, r3
 8008c36:	f7f7 fc6d 	bl	8000514 <__aeabi_ui2d>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	4606      	mov	r6, r0
 8008c3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008c42:	3d01      	subs	r5, #1
 8008c44:	930e      	str	r3, [sp, #56]	; 0x38
 8008c46:	e76a      	b.n	8008b1e <_dtoa_r+0x116>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e7b2      	b.n	8008bb2 <_dtoa_r+0x1aa>
 8008c4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c4e:	e7b1      	b.n	8008bb4 <_dtoa_r+0x1ac>
 8008c50:	9b04      	ldr	r3, [sp, #16]
 8008c52:	9a00      	ldr	r2, [sp, #0]
 8008c54:	1a9b      	subs	r3, r3, r2
 8008c56:	9304      	str	r3, [sp, #16]
 8008c58:	4253      	negs	r3, r2
 8008c5a:	9307      	str	r3, [sp, #28]
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c60:	e7bf      	b.n	8008be2 <_dtoa_r+0x1da>
 8008c62:	2300      	movs	r3, #0
 8008c64:	9308      	str	r3, [sp, #32]
 8008c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	dc55      	bgt.n	8008d18 <_dtoa_r+0x310>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c72:	461a      	mov	r2, r3
 8008c74:	9209      	str	r2, [sp, #36]	; 0x24
 8008c76:	e00c      	b.n	8008c92 <_dtoa_r+0x28a>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e7f3      	b.n	8008c64 <_dtoa_r+0x25c>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c80:	9308      	str	r3, [sp, #32]
 8008c82:	9b00      	ldr	r3, [sp, #0]
 8008c84:	4413      	add	r3, r2
 8008c86:	9302      	str	r3, [sp, #8]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	9303      	str	r3, [sp, #12]
 8008c8e:	bfb8      	it	lt
 8008c90:	2301      	movlt	r3, #1
 8008c92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c94:	2200      	movs	r2, #0
 8008c96:	6042      	str	r2, [r0, #4]
 8008c98:	2204      	movs	r2, #4
 8008c9a:	f102 0614 	add.w	r6, r2, #20
 8008c9e:	429e      	cmp	r6, r3
 8008ca0:	6841      	ldr	r1, [r0, #4]
 8008ca2:	d93d      	bls.n	8008d20 <_dtoa_r+0x318>
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	f000 fcb7 	bl	8009618 <_Balloc>
 8008caa:	9001      	str	r0, [sp, #4]
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d13b      	bne.n	8008d28 <_dtoa_r+0x320>
 8008cb0:	4b11      	ldr	r3, [pc, #68]	; (8008cf8 <_dtoa_r+0x2f0>)
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008cb8:	e6c0      	b.n	8008a3c <_dtoa_r+0x34>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e7df      	b.n	8008c7e <_dtoa_r+0x276>
 8008cbe:	bf00      	nop
 8008cc0:	636f4361 	.word	0x636f4361
 8008cc4:	3fd287a7 	.word	0x3fd287a7
 8008cc8:	8b60c8b3 	.word	0x8b60c8b3
 8008ccc:	3fc68a28 	.word	0x3fc68a28
 8008cd0:	509f79fb 	.word	0x509f79fb
 8008cd4:	3fd34413 	.word	0x3fd34413
 8008cd8:	0800aafd 	.word	0x0800aafd
 8008cdc:	0800ab14 	.word	0x0800ab14
 8008ce0:	7ff00000 	.word	0x7ff00000
 8008ce4:	0800aaf9 	.word	0x0800aaf9
 8008ce8:	0800aaf0 	.word	0x0800aaf0
 8008cec:	0800aacd 	.word	0x0800aacd
 8008cf0:	3ff80000 	.word	0x3ff80000
 8008cf4:	0800ac08 	.word	0x0800ac08
 8008cf8:	0800ab6f 	.word	0x0800ab6f
 8008cfc:	2501      	movs	r5, #1
 8008cfe:	2300      	movs	r3, #0
 8008d00:	9306      	str	r3, [sp, #24]
 8008d02:	9508      	str	r5, [sp, #32]
 8008d04:	f04f 33ff 	mov.w	r3, #4294967295
 8008d08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	2312      	movs	r3, #18
 8008d10:	e7b0      	b.n	8008c74 <_dtoa_r+0x26c>
 8008d12:	2301      	movs	r3, #1
 8008d14:	9308      	str	r3, [sp, #32]
 8008d16:	e7f5      	b.n	8008d04 <_dtoa_r+0x2fc>
 8008d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d1e:	e7b8      	b.n	8008c92 <_dtoa_r+0x28a>
 8008d20:	3101      	adds	r1, #1
 8008d22:	6041      	str	r1, [r0, #4]
 8008d24:	0052      	lsls	r2, r2, #1
 8008d26:	e7b8      	b.n	8008c9a <_dtoa_r+0x292>
 8008d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d2a:	9a01      	ldr	r2, [sp, #4]
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	9b03      	ldr	r3, [sp, #12]
 8008d30:	2b0e      	cmp	r3, #14
 8008d32:	f200 809d 	bhi.w	8008e70 <_dtoa_r+0x468>
 8008d36:	2d00      	cmp	r5, #0
 8008d38:	f000 809a 	beq.w	8008e70 <_dtoa_r+0x468>
 8008d3c:	9b00      	ldr	r3, [sp, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	dd32      	ble.n	8008da8 <_dtoa_r+0x3a0>
 8008d42:	4ab7      	ldr	r2, [pc, #732]	; (8009020 <_dtoa_r+0x618>)
 8008d44:	f003 030f 	and.w	r3, r3, #15
 8008d48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d50:	9b00      	ldr	r3, [sp, #0]
 8008d52:	05d8      	lsls	r0, r3, #23
 8008d54:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008d58:	d516      	bpl.n	8008d88 <_dtoa_r+0x380>
 8008d5a:	4bb2      	ldr	r3, [pc, #712]	; (8009024 <_dtoa_r+0x61c>)
 8008d5c:	ec51 0b19 	vmov	r0, r1, d9
 8008d60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d64:	f7f7 fd7a 	bl	800085c <__aeabi_ddiv>
 8008d68:	f007 070f 	and.w	r7, r7, #15
 8008d6c:	4682      	mov	sl, r0
 8008d6e:	468b      	mov	fp, r1
 8008d70:	2503      	movs	r5, #3
 8008d72:	4eac      	ldr	r6, [pc, #688]	; (8009024 <_dtoa_r+0x61c>)
 8008d74:	b957      	cbnz	r7, 8008d8c <_dtoa_r+0x384>
 8008d76:	4642      	mov	r2, r8
 8008d78:	464b      	mov	r3, r9
 8008d7a:	4650      	mov	r0, sl
 8008d7c:	4659      	mov	r1, fp
 8008d7e:	f7f7 fd6d 	bl	800085c <__aeabi_ddiv>
 8008d82:	4682      	mov	sl, r0
 8008d84:	468b      	mov	fp, r1
 8008d86:	e028      	b.n	8008dda <_dtoa_r+0x3d2>
 8008d88:	2502      	movs	r5, #2
 8008d8a:	e7f2      	b.n	8008d72 <_dtoa_r+0x36a>
 8008d8c:	07f9      	lsls	r1, r7, #31
 8008d8e:	d508      	bpl.n	8008da2 <_dtoa_r+0x39a>
 8008d90:	4640      	mov	r0, r8
 8008d92:	4649      	mov	r1, r9
 8008d94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d98:	f7f7 fc36 	bl	8000608 <__aeabi_dmul>
 8008d9c:	3501      	adds	r5, #1
 8008d9e:	4680      	mov	r8, r0
 8008da0:	4689      	mov	r9, r1
 8008da2:	107f      	asrs	r7, r7, #1
 8008da4:	3608      	adds	r6, #8
 8008da6:	e7e5      	b.n	8008d74 <_dtoa_r+0x36c>
 8008da8:	f000 809b 	beq.w	8008ee2 <_dtoa_r+0x4da>
 8008dac:	9b00      	ldr	r3, [sp, #0]
 8008dae:	4f9d      	ldr	r7, [pc, #628]	; (8009024 <_dtoa_r+0x61c>)
 8008db0:	425e      	negs	r6, r3
 8008db2:	4b9b      	ldr	r3, [pc, #620]	; (8009020 <_dtoa_r+0x618>)
 8008db4:	f006 020f 	and.w	r2, r6, #15
 8008db8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc0:	ec51 0b19 	vmov	r0, r1, d9
 8008dc4:	f7f7 fc20 	bl	8000608 <__aeabi_dmul>
 8008dc8:	1136      	asrs	r6, r6, #4
 8008dca:	4682      	mov	sl, r0
 8008dcc:	468b      	mov	fp, r1
 8008dce:	2300      	movs	r3, #0
 8008dd0:	2502      	movs	r5, #2
 8008dd2:	2e00      	cmp	r6, #0
 8008dd4:	d17a      	bne.n	8008ecc <_dtoa_r+0x4c4>
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1d3      	bne.n	8008d82 <_dtoa_r+0x37a>
 8008dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f000 8082 	beq.w	8008ee6 <_dtoa_r+0x4de>
 8008de2:	4b91      	ldr	r3, [pc, #580]	; (8009028 <_dtoa_r+0x620>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	4650      	mov	r0, sl
 8008de8:	4659      	mov	r1, fp
 8008dea:	f7f7 fe7f 	bl	8000aec <__aeabi_dcmplt>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d079      	beq.n	8008ee6 <_dtoa_r+0x4de>
 8008df2:	9b03      	ldr	r3, [sp, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d076      	beq.n	8008ee6 <_dtoa_r+0x4de>
 8008df8:	9b02      	ldr	r3, [sp, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	dd36      	ble.n	8008e6c <_dtoa_r+0x464>
 8008dfe:	9b00      	ldr	r3, [sp, #0]
 8008e00:	4650      	mov	r0, sl
 8008e02:	4659      	mov	r1, fp
 8008e04:	1e5f      	subs	r7, r3, #1
 8008e06:	2200      	movs	r2, #0
 8008e08:	4b88      	ldr	r3, [pc, #544]	; (800902c <_dtoa_r+0x624>)
 8008e0a:	f7f7 fbfd 	bl	8000608 <__aeabi_dmul>
 8008e0e:	9e02      	ldr	r6, [sp, #8]
 8008e10:	4682      	mov	sl, r0
 8008e12:	468b      	mov	fp, r1
 8008e14:	3501      	adds	r5, #1
 8008e16:	4628      	mov	r0, r5
 8008e18:	f7f7 fb8c 	bl	8000534 <__aeabi_i2d>
 8008e1c:	4652      	mov	r2, sl
 8008e1e:	465b      	mov	r3, fp
 8008e20:	f7f7 fbf2 	bl	8000608 <__aeabi_dmul>
 8008e24:	4b82      	ldr	r3, [pc, #520]	; (8009030 <_dtoa_r+0x628>)
 8008e26:	2200      	movs	r2, #0
 8008e28:	f7f7 fa38 	bl	800029c <__adddf3>
 8008e2c:	46d0      	mov	r8, sl
 8008e2e:	46d9      	mov	r9, fp
 8008e30:	4682      	mov	sl, r0
 8008e32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008e36:	2e00      	cmp	r6, #0
 8008e38:	d158      	bne.n	8008eec <_dtoa_r+0x4e4>
 8008e3a:	4b7e      	ldr	r3, [pc, #504]	; (8009034 <_dtoa_r+0x62c>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	4640      	mov	r0, r8
 8008e40:	4649      	mov	r1, r9
 8008e42:	f7f7 fa29 	bl	8000298 <__aeabi_dsub>
 8008e46:	4652      	mov	r2, sl
 8008e48:	465b      	mov	r3, fp
 8008e4a:	4680      	mov	r8, r0
 8008e4c:	4689      	mov	r9, r1
 8008e4e:	f7f7 fe6b 	bl	8000b28 <__aeabi_dcmpgt>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	f040 8295 	bne.w	8009382 <_dtoa_r+0x97a>
 8008e58:	4652      	mov	r2, sl
 8008e5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e5e:	4640      	mov	r0, r8
 8008e60:	4649      	mov	r1, r9
 8008e62:	f7f7 fe43 	bl	8000aec <__aeabi_dcmplt>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	f040 8289 	bne.w	800937e <_dtoa_r+0x976>
 8008e6c:	ec5b ab19 	vmov	sl, fp, d9
 8008e70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f2c0 8148 	blt.w	8009108 <_dtoa_r+0x700>
 8008e78:	9a00      	ldr	r2, [sp, #0]
 8008e7a:	2a0e      	cmp	r2, #14
 8008e7c:	f300 8144 	bgt.w	8009108 <_dtoa_r+0x700>
 8008e80:	4b67      	ldr	r3, [pc, #412]	; (8009020 <_dtoa_r+0x618>)
 8008e82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f280 80d5 	bge.w	800903c <_dtoa_r+0x634>
 8008e92:	9b03      	ldr	r3, [sp, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f300 80d1 	bgt.w	800903c <_dtoa_r+0x634>
 8008e9a:	f040 826f 	bne.w	800937c <_dtoa_r+0x974>
 8008e9e:	4b65      	ldr	r3, [pc, #404]	; (8009034 <_dtoa_r+0x62c>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	4640      	mov	r0, r8
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	f7f7 fbaf 	bl	8000608 <__aeabi_dmul>
 8008eaa:	4652      	mov	r2, sl
 8008eac:	465b      	mov	r3, fp
 8008eae:	f7f7 fe31 	bl	8000b14 <__aeabi_dcmpge>
 8008eb2:	9e03      	ldr	r6, [sp, #12]
 8008eb4:	4637      	mov	r7, r6
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	f040 8245 	bne.w	8009346 <_dtoa_r+0x93e>
 8008ebc:	9d01      	ldr	r5, [sp, #4]
 8008ebe:	2331      	movs	r3, #49	; 0x31
 8008ec0:	f805 3b01 	strb.w	r3, [r5], #1
 8008ec4:	9b00      	ldr	r3, [sp, #0]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	e240      	b.n	800934e <_dtoa_r+0x946>
 8008ecc:	07f2      	lsls	r2, r6, #31
 8008ece:	d505      	bpl.n	8008edc <_dtoa_r+0x4d4>
 8008ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ed4:	f7f7 fb98 	bl	8000608 <__aeabi_dmul>
 8008ed8:	3501      	adds	r5, #1
 8008eda:	2301      	movs	r3, #1
 8008edc:	1076      	asrs	r6, r6, #1
 8008ede:	3708      	adds	r7, #8
 8008ee0:	e777      	b.n	8008dd2 <_dtoa_r+0x3ca>
 8008ee2:	2502      	movs	r5, #2
 8008ee4:	e779      	b.n	8008dda <_dtoa_r+0x3d2>
 8008ee6:	9f00      	ldr	r7, [sp, #0]
 8008ee8:	9e03      	ldr	r6, [sp, #12]
 8008eea:	e794      	b.n	8008e16 <_dtoa_r+0x40e>
 8008eec:	9901      	ldr	r1, [sp, #4]
 8008eee:	4b4c      	ldr	r3, [pc, #304]	; (8009020 <_dtoa_r+0x618>)
 8008ef0:	4431      	add	r1, r6
 8008ef2:	910d      	str	r1, [sp, #52]	; 0x34
 8008ef4:	9908      	ldr	r1, [sp, #32]
 8008ef6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008efa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008efe:	2900      	cmp	r1, #0
 8008f00:	d043      	beq.n	8008f8a <_dtoa_r+0x582>
 8008f02:	494d      	ldr	r1, [pc, #308]	; (8009038 <_dtoa_r+0x630>)
 8008f04:	2000      	movs	r0, #0
 8008f06:	f7f7 fca9 	bl	800085c <__aeabi_ddiv>
 8008f0a:	4652      	mov	r2, sl
 8008f0c:	465b      	mov	r3, fp
 8008f0e:	f7f7 f9c3 	bl	8000298 <__aeabi_dsub>
 8008f12:	9d01      	ldr	r5, [sp, #4]
 8008f14:	4682      	mov	sl, r0
 8008f16:	468b      	mov	fp, r1
 8008f18:	4649      	mov	r1, r9
 8008f1a:	4640      	mov	r0, r8
 8008f1c:	f7f7 fe24 	bl	8000b68 <__aeabi_d2iz>
 8008f20:	4606      	mov	r6, r0
 8008f22:	f7f7 fb07 	bl	8000534 <__aeabi_i2d>
 8008f26:	4602      	mov	r2, r0
 8008f28:	460b      	mov	r3, r1
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	4649      	mov	r1, r9
 8008f2e:	f7f7 f9b3 	bl	8000298 <__aeabi_dsub>
 8008f32:	3630      	adds	r6, #48	; 0x30
 8008f34:	f805 6b01 	strb.w	r6, [r5], #1
 8008f38:	4652      	mov	r2, sl
 8008f3a:	465b      	mov	r3, fp
 8008f3c:	4680      	mov	r8, r0
 8008f3e:	4689      	mov	r9, r1
 8008f40:	f7f7 fdd4 	bl	8000aec <__aeabi_dcmplt>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d163      	bne.n	8009010 <_dtoa_r+0x608>
 8008f48:	4642      	mov	r2, r8
 8008f4a:	464b      	mov	r3, r9
 8008f4c:	4936      	ldr	r1, [pc, #216]	; (8009028 <_dtoa_r+0x620>)
 8008f4e:	2000      	movs	r0, #0
 8008f50:	f7f7 f9a2 	bl	8000298 <__aeabi_dsub>
 8008f54:	4652      	mov	r2, sl
 8008f56:	465b      	mov	r3, fp
 8008f58:	f7f7 fdc8 	bl	8000aec <__aeabi_dcmplt>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	f040 80b5 	bne.w	80090cc <_dtoa_r+0x6c4>
 8008f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f64:	429d      	cmp	r5, r3
 8008f66:	d081      	beq.n	8008e6c <_dtoa_r+0x464>
 8008f68:	4b30      	ldr	r3, [pc, #192]	; (800902c <_dtoa_r+0x624>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	4650      	mov	r0, sl
 8008f6e:	4659      	mov	r1, fp
 8008f70:	f7f7 fb4a 	bl	8000608 <__aeabi_dmul>
 8008f74:	4b2d      	ldr	r3, [pc, #180]	; (800902c <_dtoa_r+0x624>)
 8008f76:	4682      	mov	sl, r0
 8008f78:	468b      	mov	fp, r1
 8008f7a:	4640      	mov	r0, r8
 8008f7c:	4649      	mov	r1, r9
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f7f7 fb42 	bl	8000608 <__aeabi_dmul>
 8008f84:	4680      	mov	r8, r0
 8008f86:	4689      	mov	r9, r1
 8008f88:	e7c6      	b.n	8008f18 <_dtoa_r+0x510>
 8008f8a:	4650      	mov	r0, sl
 8008f8c:	4659      	mov	r1, fp
 8008f8e:	f7f7 fb3b 	bl	8000608 <__aeabi_dmul>
 8008f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f94:	9d01      	ldr	r5, [sp, #4]
 8008f96:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f98:	4682      	mov	sl, r0
 8008f9a:	468b      	mov	fp, r1
 8008f9c:	4649      	mov	r1, r9
 8008f9e:	4640      	mov	r0, r8
 8008fa0:	f7f7 fde2 	bl	8000b68 <__aeabi_d2iz>
 8008fa4:	4606      	mov	r6, r0
 8008fa6:	f7f7 fac5 	bl	8000534 <__aeabi_i2d>
 8008faa:	3630      	adds	r6, #48	; 0x30
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4640      	mov	r0, r8
 8008fb2:	4649      	mov	r1, r9
 8008fb4:	f7f7 f970 	bl	8000298 <__aeabi_dsub>
 8008fb8:	f805 6b01 	strb.w	r6, [r5], #1
 8008fbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fbe:	429d      	cmp	r5, r3
 8008fc0:	4680      	mov	r8, r0
 8008fc2:	4689      	mov	r9, r1
 8008fc4:	f04f 0200 	mov.w	r2, #0
 8008fc8:	d124      	bne.n	8009014 <_dtoa_r+0x60c>
 8008fca:	4b1b      	ldr	r3, [pc, #108]	; (8009038 <_dtoa_r+0x630>)
 8008fcc:	4650      	mov	r0, sl
 8008fce:	4659      	mov	r1, fp
 8008fd0:	f7f7 f964 	bl	800029c <__adddf3>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4640      	mov	r0, r8
 8008fda:	4649      	mov	r1, r9
 8008fdc:	f7f7 fda4 	bl	8000b28 <__aeabi_dcmpgt>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d173      	bne.n	80090cc <_dtoa_r+0x6c4>
 8008fe4:	4652      	mov	r2, sl
 8008fe6:	465b      	mov	r3, fp
 8008fe8:	4913      	ldr	r1, [pc, #76]	; (8009038 <_dtoa_r+0x630>)
 8008fea:	2000      	movs	r0, #0
 8008fec:	f7f7 f954 	bl	8000298 <__aeabi_dsub>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4640      	mov	r0, r8
 8008ff6:	4649      	mov	r1, r9
 8008ff8:	f7f7 fd78 	bl	8000aec <__aeabi_dcmplt>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	f43f af35 	beq.w	8008e6c <_dtoa_r+0x464>
 8009002:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009004:	1e6b      	subs	r3, r5, #1
 8009006:	930f      	str	r3, [sp, #60]	; 0x3c
 8009008:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800900c:	2b30      	cmp	r3, #48	; 0x30
 800900e:	d0f8      	beq.n	8009002 <_dtoa_r+0x5fa>
 8009010:	9700      	str	r7, [sp, #0]
 8009012:	e049      	b.n	80090a8 <_dtoa_r+0x6a0>
 8009014:	4b05      	ldr	r3, [pc, #20]	; (800902c <_dtoa_r+0x624>)
 8009016:	f7f7 faf7 	bl	8000608 <__aeabi_dmul>
 800901a:	4680      	mov	r8, r0
 800901c:	4689      	mov	r9, r1
 800901e:	e7bd      	b.n	8008f9c <_dtoa_r+0x594>
 8009020:	0800ac08 	.word	0x0800ac08
 8009024:	0800abe0 	.word	0x0800abe0
 8009028:	3ff00000 	.word	0x3ff00000
 800902c:	40240000 	.word	0x40240000
 8009030:	401c0000 	.word	0x401c0000
 8009034:	40140000 	.word	0x40140000
 8009038:	3fe00000 	.word	0x3fe00000
 800903c:	9d01      	ldr	r5, [sp, #4]
 800903e:	4656      	mov	r6, sl
 8009040:	465f      	mov	r7, fp
 8009042:	4642      	mov	r2, r8
 8009044:	464b      	mov	r3, r9
 8009046:	4630      	mov	r0, r6
 8009048:	4639      	mov	r1, r7
 800904a:	f7f7 fc07 	bl	800085c <__aeabi_ddiv>
 800904e:	f7f7 fd8b 	bl	8000b68 <__aeabi_d2iz>
 8009052:	4682      	mov	sl, r0
 8009054:	f7f7 fa6e 	bl	8000534 <__aeabi_i2d>
 8009058:	4642      	mov	r2, r8
 800905a:	464b      	mov	r3, r9
 800905c:	f7f7 fad4 	bl	8000608 <__aeabi_dmul>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	4630      	mov	r0, r6
 8009066:	4639      	mov	r1, r7
 8009068:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800906c:	f7f7 f914 	bl	8000298 <__aeabi_dsub>
 8009070:	f805 6b01 	strb.w	r6, [r5], #1
 8009074:	9e01      	ldr	r6, [sp, #4]
 8009076:	9f03      	ldr	r7, [sp, #12]
 8009078:	1bae      	subs	r6, r5, r6
 800907a:	42b7      	cmp	r7, r6
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	d135      	bne.n	80090ee <_dtoa_r+0x6e6>
 8009082:	f7f7 f90b 	bl	800029c <__adddf3>
 8009086:	4642      	mov	r2, r8
 8009088:	464b      	mov	r3, r9
 800908a:	4606      	mov	r6, r0
 800908c:	460f      	mov	r7, r1
 800908e:	f7f7 fd4b 	bl	8000b28 <__aeabi_dcmpgt>
 8009092:	b9d0      	cbnz	r0, 80090ca <_dtoa_r+0x6c2>
 8009094:	4642      	mov	r2, r8
 8009096:	464b      	mov	r3, r9
 8009098:	4630      	mov	r0, r6
 800909a:	4639      	mov	r1, r7
 800909c:	f7f7 fd1c 	bl	8000ad8 <__aeabi_dcmpeq>
 80090a0:	b110      	cbz	r0, 80090a8 <_dtoa_r+0x6a0>
 80090a2:	f01a 0f01 	tst.w	sl, #1
 80090a6:	d110      	bne.n	80090ca <_dtoa_r+0x6c2>
 80090a8:	4620      	mov	r0, r4
 80090aa:	ee18 1a10 	vmov	r1, s16
 80090ae:	f000 faf3 	bl	8009698 <_Bfree>
 80090b2:	2300      	movs	r3, #0
 80090b4:	9800      	ldr	r0, [sp, #0]
 80090b6:	702b      	strb	r3, [r5, #0]
 80090b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090ba:	3001      	adds	r0, #1
 80090bc:	6018      	str	r0, [r3, #0]
 80090be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f43f acf1 	beq.w	8008aa8 <_dtoa_r+0xa0>
 80090c6:	601d      	str	r5, [r3, #0]
 80090c8:	e4ee      	b.n	8008aa8 <_dtoa_r+0xa0>
 80090ca:	9f00      	ldr	r7, [sp, #0]
 80090cc:	462b      	mov	r3, r5
 80090ce:	461d      	mov	r5, r3
 80090d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090d4:	2a39      	cmp	r2, #57	; 0x39
 80090d6:	d106      	bne.n	80090e6 <_dtoa_r+0x6de>
 80090d8:	9a01      	ldr	r2, [sp, #4]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d1f7      	bne.n	80090ce <_dtoa_r+0x6c6>
 80090de:	9901      	ldr	r1, [sp, #4]
 80090e0:	2230      	movs	r2, #48	; 0x30
 80090e2:	3701      	adds	r7, #1
 80090e4:	700a      	strb	r2, [r1, #0]
 80090e6:	781a      	ldrb	r2, [r3, #0]
 80090e8:	3201      	adds	r2, #1
 80090ea:	701a      	strb	r2, [r3, #0]
 80090ec:	e790      	b.n	8009010 <_dtoa_r+0x608>
 80090ee:	4ba6      	ldr	r3, [pc, #664]	; (8009388 <_dtoa_r+0x980>)
 80090f0:	2200      	movs	r2, #0
 80090f2:	f7f7 fa89 	bl	8000608 <__aeabi_dmul>
 80090f6:	2200      	movs	r2, #0
 80090f8:	2300      	movs	r3, #0
 80090fa:	4606      	mov	r6, r0
 80090fc:	460f      	mov	r7, r1
 80090fe:	f7f7 fceb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009102:	2800      	cmp	r0, #0
 8009104:	d09d      	beq.n	8009042 <_dtoa_r+0x63a>
 8009106:	e7cf      	b.n	80090a8 <_dtoa_r+0x6a0>
 8009108:	9a08      	ldr	r2, [sp, #32]
 800910a:	2a00      	cmp	r2, #0
 800910c:	f000 80d7 	beq.w	80092be <_dtoa_r+0x8b6>
 8009110:	9a06      	ldr	r2, [sp, #24]
 8009112:	2a01      	cmp	r2, #1
 8009114:	f300 80ba 	bgt.w	800928c <_dtoa_r+0x884>
 8009118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800911a:	2a00      	cmp	r2, #0
 800911c:	f000 80b2 	beq.w	8009284 <_dtoa_r+0x87c>
 8009120:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009124:	9e07      	ldr	r6, [sp, #28]
 8009126:	9d04      	ldr	r5, [sp, #16]
 8009128:	9a04      	ldr	r2, [sp, #16]
 800912a:	441a      	add	r2, r3
 800912c:	9204      	str	r2, [sp, #16]
 800912e:	9a05      	ldr	r2, [sp, #20]
 8009130:	2101      	movs	r1, #1
 8009132:	441a      	add	r2, r3
 8009134:	4620      	mov	r0, r4
 8009136:	9205      	str	r2, [sp, #20]
 8009138:	f000 fb66 	bl	8009808 <__i2b>
 800913c:	4607      	mov	r7, r0
 800913e:	2d00      	cmp	r5, #0
 8009140:	dd0c      	ble.n	800915c <_dtoa_r+0x754>
 8009142:	9b05      	ldr	r3, [sp, #20]
 8009144:	2b00      	cmp	r3, #0
 8009146:	dd09      	ble.n	800915c <_dtoa_r+0x754>
 8009148:	42ab      	cmp	r3, r5
 800914a:	9a04      	ldr	r2, [sp, #16]
 800914c:	bfa8      	it	ge
 800914e:	462b      	movge	r3, r5
 8009150:	1ad2      	subs	r2, r2, r3
 8009152:	9204      	str	r2, [sp, #16]
 8009154:	9a05      	ldr	r2, [sp, #20]
 8009156:	1aed      	subs	r5, r5, r3
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	9305      	str	r3, [sp, #20]
 800915c:	9b07      	ldr	r3, [sp, #28]
 800915e:	b31b      	cbz	r3, 80091a8 <_dtoa_r+0x7a0>
 8009160:	9b08      	ldr	r3, [sp, #32]
 8009162:	2b00      	cmp	r3, #0
 8009164:	f000 80af 	beq.w	80092c6 <_dtoa_r+0x8be>
 8009168:	2e00      	cmp	r6, #0
 800916a:	dd13      	ble.n	8009194 <_dtoa_r+0x78c>
 800916c:	4639      	mov	r1, r7
 800916e:	4632      	mov	r2, r6
 8009170:	4620      	mov	r0, r4
 8009172:	f000 fc09 	bl	8009988 <__pow5mult>
 8009176:	ee18 2a10 	vmov	r2, s16
 800917a:	4601      	mov	r1, r0
 800917c:	4607      	mov	r7, r0
 800917e:	4620      	mov	r0, r4
 8009180:	f000 fb58 	bl	8009834 <__multiply>
 8009184:	ee18 1a10 	vmov	r1, s16
 8009188:	4680      	mov	r8, r0
 800918a:	4620      	mov	r0, r4
 800918c:	f000 fa84 	bl	8009698 <_Bfree>
 8009190:	ee08 8a10 	vmov	s16, r8
 8009194:	9b07      	ldr	r3, [sp, #28]
 8009196:	1b9a      	subs	r2, r3, r6
 8009198:	d006      	beq.n	80091a8 <_dtoa_r+0x7a0>
 800919a:	ee18 1a10 	vmov	r1, s16
 800919e:	4620      	mov	r0, r4
 80091a0:	f000 fbf2 	bl	8009988 <__pow5mult>
 80091a4:	ee08 0a10 	vmov	s16, r0
 80091a8:	2101      	movs	r1, #1
 80091aa:	4620      	mov	r0, r4
 80091ac:	f000 fb2c 	bl	8009808 <__i2b>
 80091b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	4606      	mov	r6, r0
 80091b6:	f340 8088 	ble.w	80092ca <_dtoa_r+0x8c2>
 80091ba:	461a      	mov	r2, r3
 80091bc:	4601      	mov	r1, r0
 80091be:	4620      	mov	r0, r4
 80091c0:	f000 fbe2 	bl	8009988 <__pow5mult>
 80091c4:	9b06      	ldr	r3, [sp, #24]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	4606      	mov	r6, r0
 80091ca:	f340 8081 	ble.w	80092d0 <_dtoa_r+0x8c8>
 80091ce:	f04f 0800 	mov.w	r8, #0
 80091d2:	6933      	ldr	r3, [r6, #16]
 80091d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80091d8:	6918      	ldr	r0, [r3, #16]
 80091da:	f000 fac5 	bl	8009768 <__hi0bits>
 80091de:	f1c0 0020 	rsb	r0, r0, #32
 80091e2:	9b05      	ldr	r3, [sp, #20]
 80091e4:	4418      	add	r0, r3
 80091e6:	f010 001f 	ands.w	r0, r0, #31
 80091ea:	f000 8092 	beq.w	8009312 <_dtoa_r+0x90a>
 80091ee:	f1c0 0320 	rsb	r3, r0, #32
 80091f2:	2b04      	cmp	r3, #4
 80091f4:	f340 808a 	ble.w	800930c <_dtoa_r+0x904>
 80091f8:	f1c0 001c 	rsb	r0, r0, #28
 80091fc:	9b04      	ldr	r3, [sp, #16]
 80091fe:	4403      	add	r3, r0
 8009200:	9304      	str	r3, [sp, #16]
 8009202:	9b05      	ldr	r3, [sp, #20]
 8009204:	4403      	add	r3, r0
 8009206:	4405      	add	r5, r0
 8009208:	9305      	str	r3, [sp, #20]
 800920a:	9b04      	ldr	r3, [sp, #16]
 800920c:	2b00      	cmp	r3, #0
 800920e:	dd07      	ble.n	8009220 <_dtoa_r+0x818>
 8009210:	ee18 1a10 	vmov	r1, s16
 8009214:	461a      	mov	r2, r3
 8009216:	4620      	mov	r0, r4
 8009218:	f000 fc10 	bl	8009a3c <__lshift>
 800921c:	ee08 0a10 	vmov	s16, r0
 8009220:	9b05      	ldr	r3, [sp, #20]
 8009222:	2b00      	cmp	r3, #0
 8009224:	dd05      	ble.n	8009232 <_dtoa_r+0x82a>
 8009226:	4631      	mov	r1, r6
 8009228:	461a      	mov	r2, r3
 800922a:	4620      	mov	r0, r4
 800922c:	f000 fc06 	bl	8009a3c <__lshift>
 8009230:	4606      	mov	r6, r0
 8009232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009234:	2b00      	cmp	r3, #0
 8009236:	d06e      	beq.n	8009316 <_dtoa_r+0x90e>
 8009238:	ee18 0a10 	vmov	r0, s16
 800923c:	4631      	mov	r1, r6
 800923e:	f000 fc6d 	bl	8009b1c <__mcmp>
 8009242:	2800      	cmp	r0, #0
 8009244:	da67      	bge.n	8009316 <_dtoa_r+0x90e>
 8009246:	9b00      	ldr	r3, [sp, #0]
 8009248:	3b01      	subs	r3, #1
 800924a:	ee18 1a10 	vmov	r1, s16
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	220a      	movs	r2, #10
 8009252:	2300      	movs	r3, #0
 8009254:	4620      	mov	r0, r4
 8009256:	f000 fa41 	bl	80096dc <__multadd>
 800925a:	9b08      	ldr	r3, [sp, #32]
 800925c:	ee08 0a10 	vmov	s16, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 81b1 	beq.w	80095c8 <_dtoa_r+0xbc0>
 8009266:	2300      	movs	r3, #0
 8009268:	4639      	mov	r1, r7
 800926a:	220a      	movs	r2, #10
 800926c:	4620      	mov	r0, r4
 800926e:	f000 fa35 	bl	80096dc <__multadd>
 8009272:	9b02      	ldr	r3, [sp, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	4607      	mov	r7, r0
 8009278:	f300 808e 	bgt.w	8009398 <_dtoa_r+0x990>
 800927c:	9b06      	ldr	r3, [sp, #24]
 800927e:	2b02      	cmp	r3, #2
 8009280:	dc51      	bgt.n	8009326 <_dtoa_r+0x91e>
 8009282:	e089      	b.n	8009398 <_dtoa_r+0x990>
 8009284:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009286:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800928a:	e74b      	b.n	8009124 <_dtoa_r+0x71c>
 800928c:	9b03      	ldr	r3, [sp, #12]
 800928e:	1e5e      	subs	r6, r3, #1
 8009290:	9b07      	ldr	r3, [sp, #28]
 8009292:	42b3      	cmp	r3, r6
 8009294:	bfbf      	itttt	lt
 8009296:	9b07      	ldrlt	r3, [sp, #28]
 8009298:	9607      	strlt	r6, [sp, #28]
 800929a:	1af2      	sublt	r2, r6, r3
 800929c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800929e:	bfb6      	itet	lt
 80092a0:	189b      	addlt	r3, r3, r2
 80092a2:	1b9e      	subge	r6, r3, r6
 80092a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80092a6:	9b03      	ldr	r3, [sp, #12]
 80092a8:	bfb8      	it	lt
 80092aa:	2600      	movlt	r6, #0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	bfb7      	itett	lt
 80092b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80092b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80092b8:	1a9d      	sublt	r5, r3, r2
 80092ba:	2300      	movlt	r3, #0
 80092bc:	e734      	b.n	8009128 <_dtoa_r+0x720>
 80092be:	9e07      	ldr	r6, [sp, #28]
 80092c0:	9d04      	ldr	r5, [sp, #16]
 80092c2:	9f08      	ldr	r7, [sp, #32]
 80092c4:	e73b      	b.n	800913e <_dtoa_r+0x736>
 80092c6:	9a07      	ldr	r2, [sp, #28]
 80092c8:	e767      	b.n	800919a <_dtoa_r+0x792>
 80092ca:	9b06      	ldr	r3, [sp, #24]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	dc18      	bgt.n	8009302 <_dtoa_r+0x8fa>
 80092d0:	f1ba 0f00 	cmp.w	sl, #0
 80092d4:	d115      	bne.n	8009302 <_dtoa_r+0x8fa>
 80092d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092da:	b993      	cbnz	r3, 8009302 <_dtoa_r+0x8fa>
 80092dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80092e0:	0d1b      	lsrs	r3, r3, #20
 80092e2:	051b      	lsls	r3, r3, #20
 80092e4:	b183      	cbz	r3, 8009308 <_dtoa_r+0x900>
 80092e6:	9b04      	ldr	r3, [sp, #16]
 80092e8:	3301      	adds	r3, #1
 80092ea:	9304      	str	r3, [sp, #16]
 80092ec:	9b05      	ldr	r3, [sp, #20]
 80092ee:	3301      	adds	r3, #1
 80092f0:	9305      	str	r3, [sp, #20]
 80092f2:	f04f 0801 	mov.w	r8, #1
 80092f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f47f af6a 	bne.w	80091d2 <_dtoa_r+0x7ca>
 80092fe:	2001      	movs	r0, #1
 8009300:	e76f      	b.n	80091e2 <_dtoa_r+0x7da>
 8009302:	f04f 0800 	mov.w	r8, #0
 8009306:	e7f6      	b.n	80092f6 <_dtoa_r+0x8ee>
 8009308:	4698      	mov	r8, r3
 800930a:	e7f4      	b.n	80092f6 <_dtoa_r+0x8ee>
 800930c:	f43f af7d 	beq.w	800920a <_dtoa_r+0x802>
 8009310:	4618      	mov	r0, r3
 8009312:	301c      	adds	r0, #28
 8009314:	e772      	b.n	80091fc <_dtoa_r+0x7f4>
 8009316:	9b03      	ldr	r3, [sp, #12]
 8009318:	2b00      	cmp	r3, #0
 800931a:	dc37      	bgt.n	800938c <_dtoa_r+0x984>
 800931c:	9b06      	ldr	r3, [sp, #24]
 800931e:	2b02      	cmp	r3, #2
 8009320:	dd34      	ble.n	800938c <_dtoa_r+0x984>
 8009322:	9b03      	ldr	r3, [sp, #12]
 8009324:	9302      	str	r3, [sp, #8]
 8009326:	9b02      	ldr	r3, [sp, #8]
 8009328:	b96b      	cbnz	r3, 8009346 <_dtoa_r+0x93e>
 800932a:	4631      	mov	r1, r6
 800932c:	2205      	movs	r2, #5
 800932e:	4620      	mov	r0, r4
 8009330:	f000 f9d4 	bl	80096dc <__multadd>
 8009334:	4601      	mov	r1, r0
 8009336:	4606      	mov	r6, r0
 8009338:	ee18 0a10 	vmov	r0, s16
 800933c:	f000 fbee 	bl	8009b1c <__mcmp>
 8009340:	2800      	cmp	r0, #0
 8009342:	f73f adbb 	bgt.w	8008ebc <_dtoa_r+0x4b4>
 8009346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009348:	9d01      	ldr	r5, [sp, #4]
 800934a:	43db      	mvns	r3, r3
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	f04f 0800 	mov.w	r8, #0
 8009352:	4631      	mov	r1, r6
 8009354:	4620      	mov	r0, r4
 8009356:	f000 f99f 	bl	8009698 <_Bfree>
 800935a:	2f00      	cmp	r7, #0
 800935c:	f43f aea4 	beq.w	80090a8 <_dtoa_r+0x6a0>
 8009360:	f1b8 0f00 	cmp.w	r8, #0
 8009364:	d005      	beq.n	8009372 <_dtoa_r+0x96a>
 8009366:	45b8      	cmp	r8, r7
 8009368:	d003      	beq.n	8009372 <_dtoa_r+0x96a>
 800936a:	4641      	mov	r1, r8
 800936c:	4620      	mov	r0, r4
 800936e:	f000 f993 	bl	8009698 <_Bfree>
 8009372:	4639      	mov	r1, r7
 8009374:	4620      	mov	r0, r4
 8009376:	f000 f98f 	bl	8009698 <_Bfree>
 800937a:	e695      	b.n	80090a8 <_dtoa_r+0x6a0>
 800937c:	2600      	movs	r6, #0
 800937e:	4637      	mov	r7, r6
 8009380:	e7e1      	b.n	8009346 <_dtoa_r+0x93e>
 8009382:	9700      	str	r7, [sp, #0]
 8009384:	4637      	mov	r7, r6
 8009386:	e599      	b.n	8008ebc <_dtoa_r+0x4b4>
 8009388:	40240000 	.word	0x40240000
 800938c:	9b08      	ldr	r3, [sp, #32]
 800938e:	2b00      	cmp	r3, #0
 8009390:	f000 80ca 	beq.w	8009528 <_dtoa_r+0xb20>
 8009394:	9b03      	ldr	r3, [sp, #12]
 8009396:	9302      	str	r3, [sp, #8]
 8009398:	2d00      	cmp	r5, #0
 800939a:	dd05      	ble.n	80093a8 <_dtoa_r+0x9a0>
 800939c:	4639      	mov	r1, r7
 800939e:	462a      	mov	r2, r5
 80093a0:	4620      	mov	r0, r4
 80093a2:	f000 fb4b 	bl	8009a3c <__lshift>
 80093a6:	4607      	mov	r7, r0
 80093a8:	f1b8 0f00 	cmp.w	r8, #0
 80093ac:	d05b      	beq.n	8009466 <_dtoa_r+0xa5e>
 80093ae:	6879      	ldr	r1, [r7, #4]
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 f931 	bl	8009618 <_Balloc>
 80093b6:	4605      	mov	r5, r0
 80093b8:	b928      	cbnz	r0, 80093c6 <_dtoa_r+0x9be>
 80093ba:	4b87      	ldr	r3, [pc, #540]	; (80095d8 <_dtoa_r+0xbd0>)
 80093bc:	4602      	mov	r2, r0
 80093be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80093c2:	f7ff bb3b 	b.w	8008a3c <_dtoa_r+0x34>
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	3202      	adds	r2, #2
 80093ca:	0092      	lsls	r2, r2, #2
 80093cc:	f107 010c 	add.w	r1, r7, #12
 80093d0:	300c      	adds	r0, #12
 80093d2:	f000 f913 	bl	80095fc <memcpy>
 80093d6:	2201      	movs	r2, #1
 80093d8:	4629      	mov	r1, r5
 80093da:	4620      	mov	r0, r4
 80093dc:	f000 fb2e 	bl	8009a3c <__lshift>
 80093e0:	9b01      	ldr	r3, [sp, #4]
 80093e2:	f103 0901 	add.w	r9, r3, #1
 80093e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80093ea:	4413      	add	r3, r2
 80093ec:	9305      	str	r3, [sp, #20]
 80093ee:	f00a 0301 	and.w	r3, sl, #1
 80093f2:	46b8      	mov	r8, r7
 80093f4:	9304      	str	r3, [sp, #16]
 80093f6:	4607      	mov	r7, r0
 80093f8:	4631      	mov	r1, r6
 80093fa:	ee18 0a10 	vmov	r0, s16
 80093fe:	f7ff fa77 	bl	80088f0 <quorem>
 8009402:	4641      	mov	r1, r8
 8009404:	9002      	str	r0, [sp, #8]
 8009406:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800940a:	ee18 0a10 	vmov	r0, s16
 800940e:	f000 fb85 	bl	8009b1c <__mcmp>
 8009412:	463a      	mov	r2, r7
 8009414:	9003      	str	r0, [sp, #12]
 8009416:	4631      	mov	r1, r6
 8009418:	4620      	mov	r0, r4
 800941a:	f000 fb9b 	bl	8009b54 <__mdiff>
 800941e:	68c2      	ldr	r2, [r0, #12]
 8009420:	f109 3bff 	add.w	fp, r9, #4294967295
 8009424:	4605      	mov	r5, r0
 8009426:	bb02      	cbnz	r2, 800946a <_dtoa_r+0xa62>
 8009428:	4601      	mov	r1, r0
 800942a:	ee18 0a10 	vmov	r0, s16
 800942e:	f000 fb75 	bl	8009b1c <__mcmp>
 8009432:	4602      	mov	r2, r0
 8009434:	4629      	mov	r1, r5
 8009436:	4620      	mov	r0, r4
 8009438:	9207      	str	r2, [sp, #28]
 800943a:	f000 f92d 	bl	8009698 <_Bfree>
 800943e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009442:	ea43 0102 	orr.w	r1, r3, r2
 8009446:	9b04      	ldr	r3, [sp, #16]
 8009448:	430b      	orrs	r3, r1
 800944a:	464d      	mov	r5, r9
 800944c:	d10f      	bne.n	800946e <_dtoa_r+0xa66>
 800944e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009452:	d02a      	beq.n	80094aa <_dtoa_r+0xaa2>
 8009454:	9b03      	ldr	r3, [sp, #12]
 8009456:	2b00      	cmp	r3, #0
 8009458:	dd02      	ble.n	8009460 <_dtoa_r+0xa58>
 800945a:	9b02      	ldr	r3, [sp, #8]
 800945c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009460:	f88b a000 	strb.w	sl, [fp]
 8009464:	e775      	b.n	8009352 <_dtoa_r+0x94a>
 8009466:	4638      	mov	r0, r7
 8009468:	e7ba      	b.n	80093e0 <_dtoa_r+0x9d8>
 800946a:	2201      	movs	r2, #1
 800946c:	e7e2      	b.n	8009434 <_dtoa_r+0xa2c>
 800946e:	9b03      	ldr	r3, [sp, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	db04      	blt.n	800947e <_dtoa_r+0xa76>
 8009474:	9906      	ldr	r1, [sp, #24]
 8009476:	430b      	orrs	r3, r1
 8009478:	9904      	ldr	r1, [sp, #16]
 800947a:	430b      	orrs	r3, r1
 800947c:	d122      	bne.n	80094c4 <_dtoa_r+0xabc>
 800947e:	2a00      	cmp	r2, #0
 8009480:	ddee      	ble.n	8009460 <_dtoa_r+0xa58>
 8009482:	ee18 1a10 	vmov	r1, s16
 8009486:	2201      	movs	r2, #1
 8009488:	4620      	mov	r0, r4
 800948a:	f000 fad7 	bl	8009a3c <__lshift>
 800948e:	4631      	mov	r1, r6
 8009490:	ee08 0a10 	vmov	s16, r0
 8009494:	f000 fb42 	bl	8009b1c <__mcmp>
 8009498:	2800      	cmp	r0, #0
 800949a:	dc03      	bgt.n	80094a4 <_dtoa_r+0xa9c>
 800949c:	d1e0      	bne.n	8009460 <_dtoa_r+0xa58>
 800949e:	f01a 0f01 	tst.w	sl, #1
 80094a2:	d0dd      	beq.n	8009460 <_dtoa_r+0xa58>
 80094a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80094a8:	d1d7      	bne.n	800945a <_dtoa_r+0xa52>
 80094aa:	2339      	movs	r3, #57	; 0x39
 80094ac:	f88b 3000 	strb.w	r3, [fp]
 80094b0:	462b      	mov	r3, r5
 80094b2:	461d      	mov	r5, r3
 80094b4:	3b01      	subs	r3, #1
 80094b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80094ba:	2a39      	cmp	r2, #57	; 0x39
 80094bc:	d071      	beq.n	80095a2 <_dtoa_r+0xb9a>
 80094be:	3201      	adds	r2, #1
 80094c0:	701a      	strb	r2, [r3, #0]
 80094c2:	e746      	b.n	8009352 <_dtoa_r+0x94a>
 80094c4:	2a00      	cmp	r2, #0
 80094c6:	dd07      	ble.n	80094d8 <_dtoa_r+0xad0>
 80094c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80094cc:	d0ed      	beq.n	80094aa <_dtoa_r+0xaa2>
 80094ce:	f10a 0301 	add.w	r3, sl, #1
 80094d2:	f88b 3000 	strb.w	r3, [fp]
 80094d6:	e73c      	b.n	8009352 <_dtoa_r+0x94a>
 80094d8:	9b05      	ldr	r3, [sp, #20]
 80094da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80094de:	4599      	cmp	r9, r3
 80094e0:	d047      	beq.n	8009572 <_dtoa_r+0xb6a>
 80094e2:	ee18 1a10 	vmov	r1, s16
 80094e6:	2300      	movs	r3, #0
 80094e8:	220a      	movs	r2, #10
 80094ea:	4620      	mov	r0, r4
 80094ec:	f000 f8f6 	bl	80096dc <__multadd>
 80094f0:	45b8      	cmp	r8, r7
 80094f2:	ee08 0a10 	vmov	s16, r0
 80094f6:	f04f 0300 	mov.w	r3, #0
 80094fa:	f04f 020a 	mov.w	r2, #10
 80094fe:	4641      	mov	r1, r8
 8009500:	4620      	mov	r0, r4
 8009502:	d106      	bne.n	8009512 <_dtoa_r+0xb0a>
 8009504:	f000 f8ea 	bl	80096dc <__multadd>
 8009508:	4680      	mov	r8, r0
 800950a:	4607      	mov	r7, r0
 800950c:	f109 0901 	add.w	r9, r9, #1
 8009510:	e772      	b.n	80093f8 <_dtoa_r+0x9f0>
 8009512:	f000 f8e3 	bl	80096dc <__multadd>
 8009516:	4639      	mov	r1, r7
 8009518:	4680      	mov	r8, r0
 800951a:	2300      	movs	r3, #0
 800951c:	220a      	movs	r2, #10
 800951e:	4620      	mov	r0, r4
 8009520:	f000 f8dc 	bl	80096dc <__multadd>
 8009524:	4607      	mov	r7, r0
 8009526:	e7f1      	b.n	800950c <_dtoa_r+0xb04>
 8009528:	9b03      	ldr	r3, [sp, #12]
 800952a:	9302      	str	r3, [sp, #8]
 800952c:	9d01      	ldr	r5, [sp, #4]
 800952e:	ee18 0a10 	vmov	r0, s16
 8009532:	4631      	mov	r1, r6
 8009534:	f7ff f9dc 	bl	80088f0 <quorem>
 8009538:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800953c:	9b01      	ldr	r3, [sp, #4]
 800953e:	f805 ab01 	strb.w	sl, [r5], #1
 8009542:	1aea      	subs	r2, r5, r3
 8009544:	9b02      	ldr	r3, [sp, #8]
 8009546:	4293      	cmp	r3, r2
 8009548:	dd09      	ble.n	800955e <_dtoa_r+0xb56>
 800954a:	ee18 1a10 	vmov	r1, s16
 800954e:	2300      	movs	r3, #0
 8009550:	220a      	movs	r2, #10
 8009552:	4620      	mov	r0, r4
 8009554:	f000 f8c2 	bl	80096dc <__multadd>
 8009558:	ee08 0a10 	vmov	s16, r0
 800955c:	e7e7      	b.n	800952e <_dtoa_r+0xb26>
 800955e:	9b02      	ldr	r3, [sp, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	bfc8      	it	gt
 8009564:	461d      	movgt	r5, r3
 8009566:	9b01      	ldr	r3, [sp, #4]
 8009568:	bfd8      	it	le
 800956a:	2501      	movle	r5, #1
 800956c:	441d      	add	r5, r3
 800956e:	f04f 0800 	mov.w	r8, #0
 8009572:	ee18 1a10 	vmov	r1, s16
 8009576:	2201      	movs	r2, #1
 8009578:	4620      	mov	r0, r4
 800957a:	f000 fa5f 	bl	8009a3c <__lshift>
 800957e:	4631      	mov	r1, r6
 8009580:	ee08 0a10 	vmov	s16, r0
 8009584:	f000 faca 	bl	8009b1c <__mcmp>
 8009588:	2800      	cmp	r0, #0
 800958a:	dc91      	bgt.n	80094b0 <_dtoa_r+0xaa8>
 800958c:	d102      	bne.n	8009594 <_dtoa_r+0xb8c>
 800958e:	f01a 0f01 	tst.w	sl, #1
 8009592:	d18d      	bne.n	80094b0 <_dtoa_r+0xaa8>
 8009594:	462b      	mov	r3, r5
 8009596:	461d      	mov	r5, r3
 8009598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800959c:	2a30      	cmp	r2, #48	; 0x30
 800959e:	d0fa      	beq.n	8009596 <_dtoa_r+0xb8e>
 80095a0:	e6d7      	b.n	8009352 <_dtoa_r+0x94a>
 80095a2:	9a01      	ldr	r2, [sp, #4]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d184      	bne.n	80094b2 <_dtoa_r+0xaaa>
 80095a8:	9b00      	ldr	r3, [sp, #0]
 80095aa:	3301      	adds	r3, #1
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	2331      	movs	r3, #49	; 0x31
 80095b0:	7013      	strb	r3, [r2, #0]
 80095b2:	e6ce      	b.n	8009352 <_dtoa_r+0x94a>
 80095b4:	4b09      	ldr	r3, [pc, #36]	; (80095dc <_dtoa_r+0xbd4>)
 80095b6:	f7ff ba95 	b.w	8008ae4 <_dtoa_r+0xdc>
 80095ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f47f aa6e 	bne.w	8008a9e <_dtoa_r+0x96>
 80095c2:	4b07      	ldr	r3, [pc, #28]	; (80095e0 <_dtoa_r+0xbd8>)
 80095c4:	f7ff ba8e 	b.w	8008ae4 <_dtoa_r+0xdc>
 80095c8:	9b02      	ldr	r3, [sp, #8]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	dcae      	bgt.n	800952c <_dtoa_r+0xb24>
 80095ce:	9b06      	ldr	r3, [sp, #24]
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	f73f aea8 	bgt.w	8009326 <_dtoa_r+0x91e>
 80095d6:	e7a9      	b.n	800952c <_dtoa_r+0xb24>
 80095d8:	0800ab6f 	.word	0x0800ab6f
 80095dc:	0800aacc 	.word	0x0800aacc
 80095e0:	0800aaf0 	.word	0x0800aaf0

080095e4 <_localeconv_r>:
 80095e4:	4800      	ldr	r0, [pc, #0]	; (80095e8 <_localeconv_r+0x4>)
 80095e6:	4770      	bx	lr
 80095e8:	20000258 	.word	0x20000258

080095ec <malloc>:
 80095ec:	4b02      	ldr	r3, [pc, #8]	; (80095f8 <malloc+0xc>)
 80095ee:	4601      	mov	r1, r0
 80095f0:	6818      	ldr	r0, [r3, #0]
 80095f2:	f000 bc17 	b.w	8009e24 <_malloc_r>
 80095f6:	bf00      	nop
 80095f8:	20000104 	.word	0x20000104

080095fc <memcpy>:
 80095fc:	440a      	add	r2, r1
 80095fe:	4291      	cmp	r1, r2
 8009600:	f100 33ff 	add.w	r3, r0, #4294967295
 8009604:	d100      	bne.n	8009608 <memcpy+0xc>
 8009606:	4770      	bx	lr
 8009608:	b510      	push	{r4, lr}
 800960a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800960e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009612:	4291      	cmp	r1, r2
 8009614:	d1f9      	bne.n	800960a <memcpy+0xe>
 8009616:	bd10      	pop	{r4, pc}

08009618 <_Balloc>:
 8009618:	b570      	push	{r4, r5, r6, lr}
 800961a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800961c:	4604      	mov	r4, r0
 800961e:	460d      	mov	r5, r1
 8009620:	b976      	cbnz	r6, 8009640 <_Balloc+0x28>
 8009622:	2010      	movs	r0, #16
 8009624:	f7ff ffe2 	bl	80095ec <malloc>
 8009628:	4602      	mov	r2, r0
 800962a:	6260      	str	r0, [r4, #36]	; 0x24
 800962c:	b920      	cbnz	r0, 8009638 <_Balloc+0x20>
 800962e:	4b18      	ldr	r3, [pc, #96]	; (8009690 <_Balloc+0x78>)
 8009630:	4818      	ldr	r0, [pc, #96]	; (8009694 <_Balloc+0x7c>)
 8009632:	2166      	movs	r1, #102	; 0x66
 8009634:	f000 fc7a 	bl	8009f2c <__assert_func>
 8009638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800963c:	6006      	str	r6, [r0, #0]
 800963e:	60c6      	str	r6, [r0, #12]
 8009640:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009642:	68f3      	ldr	r3, [r6, #12]
 8009644:	b183      	cbz	r3, 8009668 <_Balloc+0x50>
 8009646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800964e:	b9b8      	cbnz	r0, 8009680 <_Balloc+0x68>
 8009650:	2101      	movs	r1, #1
 8009652:	fa01 f605 	lsl.w	r6, r1, r5
 8009656:	1d72      	adds	r2, r6, #5
 8009658:	0092      	lsls	r2, r2, #2
 800965a:	4620      	mov	r0, r4
 800965c:	f000 fb60 	bl	8009d20 <_calloc_r>
 8009660:	b160      	cbz	r0, 800967c <_Balloc+0x64>
 8009662:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009666:	e00e      	b.n	8009686 <_Balloc+0x6e>
 8009668:	2221      	movs	r2, #33	; 0x21
 800966a:	2104      	movs	r1, #4
 800966c:	4620      	mov	r0, r4
 800966e:	f000 fb57 	bl	8009d20 <_calloc_r>
 8009672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009674:	60f0      	str	r0, [r6, #12]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1e4      	bne.n	8009646 <_Balloc+0x2e>
 800967c:	2000      	movs	r0, #0
 800967e:	bd70      	pop	{r4, r5, r6, pc}
 8009680:	6802      	ldr	r2, [r0, #0]
 8009682:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009686:	2300      	movs	r3, #0
 8009688:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800968c:	e7f7      	b.n	800967e <_Balloc+0x66>
 800968e:	bf00      	nop
 8009690:	0800aafd 	.word	0x0800aafd
 8009694:	0800ab80 	.word	0x0800ab80

08009698 <_Bfree>:
 8009698:	b570      	push	{r4, r5, r6, lr}
 800969a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800969c:	4605      	mov	r5, r0
 800969e:	460c      	mov	r4, r1
 80096a0:	b976      	cbnz	r6, 80096c0 <_Bfree+0x28>
 80096a2:	2010      	movs	r0, #16
 80096a4:	f7ff ffa2 	bl	80095ec <malloc>
 80096a8:	4602      	mov	r2, r0
 80096aa:	6268      	str	r0, [r5, #36]	; 0x24
 80096ac:	b920      	cbnz	r0, 80096b8 <_Bfree+0x20>
 80096ae:	4b09      	ldr	r3, [pc, #36]	; (80096d4 <_Bfree+0x3c>)
 80096b0:	4809      	ldr	r0, [pc, #36]	; (80096d8 <_Bfree+0x40>)
 80096b2:	218a      	movs	r1, #138	; 0x8a
 80096b4:	f000 fc3a 	bl	8009f2c <__assert_func>
 80096b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096bc:	6006      	str	r6, [r0, #0]
 80096be:	60c6      	str	r6, [r0, #12]
 80096c0:	b13c      	cbz	r4, 80096d2 <_Bfree+0x3a>
 80096c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096c4:	6862      	ldr	r2, [r4, #4]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096cc:	6021      	str	r1, [r4, #0]
 80096ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096d2:	bd70      	pop	{r4, r5, r6, pc}
 80096d4:	0800aafd 	.word	0x0800aafd
 80096d8:	0800ab80 	.word	0x0800ab80

080096dc <__multadd>:
 80096dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e0:	690d      	ldr	r5, [r1, #16]
 80096e2:	4607      	mov	r7, r0
 80096e4:	460c      	mov	r4, r1
 80096e6:	461e      	mov	r6, r3
 80096e8:	f101 0c14 	add.w	ip, r1, #20
 80096ec:	2000      	movs	r0, #0
 80096ee:	f8dc 3000 	ldr.w	r3, [ip]
 80096f2:	b299      	uxth	r1, r3
 80096f4:	fb02 6101 	mla	r1, r2, r1, r6
 80096f8:	0c1e      	lsrs	r6, r3, #16
 80096fa:	0c0b      	lsrs	r3, r1, #16
 80096fc:	fb02 3306 	mla	r3, r2, r6, r3
 8009700:	b289      	uxth	r1, r1
 8009702:	3001      	adds	r0, #1
 8009704:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009708:	4285      	cmp	r5, r0
 800970a:	f84c 1b04 	str.w	r1, [ip], #4
 800970e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009712:	dcec      	bgt.n	80096ee <__multadd+0x12>
 8009714:	b30e      	cbz	r6, 800975a <__multadd+0x7e>
 8009716:	68a3      	ldr	r3, [r4, #8]
 8009718:	42ab      	cmp	r3, r5
 800971a:	dc19      	bgt.n	8009750 <__multadd+0x74>
 800971c:	6861      	ldr	r1, [r4, #4]
 800971e:	4638      	mov	r0, r7
 8009720:	3101      	adds	r1, #1
 8009722:	f7ff ff79 	bl	8009618 <_Balloc>
 8009726:	4680      	mov	r8, r0
 8009728:	b928      	cbnz	r0, 8009736 <__multadd+0x5a>
 800972a:	4602      	mov	r2, r0
 800972c:	4b0c      	ldr	r3, [pc, #48]	; (8009760 <__multadd+0x84>)
 800972e:	480d      	ldr	r0, [pc, #52]	; (8009764 <__multadd+0x88>)
 8009730:	21b5      	movs	r1, #181	; 0xb5
 8009732:	f000 fbfb 	bl	8009f2c <__assert_func>
 8009736:	6922      	ldr	r2, [r4, #16]
 8009738:	3202      	adds	r2, #2
 800973a:	f104 010c 	add.w	r1, r4, #12
 800973e:	0092      	lsls	r2, r2, #2
 8009740:	300c      	adds	r0, #12
 8009742:	f7ff ff5b 	bl	80095fc <memcpy>
 8009746:	4621      	mov	r1, r4
 8009748:	4638      	mov	r0, r7
 800974a:	f7ff ffa5 	bl	8009698 <_Bfree>
 800974e:	4644      	mov	r4, r8
 8009750:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009754:	3501      	adds	r5, #1
 8009756:	615e      	str	r6, [r3, #20]
 8009758:	6125      	str	r5, [r4, #16]
 800975a:	4620      	mov	r0, r4
 800975c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009760:	0800ab6f 	.word	0x0800ab6f
 8009764:	0800ab80 	.word	0x0800ab80

08009768 <__hi0bits>:
 8009768:	0c03      	lsrs	r3, r0, #16
 800976a:	041b      	lsls	r3, r3, #16
 800976c:	b9d3      	cbnz	r3, 80097a4 <__hi0bits+0x3c>
 800976e:	0400      	lsls	r0, r0, #16
 8009770:	2310      	movs	r3, #16
 8009772:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009776:	bf04      	itt	eq
 8009778:	0200      	lsleq	r0, r0, #8
 800977a:	3308      	addeq	r3, #8
 800977c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009780:	bf04      	itt	eq
 8009782:	0100      	lsleq	r0, r0, #4
 8009784:	3304      	addeq	r3, #4
 8009786:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800978a:	bf04      	itt	eq
 800978c:	0080      	lsleq	r0, r0, #2
 800978e:	3302      	addeq	r3, #2
 8009790:	2800      	cmp	r0, #0
 8009792:	db05      	blt.n	80097a0 <__hi0bits+0x38>
 8009794:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009798:	f103 0301 	add.w	r3, r3, #1
 800979c:	bf08      	it	eq
 800979e:	2320      	moveq	r3, #32
 80097a0:	4618      	mov	r0, r3
 80097a2:	4770      	bx	lr
 80097a4:	2300      	movs	r3, #0
 80097a6:	e7e4      	b.n	8009772 <__hi0bits+0xa>

080097a8 <__lo0bits>:
 80097a8:	6803      	ldr	r3, [r0, #0]
 80097aa:	f013 0207 	ands.w	r2, r3, #7
 80097ae:	4601      	mov	r1, r0
 80097b0:	d00b      	beq.n	80097ca <__lo0bits+0x22>
 80097b2:	07da      	lsls	r2, r3, #31
 80097b4:	d423      	bmi.n	80097fe <__lo0bits+0x56>
 80097b6:	0798      	lsls	r0, r3, #30
 80097b8:	bf49      	itett	mi
 80097ba:	085b      	lsrmi	r3, r3, #1
 80097bc:	089b      	lsrpl	r3, r3, #2
 80097be:	2001      	movmi	r0, #1
 80097c0:	600b      	strmi	r3, [r1, #0]
 80097c2:	bf5c      	itt	pl
 80097c4:	600b      	strpl	r3, [r1, #0]
 80097c6:	2002      	movpl	r0, #2
 80097c8:	4770      	bx	lr
 80097ca:	b298      	uxth	r0, r3
 80097cc:	b9a8      	cbnz	r0, 80097fa <__lo0bits+0x52>
 80097ce:	0c1b      	lsrs	r3, r3, #16
 80097d0:	2010      	movs	r0, #16
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	b90a      	cbnz	r2, 80097da <__lo0bits+0x32>
 80097d6:	3008      	adds	r0, #8
 80097d8:	0a1b      	lsrs	r3, r3, #8
 80097da:	071a      	lsls	r2, r3, #28
 80097dc:	bf04      	itt	eq
 80097de:	091b      	lsreq	r3, r3, #4
 80097e0:	3004      	addeq	r0, #4
 80097e2:	079a      	lsls	r2, r3, #30
 80097e4:	bf04      	itt	eq
 80097e6:	089b      	lsreq	r3, r3, #2
 80097e8:	3002      	addeq	r0, #2
 80097ea:	07da      	lsls	r2, r3, #31
 80097ec:	d403      	bmi.n	80097f6 <__lo0bits+0x4e>
 80097ee:	085b      	lsrs	r3, r3, #1
 80097f0:	f100 0001 	add.w	r0, r0, #1
 80097f4:	d005      	beq.n	8009802 <__lo0bits+0x5a>
 80097f6:	600b      	str	r3, [r1, #0]
 80097f8:	4770      	bx	lr
 80097fa:	4610      	mov	r0, r2
 80097fc:	e7e9      	b.n	80097d2 <__lo0bits+0x2a>
 80097fe:	2000      	movs	r0, #0
 8009800:	4770      	bx	lr
 8009802:	2020      	movs	r0, #32
 8009804:	4770      	bx	lr
	...

08009808 <__i2b>:
 8009808:	b510      	push	{r4, lr}
 800980a:	460c      	mov	r4, r1
 800980c:	2101      	movs	r1, #1
 800980e:	f7ff ff03 	bl	8009618 <_Balloc>
 8009812:	4602      	mov	r2, r0
 8009814:	b928      	cbnz	r0, 8009822 <__i2b+0x1a>
 8009816:	4b05      	ldr	r3, [pc, #20]	; (800982c <__i2b+0x24>)
 8009818:	4805      	ldr	r0, [pc, #20]	; (8009830 <__i2b+0x28>)
 800981a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800981e:	f000 fb85 	bl	8009f2c <__assert_func>
 8009822:	2301      	movs	r3, #1
 8009824:	6144      	str	r4, [r0, #20]
 8009826:	6103      	str	r3, [r0, #16]
 8009828:	bd10      	pop	{r4, pc}
 800982a:	bf00      	nop
 800982c:	0800ab6f 	.word	0x0800ab6f
 8009830:	0800ab80 	.word	0x0800ab80

08009834 <__multiply>:
 8009834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009838:	4691      	mov	r9, r2
 800983a:	690a      	ldr	r2, [r1, #16]
 800983c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009840:	429a      	cmp	r2, r3
 8009842:	bfb8      	it	lt
 8009844:	460b      	movlt	r3, r1
 8009846:	460c      	mov	r4, r1
 8009848:	bfbc      	itt	lt
 800984a:	464c      	movlt	r4, r9
 800984c:	4699      	movlt	r9, r3
 800984e:	6927      	ldr	r7, [r4, #16]
 8009850:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009854:	68a3      	ldr	r3, [r4, #8]
 8009856:	6861      	ldr	r1, [r4, #4]
 8009858:	eb07 060a 	add.w	r6, r7, sl
 800985c:	42b3      	cmp	r3, r6
 800985e:	b085      	sub	sp, #20
 8009860:	bfb8      	it	lt
 8009862:	3101      	addlt	r1, #1
 8009864:	f7ff fed8 	bl	8009618 <_Balloc>
 8009868:	b930      	cbnz	r0, 8009878 <__multiply+0x44>
 800986a:	4602      	mov	r2, r0
 800986c:	4b44      	ldr	r3, [pc, #272]	; (8009980 <__multiply+0x14c>)
 800986e:	4845      	ldr	r0, [pc, #276]	; (8009984 <__multiply+0x150>)
 8009870:	f240 115d 	movw	r1, #349	; 0x15d
 8009874:	f000 fb5a 	bl	8009f2c <__assert_func>
 8009878:	f100 0514 	add.w	r5, r0, #20
 800987c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009880:	462b      	mov	r3, r5
 8009882:	2200      	movs	r2, #0
 8009884:	4543      	cmp	r3, r8
 8009886:	d321      	bcc.n	80098cc <__multiply+0x98>
 8009888:	f104 0314 	add.w	r3, r4, #20
 800988c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009890:	f109 0314 	add.w	r3, r9, #20
 8009894:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009898:	9202      	str	r2, [sp, #8]
 800989a:	1b3a      	subs	r2, r7, r4
 800989c:	3a15      	subs	r2, #21
 800989e:	f022 0203 	bic.w	r2, r2, #3
 80098a2:	3204      	adds	r2, #4
 80098a4:	f104 0115 	add.w	r1, r4, #21
 80098a8:	428f      	cmp	r7, r1
 80098aa:	bf38      	it	cc
 80098ac:	2204      	movcc	r2, #4
 80098ae:	9201      	str	r2, [sp, #4]
 80098b0:	9a02      	ldr	r2, [sp, #8]
 80098b2:	9303      	str	r3, [sp, #12]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d80c      	bhi.n	80098d2 <__multiply+0x9e>
 80098b8:	2e00      	cmp	r6, #0
 80098ba:	dd03      	ble.n	80098c4 <__multiply+0x90>
 80098bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d05a      	beq.n	800997a <__multiply+0x146>
 80098c4:	6106      	str	r6, [r0, #16]
 80098c6:	b005      	add	sp, #20
 80098c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098cc:	f843 2b04 	str.w	r2, [r3], #4
 80098d0:	e7d8      	b.n	8009884 <__multiply+0x50>
 80098d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80098d6:	f1ba 0f00 	cmp.w	sl, #0
 80098da:	d024      	beq.n	8009926 <__multiply+0xf2>
 80098dc:	f104 0e14 	add.w	lr, r4, #20
 80098e0:	46a9      	mov	r9, r5
 80098e2:	f04f 0c00 	mov.w	ip, #0
 80098e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80098ea:	f8d9 1000 	ldr.w	r1, [r9]
 80098ee:	fa1f fb82 	uxth.w	fp, r2
 80098f2:	b289      	uxth	r1, r1
 80098f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80098f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80098fc:	f8d9 2000 	ldr.w	r2, [r9]
 8009900:	4461      	add	r1, ip
 8009902:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009906:	fb0a c20b 	mla	r2, sl, fp, ip
 800990a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800990e:	b289      	uxth	r1, r1
 8009910:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009914:	4577      	cmp	r7, lr
 8009916:	f849 1b04 	str.w	r1, [r9], #4
 800991a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800991e:	d8e2      	bhi.n	80098e6 <__multiply+0xb2>
 8009920:	9a01      	ldr	r2, [sp, #4]
 8009922:	f845 c002 	str.w	ip, [r5, r2]
 8009926:	9a03      	ldr	r2, [sp, #12]
 8009928:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800992c:	3304      	adds	r3, #4
 800992e:	f1b9 0f00 	cmp.w	r9, #0
 8009932:	d020      	beq.n	8009976 <__multiply+0x142>
 8009934:	6829      	ldr	r1, [r5, #0]
 8009936:	f104 0c14 	add.w	ip, r4, #20
 800993a:	46ae      	mov	lr, r5
 800993c:	f04f 0a00 	mov.w	sl, #0
 8009940:	f8bc b000 	ldrh.w	fp, [ip]
 8009944:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009948:	fb09 220b 	mla	r2, r9, fp, r2
 800994c:	4492      	add	sl, r2
 800994e:	b289      	uxth	r1, r1
 8009950:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009954:	f84e 1b04 	str.w	r1, [lr], #4
 8009958:	f85c 2b04 	ldr.w	r2, [ip], #4
 800995c:	f8be 1000 	ldrh.w	r1, [lr]
 8009960:	0c12      	lsrs	r2, r2, #16
 8009962:	fb09 1102 	mla	r1, r9, r2, r1
 8009966:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800996a:	4567      	cmp	r7, ip
 800996c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009970:	d8e6      	bhi.n	8009940 <__multiply+0x10c>
 8009972:	9a01      	ldr	r2, [sp, #4]
 8009974:	50a9      	str	r1, [r5, r2]
 8009976:	3504      	adds	r5, #4
 8009978:	e79a      	b.n	80098b0 <__multiply+0x7c>
 800997a:	3e01      	subs	r6, #1
 800997c:	e79c      	b.n	80098b8 <__multiply+0x84>
 800997e:	bf00      	nop
 8009980:	0800ab6f 	.word	0x0800ab6f
 8009984:	0800ab80 	.word	0x0800ab80

08009988 <__pow5mult>:
 8009988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800998c:	4615      	mov	r5, r2
 800998e:	f012 0203 	ands.w	r2, r2, #3
 8009992:	4606      	mov	r6, r0
 8009994:	460f      	mov	r7, r1
 8009996:	d007      	beq.n	80099a8 <__pow5mult+0x20>
 8009998:	4c25      	ldr	r4, [pc, #148]	; (8009a30 <__pow5mult+0xa8>)
 800999a:	3a01      	subs	r2, #1
 800999c:	2300      	movs	r3, #0
 800999e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099a2:	f7ff fe9b 	bl	80096dc <__multadd>
 80099a6:	4607      	mov	r7, r0
 80099a8:	10ad      	asrs	r5, r5, #2
 80099aa:	d03d      	beq.n	8009a28 <__pow5mult+0xa0>
 80099ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099ae:	b97c      	cbnz	r4, 80099d0 <__pow5mult+0x48>
 80099b0:	2010      	movs	r0, #16
 80099b2:	f7ff fe1b 	bl	80095ec <malloc>
 80099b6:	4602      	mov	r2, r0
 80099b8:	6270      	str	r0, [r6, #36]	; 0x24
 80099ba:	b928      	cbnz	r0, 80099c8 <__pow5mult+0x40>
 80099bc:	4b1d      	ldr	r3, [pc, #116]	; (8009a34 <__pow5mult+0xac>)
 80099be:	481e      	ldr	r0, [pc, #120]	; (8009a38 <__pow5mult+0xb0>)
 80099c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80099c4:	f000 fab2 	bl	8009f2c <__assert_func>
 80099c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099cc:	6004      	str	r4, [r0, #0]
 80099ce:	60c4      	str	r4, [r0, #12]
 80099d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80099d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099d8:	b94c      	cbnz	r4, 80099ee <__pow5mult+0x66>
 80099da:	f240 2171 	movw	r1, #625	; 0x271
 80099de:	4630      	mov	r0, r6
 80099e0:	f7ff ff12 	bl	8009808 <__i2b>
 80099e4:	2300      	movs	r3, #0
 80099e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80099ea:	4604      	mov	r4, r0
 80099ec:	6003      	str	r3, [r0, #0]
 80099ee:	f04f 0900 	mov.w	r9, #0
 80099f2:	07eb      	lsls	r3, r5, #31
 80099f4:	d50a      	bpl.n	8009a0c <__pow5mult+0x84>
 80099f6:	4639      	mov	r1, r7
 80099f8:	4622      	mov	r2, r4
 80099fa:	4630      	mov	r0, r6
 80099fc:	f7ff ff1a 	bl	8009834 <__multiply>
 8009a00:	4639      	mov	r1, r7
 8009a02:	4680      	mov	r8, r0
 8009a04:	4630      	mov	r0, r6
 8009a06:	f7ff fe47 	bl	8009698 <_Bfree>
 8009a0a:	4647      	mov	r7, r8
 8009a0c:	106d      	asrs	r5, r5, #1
 8009a0e:	d00b      	beq.n	8009a28 <__pow5mult+0xa0>
 8009a10:	6820      	ldr	r0, [r4, #0]
 8009a12:	b938      	cbnz	r0, 8009a24 <__pow5mult+0x9c>
 8009a14:	4622      	mov	r2, r4
 8009a16:	4621      	mov	r1, r4
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f7ff ff0b 	bl	8009834 <__multiply>
 8009a1e:	6020      	str	r0, [r4, #0]
 8009a20:	f8c0 9000 	str.w	r9, [r0]
 8009a24:	4604      	mov	r4, r0
 8009a26:	e7e4      	b.n	80099f2 <__pow5mult+0x6a>
 8009a28:	4638      	mov	r0, r7
 8009a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a2e:	bf00      	nop
 8009a30:	0800acd0 	.word	0x0800acd0
 8009a34:	0800aafd 	.word	0x0800aafd
 8009a38:	0800ab80 	.word	0x0800ab80

08009a3c <__lshift>:
 8009a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a40:	460c      	mov	r4, r1
 8009a42:	6849      	ldr	r1, [r1, #4]
 8009a44:	6923      	ldr	r3, [r4, #16]
 8009a46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a4a:	68a3      	ldr	r3, [r4, #8]
 8009a4c:	4607      	mov	r7, r0
 8009a4e:	4691      	mov	r9, r2
 8009a50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a54:	f108 0601 	add.w	r6, r8, #1
 8009a58:	42b3      	cmp	r3, r6
 8009a5a:	db0b      	blt.n	8009a74 <__lshift+0x38>
 8009a5c:	4638      	mov	r0, r7
 8009a5e:	f7ff fddb 	bl	8009618 <_Balloc>
 8009a62:	4605      	mov	r5, r0
 8009a64:	b948      	cbnz	r0, 8009a7a <__lshift+0x3e>
 8009a66:	4602      	mov	r2, r0
 8009a68:	4b2a      	ldr	r3, [pc, #168]	; (8009b14 <__lshift+0xd8>)
 8009a6a:	482b      	ldr	r0, [pc, #172]	; (8009b18 <__lshift+0xdc>)
 8009a6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009a70:	f000 fa5c 	bl	8009f2c <__assert_func>
 8009a74:	3101      	adds	r1, #1
 8009a76:	005b      	lsls	r3, r3, #1
 8009a78:	e7ee      	b.n	8009a58 <__lshift+0x1c>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	f100 0114 	add.w	r1, r0, #20
 8009a80:	f100 0210 	add.w	r2, r0, #16
 8009a84:	4618      	mov	r0, r3
 8009a86:	4553      	cmp	r3, sl
 8009a88:	db37      	blt.n	8009afa <__lshift+0xbe>
 8009a8a:	6920      	ldr	r0, [r4, #16]
 8009a8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a90:	f104 0314 	add.w	r3, r4, #20
 8009a94:	f019 091f 	ands.w	r9, r9, #31
 8009a98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009aa0:	d02f      	beq.n	8009b02 <__lshift+0xc6>
 8009aa2:	f1c9 0e20 	rsb	lr, r9, #32
 8009aa6:	468a      	mov	sl, r1
 8009aa8:	f04f 0c00 	mov.w	ip, #0
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	fa02 f209 	lsl.w	r2, r2, r9
 8009ab2:	ea42 020c 	orr.w	r2, r2, ip
 8009ab6:	f84a 2b04 	str.w	r2, [sl], #4
 8009aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8009abe:	4298      	cmp	r0, r3
 8009ac0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009ac4:	d8f2      	bhi.n	8009aac <__lshift+0x70>
 8009ac6:	1b03      	subs	r3, r0, r4
 8009ac8:	3b15      	subs	r3, #21
 8009aca:	f023 0303 	bic.w	r3, r3, #3
 8009ace:	3304      	adds	r3, #4
 8009ad0:	f104 0215 	add.w	r2, r4, #21
 8009ad4:	4290      	cmp	r0, r2
 8009ad6:	bf38      	it	cc
 8009ad8:	2304      	movcc	r3, #4
 8009ada:	f841 c003 	str.w	ip, [r1, r3]
 8009ade:	f1bc 0f00 	cmp.w	ip, #0
 8009ae2:	d001      	beq.n	8009ae8 <__lshift+0xac>
 8009ae4:	f108 0602 	add.w	r6, r8, #2
 8009ae8:	3e01      	subs	r6, #1
 8009aea:	4638      	mov	r0, r7
 8009aec:	612e      	str	r6, [r5, #16]
 8009aee:	4621      	mov	r1, r4
 8009af0:	f7ff fdd2 	bl	8009698 <_Bfree>
 8009af4:	4628      	mov	r0, r5
 8009af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009afa:	f842 0f04 	str.w	r0, [r2, #4]!
 8009afe:	3301      	adds	r3, #1
 8009b00:	e7c1      	b.n	8009a86 <__lshift+0x4a>
 8009b02:	3904      	subs	r1, #4
 8009b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b08:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b0c:	4298      	cmp	r0, r3
 8009b0e:	d8f9      	bhi.n	8009b04 <__lshift+0xc8>
 8009b10:	e7ea      	b.n	8009ae8 <__lshift+0xac>
 8009b12:	bf00      	nop
 8009b14:	0800ab6f 	.word	0x0800ab6f
 8009b18:	0800ab80 	.word	0x0800ab80

08009b1c <__mcmp>:
 8009b1c:	b530      	push	{r4, r5, lr}
 8009b1e:	6902      	ldr	r2, [r0, #16]
 8009b20:	690c      	ldr	r4, [r1, #16]
 8009b22:	1b12      	subs	r2, r2, r4
 8009b24:	d10e      	bne.n	8009b44 <__mcmp+0x28>
 8009b26:	f100 0314 	add.w	r3, r0, #20
 8009b2a:	3114      	adds	r1, #20
 8009b2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b3c:	42a5      	cmp	r5, r4
 8009b3e:	d003      	beq.n	8009b48 <__mcmp+0x2c>
 8009b40:	d305      	bcc.n	8009b4e <__mcmp+0x32>
 8009b42:	2201      	movs	r2, #1
 8009b44:	4610      	mov	r0, r2
 8009b46:	bd30      	pop	{r4, r5, pc}
 8009b48:	4283      	cmp	r3, r0
 8009b4a:	d3f3      	bcc.n	8009b34 <__mcmp+0x18>
 8009b4c:	e7fa      	b.n	8009b44 <__mcmp+0x28>
 8009b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b52:	e7f7      	b.n	8009b44 <__mcmp+0x28>

08009b54 <__mdiff>:
 8009b54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b58:	460c      	mov	r4, r1
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	4611      	mov	r1, r2
 8009b5e:	4620      	mov	r0, r4
 8009b60:	4690      	mov	r8, r2
 8009b62:	f7ff ffdb 	bl	8009b1c <__mcmp>
 8009b66:	1e05      	subs	r5, r0, #0
 8009b68:	d110      	bne.n	8009b8c <__mdiff+0x38>
 8009b6a:	4629      	mov	r1, r5
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	f7ff fd53 	bl	8009618 <_Balloc>
 8009b72:	b930      	cbnz	r0, 8009b82 <__mdiff+0x2e>
 8009b74:	4b3a      	ldr	r3, [pc, #232]	; (8009c60 <__mdiff+0x10c>)
 8009b76:	4602      	mov	r2, r0
 8009b78:	f240 2132 	movw	r1, #562	; 0x232
 8009b7c:	4839      	ldr	r0, [pc, #228]	; (8009c64 <__mdiff+0x110>)
 8009b7e:	f000 f9d5 	bl	8009f2c <__assert_func>
 8009b82:	2301      	movs	r3, #1
 8009b84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b8c:	bfa4      	itt	ge
 8009b8e:	4643      	movge	r3, r8
 8009b90:	46a0      	movge	r8, r4
 8009b92:	4630      	mov	r0, r6
 8009b94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009b98:	bfa6      	itte	ge
 8009b9a:	461c      	movge	r4, r3
 8009b9c:	2500      	movge	r5, #0
 8009b9e:	2501      	movlt	r5, #1
 8009ba0:	f7ff fd3a 	bl	8009618 <_Balloc>
 8009ba4:	b920      	cbnz	r0, 8009bb0 <__mdiff+0x5c>
 8009ba6:	4b2e      	ldr	r3, [pc, #184]	; (8009c60 <__mdiff+0x10c>)
 8009ba8:	4602      	mov	r2, r0
 8009baa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009bae:	e7e5      	b.n	8009b7c <__mdiff+0x28>
 8009bb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bb4:	6926      	ldr	r6, [r4, #16]
 8009bb6:	60c5      	str	r5, [r0, #12]
 8009bb8:	f104 0914 	add.w	r9, r4, #20
 8009bbc:	f108 0514 	add.w	r5, r8, #20
 8009bc0:	f100 0e14 	add.w	lr, r0, #20
 8009bc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009bc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009bcc:	f108 0210 	add.w	r2, r8, #16
 8009bd0:	46f2      	mov	sl, lr
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009bd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009bdc:	fa1f f883 	uxth.w	r8, r3
 8009be0:	fa11 f18b 	uxtah	r1, r1, fp
 8009be4:	0c1b      	lsrs	r3, r3, #16
 8009be6:	eba1 0808 	sub.w	r8, r1, r8
 8009bea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009bee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009bf2:	fa1f f888 	uxth.w	r8, r8
 8009bf6:	1419      	asrs	r1, r3, #16
 8009bf8:	454e      	cmp	r6, r9
 8009bfa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009bfe:	f84a 3b04 	str.w	r3, [sl], #4
 8009c02:	d8e7      	bhi.n	8009bd4 <__mdiff+0x80>
 8009c04:	1b33      	subs	r3, r6, r4
 8009c06:	3b15      	subs	r3, #21
 8009c08:	f023 0303 	bic.w	r3, r3, #3
 8009c0c:	3304      	adds	r3, #4
 8009c0e:	3415      	adds	r4, #21
 8009c10:	42a6      	cmp	r6, r4
 8009c12:	bf38      	it	cc
 8009c14:	2304      	movcc	r3, #4
 8009c16:	441d      	add	r5, r3
 8009c18:	4473      	add	r3, lr
 8009c1a:	469e      	mov	lr, r3
 8009c1c:	462e      	mov	r6, r5
 8009c1e:	4566      	cmp	r6, ip
 8009c20:	d30e      	bcc.n	8009c40 <__mdiff+0xec>
 8009c22:	f10c 0203 	add.w	r2, ip, #3
 8009c26:	1b52      	subs	r2, r2, r5
 8009c28:	f022 0203 	bic.w	r2, r2, #3
 8009c2c:	3d03      	subs	r5, #3
 8009c2e:	45ac      	cmp	ip, r5
 8009c30:	bf38      	it	cc
 8009c32:	2200      	movcc	r2, #0
 8009c34:	441a      	add	r2, r3
 8009c36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c3a:	b17b      	cbz	r3, 8009c5c <__mdiff+0x108>
 8009c3c:	6107      	str	r7, [r0, #16]
 8009c3e:	e7a3      	b.n	8009b88 <__mdiff+0x34>
 8009c40:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c44:	fa11 f288 	uxtah	r2, r1, r8
 8009c48:	1414      	asrs	r4, r2, #16
 8009c4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c4e:	b292      	uxth	r2, r2
 8009c50:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c54:	f84e 2b04 	str.w	r2, [lr], #4
 8009c58:	1421      	asrs	r1, r4, #16
 8009c5a:	e7e0      	b.n	8009c1e <__mdiff+0xca>
 8009c5c:	3f01      	subs	r7, #1
 8009c5e:	e7ea      	b.n	8009c36 <__mdiff+0xe2>
 8009c60:	0800ab6f 	.word	0x0800ab6f
 8009c64:	0800ab80 	.word	0x0800ab80

08009c68 <__d2b>:
 8009c68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c6c:	4689      	mov	r9, r1
 8009c6e:	2101      	movs	r1, #1
 8009c70:	ec57 6b10 	vmov	r6, r7, d0
 8009c74:	4690      	mov	r8, r2
 8009c76:	f7ff fccf 	bl	8009618 <_Balloc>
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	b930      	cbnz	r0, 8009c8c <__d2b+0x24>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	4b25      	ldr	r3, [pc, #148]	; (8009d18 <__d2b+0xb0>)
 8009c82:	4826      	ldr	r0, [pc, #152]	; (8009d1c <__d2b+0xb4>)
 8009c84:	f240 310a 	movw	r1, #778	; 0x30a
 8009c88:	f000 f950 	bl	8009f2c <__assert_func>
 8009c8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c94:	bb35      	cbnz	r5, 8009ce4 <__d2b+0x7c>
 8009c96:	2e00      	cmp	r6, #0
 8009c98:	9301      	str	r3, [sp, #4]
 8009c9a:	d028      	beq.n	8009cee <__d2b+0x86>
 8009c9c:	4668      	mov	r0, sp
 8009c9e:	9600      	str	r6, [sp, #0]
 8009ca0:	f7ff fd82 	bl	80097a8 <__lo0bits>
 8009ca4:	9900      	ldr	r1, [sp, #0]
 8009ca6:	b300      	cbz	r0, 8009cea <__d2b+0x82>
 8009ca8:	9a01      	ldr	r2, [sp, #4]
 8009caa:	f1c0 0320 	rsb	r3, r0, #32
 8009cae:	fa02 f303 	lsl.w	r3, r2, r3
 8009cb2:	430b      	orrs	r3, r1
 8009cb4:	40c2      	lsrs	r2, r0
 8009cb6:	6163      	str	r3, [r4, #20]
 8009cb8:	9201      	str	r2, [sp, #4]
 8009cba:	9b01      	ldr	r3, [sp, #4]
 8009cbc:	61a3      	str	r3, [r4, #24]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	bf14      	ite	ne
 8009cc2:	2202      	movne	r2, #2
 8009cc4:	2201      	moveq	r2, #1
 8009cc6:	6122      	str	r2, [r4, #16]
 8009cc8:	b1d5      	cbz	r5, 8009d00 <__d2b+0x98>
 8009cca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009cce:	4405      	add	r5, r0
 8009cd0:	f8c9 5000 	str.w	r5, [r9]
 8009cd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009cd8:	f8c8 0000 	str.w	r0, [r8]
 8009cdc:	4620      	mov	r0, r4
 8009cde:	b003      	add	sp, #12
 8009ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ce4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ce8:	e7d5      	b.n	8009c96 <__d2b+0x2e>
 8009cea:	6161      	str	r1, [r4, #20]
 8009cec:	e7e5      	b.n	8009cba <__d2b+0x52>
 8009cee:	a801      	add	r0, sp, #4
 8009cf0:	f7ff fd5a 	bl	80097a8 <__lo0bits>
 8009cf4:	9b01      	ldr	r3, [sp, #4]
 8009cf6:	6163      	str	r3, [r4, #20]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	6122      	str	r2, [r4, #16]
 8009cfc:	3020      	adds	r0, #32
 8009cfe:	e7e3      	b.n	8009cc8 <__d2b+0x60>
 8009d00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d08:	f8c9 0000 	str.w	r0, [r9]
 8009d0c:	6918      	ldr	r0, [r3, #16]
 8009d0e:	f7ff fd2b 	bl	8009768 <__hi0bits>
 8009d12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d16:	e7df      	b.n	8009cd8 <__d2b+0x70>
 8009d18:	0800ab6f 	.word	0x0800ab6f
 8009d1c:	0800ab80 	.word	0x0800ab80

08009d20 <_calloc_r>:
 8009d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d22:	fba1 2402 	umull	r2, r4, r1, r2
 8009d26:	b94c      	cbnz	r4, 8009d3c <_calloc_r+0x1c>
 8009d28:	4611      	mov	r1, r2
 8009d2a:	9201      	str	r2, [sp, #4]
 8009d2c:	f000 f87a 	bl	8009e24 <_malloc_r>
 8009d30:	9a01      	ldr	r2, [sp, #4]
 8009d32:	4605      	mov	r5, r0
 8009d34:	b930      	cbnz	r0, 8009d44 <_calloc_r+0x24>
 8009d36:	4628      	mov	r0, r5
 8009d38:	b003      	add	sp, #12
 8009d3a:	bd30      	pop	{r4, r5, pc}
 8009d3c:	220c      	movs	r2, #12
 8009d3e:	6002      	str	r2, [r0, #0]
 8009d40:	2500      	movs	r5, #0
 8009d42:	e7f8      	b.n	8009d36 <_calloc_r+0x16>
 8009d44:	4621      	mov	r1, r4
 8009d46:	f7fe f961 	bl	800800c <memset>
 8009d4a:	e7f4      	b.n	8009d36 <_calloc_r+0x16>

08009d4c <_free_r>:
 8009d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d4e:	2900      	cmp	r1, #0
 8009d50:	d044      	beq.n	8009ddc <_free_r+0x90>
 8009d52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d56:	9001      	str	r0, [sp, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f1a1 0404 	sub.w	r4, r1, #4
 8009d5e:	bfb8      	it	lt
 8009d60:	18e4      	addlt	r4, r4, r3
 8009d62:	f000 f925 	bl	8009fb0 <__malloc_lock>
 8009d66:	4a1e      	ldr	r2, [pc, #120]	; (8009de0 <_free_r+0x94>)
 8009d68:	9801      	ldr	r0, [sp, #4]
 8009d6a:	6813      	ldr	r3, [r2, #0]
 8009d6c:	b933      	cbnz	r3, 8009d7c <_free_r+0x30>
 8009d6e:	6063      	str	r3, [r4, #4]
 8009d70:	6014      	str	r4, [r2, #0]
 8009d72:	b003      	add	sp, #12
 8009d74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d78:	f000 b920 	b.w	8009fbc <__malloc_unlock>
 8009d7c:	42a3      	cmp	r3, r4
 8009d7e:	d908      	bls.n	8009d92 <_free_r+0x46>
 8009d80:	6825      	ldr	r5, [r4, #0]
 8009d82:	1961      	adds	r1, r4, r5
 8009d84:	428b      	cmp	r3, r1
 8009d86:	bf01      	itttt	eq
 8009d88:	6819      	ldreq	r1, [r3, #0]
 8009d8a:	685b      	ldreq	r3, [r3, #4]
 8009d8c:	1949      	addeq	r1, r1, r5
 8009d8e:	6021      	streq	r1, [r4, #0]
 8009d90:	e7ed      	b.n	8009d6e <_free_r+0x22>
 8009d92:	461a      	mov	r2, r3
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	b10b      	cbz	r3, 8009d9c <_free_r+0x50>
 8009d98:	42a3      	cmp	r3, r4
 8009d9a:	d9fa      	bls.n	8009d92 <_free_r+0x46>
 8009d9c:	6811      	ldr	r1, [r2, #0]
 8009d9e:	1855      	adds	r5, r2, r1
 8009da0:	42a5      	cmp	r5, r4
 8009da2:	d10b      	bne.n	8009dbc <_free_r+0x70>
 8009da4:	6824      	ldr	r4, [r4, #0]
 8009da6:	4421      	add	r1, r4
 8009da8:	1854      	adds	r4, r2, r1
 8009daa:	42a3      	cmp	r3, r4
 8009dac:	6011      	str	r1, [r2, #0]
 8009dae:	d1e0      	bne.n	8009d72 <_free_r+0x26>
 8009db0:	681c      	ldr	r4, [r3, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	6053      	str	r3, [r2, #4]
 8009db6:	4421      	add	r1, r4
 8009db8:	6011      	str	r1, [r2, #0]
 8009dba:	e7da      	b.n	8009d72 <_free_r+0x26>
 8009dbc:	d902      	bls.n	8009dc4 <_free_r+0x78>
 8009dbe:	230c      	movs	r3, #12
 8009dc0:	6003      	str	r3, [r0, #0]
 8009dc2:	e7d6      	b.n	8009d72 <_free_r+0x26>
 8009dc4:	6825      	ldr	r5, [r4, #0]
 8009dc6:	1961      	adds	r1, r4, r5
 8009dc8:	428b      	cmp	r3, r1
 8009dca:	bf04      	itt	eq
 8009dcc:	6819      	ldreq	r1, [r3, #0]
 8009dce:	685b      	ldreq	r3, [r3, #4]
 8009dd0:	6063      	str	r3, [r4, #4]
 8009dd2:	bf04      	itt	eq
 8009dd4:	1949      	addeq	r1, r1, r5
 8009dd6:	6021      	streq	r1, [r4, #0]
 8009dd8:	6054      	str	r4, [r2, #4]
 8009dda:	e7ca      	b.n	8009d72 <_free_r+0x26>
 8009ddc:	b003      	add	sp, #12
 8009dde:	bd30      	pop	{r4, r5, pc}
 8009de0:	20001f54 	.word	0x20001f54

08009de4 <sbrk_aligned>:
 8009de4:	b570      	push	{r4, r5, r6, lr}
 8009de6:	4e0e      	ldr	r6, [pc, #56]	; (8009e20 <sbrk_aligned+0x3c>)
 8009de8:	460c      	mov	r4, r1
 8009dea:	6831      	ldr	r1, [r6, #0]
 8009dec:	4605      	mov	r5, r0
 8009dee:	b911      	cbnz	r1, 8009df6 <sbrk_aligned+0x12>
 8009df0:	f000 f88c 	bl	8009f0c <_sbrk_r>
 8009df4:	6030      	str	r0, [r6, #0]
 8009df6:	4621      	mov	r1, r4
 8009df8:	4628      	mov	r0, r5
 8009dfa:	f000 f887 	bl	8009f0c <_sbrk_r>
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	d00a      	beq.n	8009e18 <sbrk_aligned+0x34>
 8009e02:	1cc4      	adds	r4, r0, #3
 8009e04:	f024 0403 	bic.w	r4, r4, #3
 8009e08:	42a0      	cmp	r0, r4
 8009e0a:	d007      	beq.n	8009e1c <sbrk_aligned+0x38>
 8009e0c:	1a21      	subs	r1, r4, r0
 8009e0e:	4628      	mov	r0, r5
 8009e10:	f000 f87c 	bl	8009f0c <_sbrk_r>
 8009e14:	3001      	adds	r0, #1
 8009e16:	d101      	bne.n	8009e1c <sbrk_aligned+0x38>
 8009e18:	f04f 34ff 	mov.w	r4, #4294967295
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	bd70      	pop	{r4, r5, r6, pc}
 8009e20:	20001f58 	.word	0x20001f58

08009e24 <_malloc_r>:
 8009e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e28:	1ccd      	adds	r5, r1, #3
 8009e2a:	f025 0503 	bic.w	r5, r5, #3
 8009e2e:	3508      	adds	r5, #8
 8009e30:	2d0c      	cmp	r5, #12
 8009e32:	bf38      	it	cc
 8009e34:	250c      	movcc	r5, #12
 8009e36:	2d00      	cmp	r5, #0
 8009e38:	4607      	mov	r7, r0
 8009e3a:	db01      	blt.n	8009e40 <_malloc_r+0x1c>
 8009e3c:	42a9      	cmp	r1, r5
 8009e3e:	d905      	bls.n	8009e4c <_malloc_r+0x28>
 8009e40:	230c      	movs	r3, #12
 8009e42:	603b      	str	r3, [r7, #0]
 8009e44:	2600      	movs	r6, #0
 8009e46:	4630      	mov	r0, r6
 8009e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e4c:	4e2e      	ldr	r6, [pc, #184]	; (8009f08 <_malloc_r+0xe4>)
 8009e4e:	f000 f8af 	bl	8009fb0 <__malloc_lock>
 8009e52:	6833      	ldr	r3, [r6, #0]
 8009e54:	461c      	mov	r4, r3
 8009e56:	bb34      	cbnz	r4, 8009ea6 <_malloc_r+0x82>
 8009e58:	4629      	mov	r1, r5
 8009e5a:	4638      	mov	r0, r7
 8009e5c:	f7ff ffc2 	bl	8009de4 <sbrk_aligned>
 8009e60:	1c43      	adds	r3, r0, #1
 8009e62:	4604      	mov	r4, r0
 8009e64:	d14d      	bne.n	8009f02 <_malloc_r+0xde>
 8009e66:	6834      	ldr	r4, [r6, #0]
 8009e68:	4626      	mov	r6, r4
 8009e6a:	2e00      	cmp	r6, #0
 8009e6c:	d140      	bne.n	8009ef0 <_malloc_r+0xcc>
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	4631      	mov	r1, r6
 8009e72:	4638      	mov	r0, r7
 8009e74:	eb04 0803 	add.w	r8, r4, r3
 8009e78:	f000 f848 	bl	8009f0c <_sbrk_r>
 8009e7c:	4580      	cmp	r8, r0
 8009e7e:	d13a      	bne.n	8009ef6 <_malloc_r+0xd2>
 8009e80:	6821      	ldr	r1, [r4, #0]
 8009e82:	3503      	adds	r5, #3
 8009e84:	1a6d      	subs	r5, r5, r1
 8009e86:	f025 0503 	bic.w	r5, r5, #3
 8009e8a:	3508      	adds	r5, #8
 8009e8c:	2d0c      	cmp	r5, #12
 8009e8e:	bf38      	it	cc
 8009e90:	250c      	movcc	r5, #12
 8009e92:	4629      	mov	r1, r5
 8009e94:	4638      	mov	r0, r7
 8009e96:	f7ff ffa5 	bl	8009de4 <sbrk_aligned>
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	d02b      	beq.n	8009ef6 <_malloc_r+0xd2>
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	442b      	add	r3, r5
 8009ea2:	6023      	str	r3, [r4, #0]
 8009ea4:	e00e      	b.n	8009ec4 <_malloc_r+0xa0>
 8009ea6:	6822      	ldr	r2, [r4, #0]
 8009ea8:	1b52      	subs	r2, r2, r5
 8009eaa:	d41e      	bmi.n	8009eea <_malloc_r+0xc6>
 8009eac:	2a0b      	cmp	r2, #11
 8009eae:	d916      	bls.n	8009ede <_malloc_r+0xba>
 8009eb0:	1961      	adds	r1, r4, r5
 8009eb2:	42a3      	cmp	r3, r4
 8009eb4:	6025      	str	r5, [r4, #0]
 8009eb6:	bf18      	it	ne
 8009eb8:	6059      	strne	r1, [r3, #4]
 8009eba:	6863      	ldr	r3, [r4, #4]
 8009ebc:	bf08      	it	eq
 8009ebe:	6031      	streq	r1, [r6, #0]
 8009ec0:	5162      	str	r2, [r4, r5]
 8009ec2:	604b      	str	r3, [r1, #4]
 8009ec4:	4638      	mov	r0, r7
 8009ec6:	f104 060b 	add.w	r6, r4, #11
 8009eca:	f000 f877 	bl	8009fbc <__malloc_unlock>
 8009ece:	f026 0607 	bic.w	r6, r6, #7
 8009ed2:	1d23      	adds	r3, r4, #4
 8009ed4:	1af2      	subs	r2, r6, r3
 8009ed6:	d0b6      	beq.n	8009e46 <_malloc_r+0x22>
 8009ed8:	1b9b      	subs	r3, r3, r6
 8009eda:	50a3      	str	r3, [r4, r2]
 8009edc:	e7b3      	b.n	8009e46 <_malloc_r+0x22>
 8009ede:	6862      	ldr	r2, [r4, #4]
 8009ee0:	42a3      	cmp	r3, r4
 8009ee2:	bf0c      	ite	eq
 8009ee4:	6032      	streq	r2, [r6, #0]
 8009ee6:	605a      	strne	r2, [r3, #4]
 8009ee8:	e7ec      	b.n	8009ec4 <_malloc_r+0xa0>
 8009eea:	4623      	mov	r3, r4
 8009eec:	6864      	ldr	r4, [r4, #4]
 8009eee:	e7b2      	b.n	8009e56 <_malloc_r+0x32>
 8009ef0:	4634      	mov	r4, r6
 8009ef2:	6876      	ldr	r6, [r6, #4]
 8009ef4:	e7b9      	b.n	8009e6a <_malloc_r+0x46>
 8009ef6:	230c      	movs	r3, #12
 8009ef8:	603b      	str	r3, [r7, #0]
 8009efa:	4638      	mov	r0, r7
 8009efc:	f000 f85e 	bl	8009fbc <__malloc_unlock>
 8009f00:	e7a1      	b.n	8009e46 <_malloc_r+0x22>
 8009f02:	6025      	str	r5, [r4, #0]
 8009f04:	e7de      	b.n	8009ec4 <_malloc_r+0xa0>
 8009f06:	bf00      	nop
 8009f08:	20001f54 	.word	0x20001f54

08009f0c <_sbrk_r>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	4d06      	ldr	r5, [pc, #24]	; (8009f28 <_sbrk_r+0x1c>)
 8009f10:	2300      	movs	r3, #0
 8009f12:	4604      	mov	r4, r0
 8009f14:	4608      	mov	r0, r1
 8009f16:	602b      	str	r3, [r5, #0]
 8009f18:	f7f7 fa7c 	bl	8001414 <_sbrk>
 8009f1c:	1c43      	adds	r3, r0, #1
 8009f1e:	d102      	bne.n	8009f26 <_sbrk_r+0x1a>
 8009f20:	682b      	ldr	r3, [r5, #0]
 8009f22:	b103      	cbz	r3, 8009f26 <_sbrk_r+0x1a>
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	bd38      	pop	{r3, r4, r5, pc}
 8009f28:	20001f5c 	.word	0x20001f5c

08009f2c <__assert_func>:
 8009f2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f2e:	4614      	mov	r4, r2
 8009f30:	461a      	mov	r2, r3
 8009f32:	4b09      	ldr	r3, [pc, #36]	; (8009f58 <__assert_func+0x2c>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4605      	mov	r5, r0
 8009f38:	68d8      	ldr	r0, [r3, #12]
 8009f3a:	b14c      	cbz	r4, 8009f50 <__assert_func+0x24>
 8009f3c:	4b07      	ldr	r3, [pc, #28]	; (8009f5c <__assert_func+0x30>)
 8009f3e:	9100      	str	r1, [sp, #0]
 8009f40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f44:	4906      	ldr	r1, [pc, #24]	; (8009f60 <__assert_func+0x34>)
 8009f46:	462b      	mov	r3, r5
 8009f48:	f000 f80e 	bl	8009f68 <fiprintf>
 8009f4c:	f000 fa64 	bl	800a418 <abort>
 8009f50:	4b04      	ldr	r3, [pc, #16]	; (8009f64 <__assert_func+0x38>)
 8009f52:	461c      	mov	r4, r3
 8009f54:	e7f3      	b.n	8009f3e <__assert_func+0x12>
 8009f56:	bf00      	nop
 8009f58:	20000104 	.word	0x20000104
 8009f5c:	0800acdc 	.word	0x0800acdc
 8009f60:	0800ace9 	.word	0x0800ace9
 8009f64:	0800ad17 	.word	0x0800ad17

08009f68 <fiprintf>:
 8009f68:	b40e      	push	{r1, r2, r3}
 8009f6a:	b503      	push	{r0, r1, lr}
 8009f6c:	4601      	mov	r1, r0
 8009f6e:	ab03      	add	r3, sp, #12
 8009f70:	4805      	ldr	r0, [pc, #20]	; (8009f88 <fiprintf+0x20>)
 8009f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f76:	6800      	ldr	r0, [r0, #0]
 8009f78:	9301      	str	r3, [sp, #4]
 8009f7a:	f000 f84f 	bl	800a01c <_vfiprintf_r>
 8009f7e:	b002      	add	sp, #8
 8009f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f84:	b003      	add	sp, #12
 8009f86:	4770      	bx	lr
 8009f88:	20000104 	.word	0x20000104

08009f8c <__ascii_mbtowc>:
 8009f8c:	b082      	sub	sp, #8
 8009f8e:	b901      	cbnz	r1, 8009f92 <__ascii_mbtowc+0x6>
 8009f90:	a901      	add	r1, sp, #4
 8009f92:	b142      	cbz	r2, 8009fa6 <__ascii_mbtowc+0x1a>
 8009f94:	b14b      	cbz	r3, 8009faa <__ascii_mbtowc+0x1e>
 8009f96:	7813      	ldrb	r3, [r2, #0]
 8009f98:	600b      	str	r3, [r1, #0]
 8009f9a:	7812      	ldrb	r2, [r2, #0]
 8009f9c:	1e10      	subs	r0, r2, #0
 8009f9e:	bf18      	it	ne
 8009fa0:	2001      	movne	r0, #1
 8009fa2:	b002      	add	sp, #8
 8009fa4:	4770      	bx	lr
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	e7fb      	b.n	8009fa2 <__ascii_mbtowc+0x16>
 8009faa:	f06f 0001 	mvn.w	r0, #1
 8009fae:	e7f8      	b.n	8009fa2 <__ascii_mbtowc+0x16>

08009fb0 <__malloc_lock>:
 8009fb0:	4801      	ldr	r0, [pc, #4]	; (8009fb8 <__malloc_lock+0x8>)
 8009fb2:	f000 bbf1 	b.w	800a798 <__retarget_lock_acquire_recursive>
 8009fb6:	bf00      	nop
 8009fb8:	20001f60 	.word	0x20001f60

08009fbc <__malloc_unlock>:
 8009fbc:	4801      	ldr	r0, [pc, #4]	; (8009fc4 <__malloc_unlock+0x8>)
 8009fbe:	f000 bbec 	b.w	800a79a <__retarget_lock_release_recursive>
 8009fc2:	bf00      	nop
 8009fc4:	20001f60 	.word	0x20001f60

08009fc8 <__sfputc_r>:
 8009fc8:	6893      	ldr	r3, [r2, #8]
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	b410      	push	{r4}
 8009fd0:	6093      	str	r3, [r2, #8]
 8009fd2:	da08      	bge.n	8009fe6 <__sfputc_r+0x1e>
 8009fd4:	6994      	ldr	r4, [r2, #24]
 8009fd6:	42a3      	cmp	r3, r4
 8009fd8:	db01      	blt.n	8009fde <__sfputc_r+0x16>
 8009fda:	290a      	cmp	r1, #10
 8009fdc:	d103      	bne.n	8009fe6 <__sfputc_r+0x1e>
 8009fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fe2:	f000 b94b 	b.w	800a27c <__swbuf_r>
 8009fe6:	6813      	ldr	r3, [r2, #0]
 8009fe8:	1c58      	adds	r0, r3, #1
 8009fea:	6010      	str	r0, [r2, #0]
 8009fec:	7019      	strb	r1, [r3, #0]
 8009fee:	4608      	mov	r0, r1
 8009ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <__sfputs_r>:
 8009ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff8:	4606      	mov	r6, r0
 8009ffa:	460f      	mov	r7, r1
 8009ffc:	4614      	mov	r4, r2
 8009ffe:	18d5      	adds	r5, r2, r3
 800a000:	42ac      	cmp	r4, r5
 800a002:	d101      	bne.n	800a008 <__sfputs_r+0x12>
 800a004:	2000      	movs	r0, #0
 800a006:	e007      	b.n	800a018 <__sfputs_r+0x22>
 800a008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a00c:	463a      	mov	r2, r7
 800a00e:	4630      	mov	r0, r6
 800a010:	f7ff ffda 	bl	8009fc8 <__sfputc_r>
 800a014:	1c43      	adds	r3, r0, #1
 800a016:	d1f3      	bne.n	800a000 <__sfputs_r+0xa>
 800a018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a01c <_vfiprintf_r>:
 800a01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a020:	460d      	mov	r5, r1
 800a022:	b09d      	sub	sp, #116	; 0x74
 800a024:	4614      	mov	r4, r2
 800a026:	4698      	mov	r8, r3
 800a028:	4606      	mov	r6, r0
 800a02a:	b118      	cbz	r0, 800a034 <_vfiprintf_r+0x18>
 800a02c:	6983      	ldr	r3, [r0, #24]
 800a02e:	b90b      	cbnz	r3, 800a034 <_vfiprintf_r+0x18>
 800a030:	f000 fb14 	bl	800a65c <__sinit>
 800a034:	4b89      	ldr	r3, [pc, #548]	; (800a25c <_vfiprintf_r+0x240>)
 800a036:	429d      	cmp	r5, r3
 800a038:	d11b      	bne.n	800a072 <_vfiprintf_r+0x56>
 800a03a:	6875      	ldr	r5, [r6, #4]
 800a03c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a03e:	07d9      	lsls	r1, r3, #31
 800a040:	d405      	bmi.n	800a04e <_vfiprintf_r+0x32>
 800a042:	89ab      	ldrh	r3, [r5, #12]
 800a044:	059a      	lsls	r2, r3, #22
 800a046:	d402      	bmi.n	800a04e <_vfiprintf_r+0x32>
 800a048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a04a:	f000 fba5 	bl	800a798 <__retarget_lock_acquire_recursive>
 800a04e:	89ab      	ldrh	r3, [r5, #12]
 800a050:	071b      	lsls	r3, r3, #28
 800a052:	d501      	bpl.n	800a058 <_vfiprintf_r+0x3c>
 800a054:	692b      	ldr	r3, [r5, #16]
 800a056:	b9eb      	cbnz	r3, 800a094 <_vfiprintf_r+0x78>
 800a058:	4629      	mov	r1, r5
 800a05a:	4630      	mov	r0, r6
 800a05c:	f000 f96e 	bl	800a33c <__swsetup_r>
 800a060:	b1c0      	cbz	r0, 800a094 <_vfiprintf_r+0x78>
 800a062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a064:	07dc      	lsls	r4, r3, #31
 800a066:	d50e      	bpl.n	800a086 <_vfiprintf_r+0x6a>
 800a068:	f04f 30ff 	mov.w	r0, #4294967295
 800a06c:	b01d      	add	sp, #116	; 0x74
 800a06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a072:	4b7b      	ldr	r3, [pc, #492]	; (800a260 <_vfiprintf_r+0x244>)
 800a074:	429d      	cmp	r5, r3
 800a076:	d101      	bne.n	800a07c <_vfiprintf_r+0x60>
 800a078:	68b5      	ldr	r5, [r6, #8]
 800a07a:	e7df      	b.n	800a03c <_vfiprintf_r+0x20>
 800a07c:	4b79      	ldr	r3, [pc, #484]	; (800a264 <_vfiprintf_r+0x248>)
 800a07e:	429d      	cmp	r5, r3
 800a080:	bf08      	it	eq
 800a082:	68f5      	ldreq	r5, [r6, #12]
 800a084:	e7da      	b.n	800a03c <_vfiprintf_r+0x20>
 800a086:	89ab      	ldrh	r3, [r5, #12]
 800a088:	0598      	lsls	r0, r3, #22
 800a08a:	d4ed      	bmi.n	800a068 <_vfiprintf_r+0x4c>
 800a08c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a08e:	f000 fb84 	bl	800a79a <__retarget_lock_release_recursive>
 800a092:	e7e9      	b.n	800a068 <_vfiprintf_r+0x4c>
 800a094:	2300      	movs	r3, #0
 800a096:	9309      	str	r3, [sp, #36]	; 0x24
 800a098:	2320      	movs	r3, #32
 800a09a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a09e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0a2:	2330      	movs	r3, #48	; 0x30
 800a0a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a268 <_vfiprintf_r+0x24c>
 800a0a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0ac:	f04f 0901 	mov.w	r9, #1
 800a0b0:	4623      	mov	r3, r4
 800a0b2:	469a      	mov	sl, r3
 800a0b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0b8:	b10a      	cbz	r2, 800a0be <_vfiprintf_r+0xa2>
 800a0ba:	2a25      	cmp	r2, #37	; 0x25
 800a0bc:	d1f9      	bne.n	800a0b2 <_vfiprintf_r+0x96>
 800a0be:	ebba 0b04 	subs.w	fp, sl, r4
 800a0c2:	d00b      	beq.n	800a0dc <_vfiprintf_r+0xc0>
 800a0c4:	465b      	mov	r3, fp
 800a0c6:	4622      	mov	r2, r4
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f7ff ff93 	bl	8009ff6 <__sfputs_r>
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	f000 80aa 	beq.w	800a22a <_vfiprintf_r+0x20e>
 800a0d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0d8:	445a      	add	r2, fp
 800a0da:	9209      	str	r2, [sp, #36]	; 0x24
 800a0dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f000 80a2 	beq.w	800a22a <_vfiprintf_r+0x20e>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0f0:	f10a 0a01 	add.w	sl, sl, #1
 800a0f4:	9304      	str	r3, [sp, #16]
 800a0f6:	9307      	str	r3, [sp, #28]
 800a0f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0fc:	931a      	str	r3, [sp, #104]	; 0x68
 800a0fe:	4654      	mov	r4, sl
 800a100:	2205      	movs	r2, #5
 800a102:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a106:	4858      	ldr	r0, [pc, #352]	; (800a268 <_vfiprintf_r+0x24c>)
 800a108:	f7f6 f872 	bl	80001f0 <memchr>
 800a10c:	9a04      	ldr	r2, [sp, #16]
 800a10e:	b9d8      	cbnz	r0, 800a148 <_vfiprintf_r+0x12c>
 800a110:	06d1      	lsls	r1, r2, #27
 800a112:	bf44      	itt	mi
 800a114:	2320      	movmi	r3, #32
 800a116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a11a:	0713      	lsls	r3, r2, #28
 800a11c:	bf44      	itt	mi
 800a11e:	232b      	movmi	r3, #43	; 0x2b
 800a120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a124:	f89a 3000 	ldrb.w	r3, [sl]
 800a128:	2b2a      	cmp	r3, #42	; 0x2a
 800a12a:	d015      	beq.n	800a158 <_vfiprintf_r+0x13c>
 800a12c:	9a07      	ldr	r2, [sp, #28]
 800a12e:	4654      	mov	r4, sl
 800a130:	2000      	movs	r0, #0
 800a132:	f04f 0c0a 	mov.w	ip, #10
 800a136:	4621      	mov	r1, r4
 800a138:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a13c:	3b30      	subs	r3, #48	; 0x30
 800a13e:	2b09      	cmp	r3, #9
 800a140:	d94e      	bls.n	800a1e0 <_vfiprintf_r+0x1c4>
 800a142:	b1b0      	cbz	r0, 800a172 <_vfiprintf_r+0x156>
 800a144:	9207      	str	r2, [sp, #28]
 800a146:	e014      	b.n	800a172 <_vfiprintf_r+0x156>
 800a148:	eba0 0308 	sub.w	r3, r0, r8
 800a14c:	fa09 f303 	lsl.w	r3, r9, r3
 800a150:	4313      	orrs	r3, r2
 800a152:	9304      	str	r3, [sp, #16]
 800a154:	46a2      	mov	sl, r4
 800a156:	e7d2      	b.n	800a0fe <_vfiprintf_r+0xe2>
 800a158:	9b03      	ldr	r3, [sp, #12]
 800a15a:	1d19      	adds	r1, r3, #4
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	9103      	str	r1, [sp, #12]
 800a160:	2b00      	cmp	r3, #0
 800a162:	bfbb      	ittet	lt
 800a164:	425b      	neglt	r3, r3
 800a166:	f042 0202 	orrlt.w	r2, r2, #2
 800a16a:	9307      	strge	r3, [sp, #28]
 800a16c:	9307      	strlt	r3, [sp, #28]
 800a16e:	bfb8      	it	lt
 800a170:	9204      	strlt	r2, [sp, #16]
 800a172:	7823      	ldrb	r3, [r4, #0]
 800a174:	2b2e      	cmp	r3, #46	; 0x2e
 800a176:	d10c      	bne.n	800a192 <_vfiprintf_r+0x176>
 800a178:	7863      	ldrb	r3, [r4, #1]
 800a17a:	2b2a      	cmp	r3, #42	; 0x2a
 800a17c:	d135      	bne.n	800a1ea <_vfiprintf_r+0x1ce>
 800a17e:	9b03      	ldr	r3, [sp, #12]
 800a180:	1d1a      	adds	r2, r3, #4
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	9203      	str	r2, [sp, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	bfb8      	it	lt
 800a18a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a18e:	3402      	adds	r4, #2
 800a190:	9305      	str	r3, [sp, #20]
 800a192:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a278 <_vfiprintf_r+0x25c>
 800a196:	7821      	ldrb	r1, [r4, #0]
 800a198:	2203      	movs	r2, #3
 800a19a:	4650      	mov	r0, sl
 800a19c:	f7f6 f828 	bl	80001f0 <memchr>
 800a1a0:	b140      	cbz	r0, 800a1b4 <_vfiprintf_r+0x198>
 800a1a2:	2340      	movs	r3, #64	; 0x40
 800a1a4:	eba0 000a 	sub.w	r0, r0, sl
 800a1a8:	fa03 f000 	lsl.w	r0, r3, r0
 800a1ac:	9b04      	ldr	r3, [sp, #16]
 800a1ae:	4303      	orrs	r3, r0
 800a1b0:	3401      	adds	r4, #1
 800a1b2:	9304      	str	r3, [sp, #16]
 800a1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b8:	482c      	ldr	r0, [pc, #176]	; (800a26c <_vfiprintf_r+0x250>)
 800a1ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1be:	2206      	movs	r2, #6
 800a1c0:	f7f6 f816 	bl	80001f0 <memchr>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d03f      	beq.n	800a248 <_vfiprintf_r+0x22c>
 800a1c8:	4b29      	ldr	r3, [pc, #164]	; (800a270 <_vfiprintf_r+0x254>)
 800a1ca:	bb1b      	cbnz	r3, 800a214 <_vfiprintf_r+0x1f8>
 800a1cc:	9b03      	ldr	r3, [sp, #12]
 800a1ce:	3307      	adds	r3, #7
 800a1d0:	f023 0307 	bic.w	r3, r3, #7
 800a1d4:	3308      	adds	r3, #8
 800a1d6:	9303      	str	r3, [sp, #12]
 800a1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1da:	443b      	add	r3, r7
 800a1dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a1de:	e767      	b.n	800a0b0 <_vfiprintf_r+0x94>
 800a1e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1e4:	460c      	mov	r4, r1
 800a1e6:	2001      	movs	r0, #1
 800a1e8:	e7a5      	b.n	800a136 <_vfiprintf_r+0x11a>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	3401      	adds	r4, #1
 800a1ee:	9305      	str	r3, [sp, #20]
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	f04f 0c0a 	mov.w	ip, #10
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1fc:	3a30      	subs	r2, #48	; 0x30
 800a1fe:	2a09      	cmp	r2, #9
 800a200:	d903      	bls.n	800a20a <_vfiprintf_r+0x1ee>
 800a202:	2b00      	cmp	r3, #0
 800a204:	d0c5      	beq.n	800a192 <_vfiprintf_r+0x176>
 800a206:	9105      	str	r1, [sp, #20]
 800a208:	e7c3      	b.n	800a192 <_vfiprintf_r+0x176>
 800a20a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a20e:	4604      	mov	r4, r0
 800a210:	2301      	movs	r3, #1
 800a212:	e7f0      	b.n	800a1f6 <_vfiprintf_r+0x1da>
 800a214:	ab03      	add	r3, sp, #12
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	462a      	mov	r2, r5
 800a21a:	4b16      	ldr	r3, [pc, #88]	; (800a274 <_vfiprintf_r+0x258>)
 800a21c:	a904      	add	r1, sp, #16
 800a21e:	4630      	mov	r0, r6
 800a220:	f7fd ff9c 	bl	800815c <_printf_float>
 800a224:	4607      	mov	r7, r0
 800a226:	1c78      	adds	r0, r7, #1
 800a228:	d1d6      	bne.n	800a1d8 <_vfiprintf_r+0x1bc>
 800a22a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a22c:	07d9      	lsls	r1, r3, #31
 800a22e:	d405      	bmi.n	800a23c <_vfiprintf_r+0x220>
 800a230:	89ab      	ldrh	r3, [r5, #12]
 800a232:	059a      	lsls	r2, r3, #22
 800a234:	d402      	bmi.n	800a23c <_vfiprintf_r+0x220>
 800a236:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a238:	f000 faaf 	bl	800a79a <__retarget_lock_release_recursive>
 800a23c:	89ab      	ldrh	r3, [r5, #12]
 800a23e:	065b      	lsls	r3, r3, #25
 800a240:	f53f af12 	bmi.w	800a068 <_vfiprintf_r+0x4c>
 800a244:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a246:	e711      	b.n	800a06c <_vfiprintf_r+0x50>
 800a248:	ab03      	add	r3, sp, #12
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	462a      	mov	r2, r5
 800a24e:	4b09      	ldr	r3, [pc, #36]	; (800a274 <_vfiprintf_r+0x258>)
 800a250:	a904      	add	r1, sp, #16
 800a252:	4630      	mov	r0, r6
 800a254:	f7fe fa26 	bl	80086a4 <_printf_i>
 800a258:	e7e4      	b.n	800a224 <_vfiprintf_r+0x208>
 800a25a:	bf00      	nop
 800a25c:	0800ae54 	.word	0x0800ae54
 800a260:	0800ae74 	.word	0x0800ae74
 800a264:	0800ae34 	.word	0x0800ae34
 800a268:	0800ad22 	.word	0x0800ad22
 800a26c:	0800ad2c 	.word	0x0800ad2c
 800a270:	0800815d 	.word	0x0800815d
 800a274:	08009ff7 	.word	0x08009ff7
 800a278:	0800ad28 	.word	0x0800ad28

0800a27c <__swbuf_r>:
 800a27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27e:	460e      	mov	r6, r1
 800a280:	4614      	mov	r4, r2
 800a282:	4605      	mov	r5, r0
 800a284:	b118      	cbz	r0, 800a28e <__swbuf_r+0x12>
 800a286:	6983      	ldr	r3, [r0, #24]
 800a288:	b90b      	cbnz	r3, 800a28e <__swbuf_r+0x12>
 800a28a:	f000 f9e7 	bl	800a65c <__sinit>
 800a28e:	4b21      	ldr	r3, [pc, #132]	; (800a314 <__swbuf_r+0x98>)
 800a290:	429c      	cmp	r4, r3
 800a292:	d12b      	bne.n	800a2ec <__swbuf_r+0x70>
 800a294:	686c      	ldr	r4, [r5, #4]
 800a296:	69a3      	ldr	r3, [r4, #24]
 800a298:	60a3      	str	r3, [r4, #8]
 800a29a:	89a3      	ldrh	r3, [r4, #12]
 800a29c:	071a      	lsls	r2, r3, #28
 800a29e:	d52f      	bpl.n	800a300 <__swbuf_r+0x84>
 800a2a0:	6923      	ldr	r3, [r4, #16]
 800a2a2:	b36b      	cbz	r3, 800a300 <__swbuf_r+0x84>
 800a2a4:	6923      	ldr	r3, [r4, #16]
 800a2a6:	6820      	ldr	r0, [r4, #0]
 800a2a8:	1ac0      	subs	r0, r0, r3
 800a2aa:	6963      	ldr	r3, [r4, #20]
 800a2ac:	b2f6      	uxtb	r6, r6
 800a2ae:	4283      	cmp	r3, r0
 800a2b0:	4637      	mov	r7, r6
 800a2b2:	dc04      	bgt.n	800a2be <__swbuf_r+0x42>
 800a2b4:	4621      	mov	r1, r4
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	f000 f93c 	bl	800a534 <_fflush_r>
 800a2bc:	bb30      	cbnz	r0, 800a30c <__swbuf_r+0x90>
 800a2be:	68a3      	ldr	r3, [r4, #8]
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	60a3      	str	r3, [r4, #8]
 800a2c4:	6823      	ldr	r3, [r4, #0]
 800a2c6:	1c5a      	adds	r2, r3, #1
 800a2c8:	6022      	str	r2, [r4, #0]
 800a2ca:	701e      	strb	r6, [r3, #0]
 800a2cc:	6963      	ldr	r3, [r4, #20]
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	4283      	cmp	r3, r0
 800a2d2:	d004      	beq.n	800a2de <__swbuf_r+0x62>
 800a2d4:	89a3      	ldrh	r3, [r4, #12]
 800a2d6:	07db      	lsls	r3, r3, #31
 800a2d8:	d506      	bpl.n	800a2e8 <__swbuf_r+0x6c>
 800a2da:	2e0a      	cmp	r6, #10
 800a2dc:	d104      	bne.n	800a2e8 <__swbuf_r+0x6c>
 800a2de:	4621      	mov	r1, r4
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	f000 f927 	bl	800a534 <_fflush_r>
 800a2e6:	b988      	cbnz	r0, 800a30c <__swbuf_r+0x90>
 800a2e8:	4638      	mov	r0, r7
 800a2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ec:	4b0a      	ldr	r3, [pc, #40]	; (800a318 <__swbuf_r+0x9c>)
 800a2ee:	429c      	cmp	r4, r3
 800a2f0:	d101      	bne.n	800a2f6 <__swbuf_r+0x7a>
 800a2f2:	68ac      	ldr	r4, [r5, #8]
 800a2f4:	e7cf      	b.n	800a296 <__swbuf_r+0x1a>
 800a2f6:	4b09      	ldr	r3, [pc, #36]	; (800a31c <__swbuf_r+0xa0>)
 800a2f8:	429c      	cmp	r4, r3
 800a2fa:	bf08      	it	eq
 800a2fc:	68ec      	ldreq	r4, [r5, #12]
 800a2fe:	e7ca      	b.n	800a296 <__swbuf_r+0x1a>
 800a300:	4621      	mov	r1, r4
 800a302:	4628      	mov	r0, r5
 800a304:	f000 f81a 	bl	800a33c <__swsetup_r>
 800a308:	2800      	cmp	r0, #0
 800a30a:	d0cb      	beq.n	800a2a4 <__swbuf_r+0x28>
 800a30c:	f04f 37ff 	mov.w	r7, #4294967295
 800a310:	e7ea      	b.n	800a2e8 <__swbuf_r+0x6c>
 800a312:	bf00      	nop
 800a314:	0800ae54 	.word	0x0800ae54
 800a318:	0800ae74 	.word	0x0800ae74
 800a31c:	0800ae34 	.word	0x0800ae34

0800a320 <__ascii_wctomb>:
 800a320:	b149      	cbz	r1, 800a336 <__ascii_wctomb+0x16>
 800a322:	2aff      	cmp	r2, #255	; 0xff
 800a324:	bf85      	ittet	hi
 800a326:	238a      	movhi	r3, #138	; 0x8a
 800a328:	6003      	strhi	r3, [r0, #0]
 800a32a:	700a      	strbls	r2, [r1, #0]
 800a32c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a330:	bf98      	it	ls
 800a332:	2001      	movls	r0, #1
 800a334:	4770      	bx	lr
 800a336:	4608      	mov	r0, r1
 800a338:	4770      	bx	lr
	...

0800a33c <__swsetup_r>:
 800a33c:	4b32      	ldr	r3, [pc, #200]	; (800a408 <__swsetup_r+0xcc>)
 800a33e:	b570      	push	{r4, r5, r6, lr}
 800a340:	681d      	ldr	r5, [r3, #0]
 800a342:	4606      	mov	r6, r0
 800a344:	460c      	mov	r4, r1
 800a346:	b125      	cbz	r5, 800a352 <__swsetup_r+0x16>
 800a348:	69ab      	ldr	r3, [r5, #24]
 800a34a:	b913      	cbnz	r3, 800a352 <__swsetup_r+0x16>
 800a34c:	4628      	mov	r0, r5
 800a34e:	f000 f985 	bl	800a65c <__sinit>
 800a352:	4b2e      	ldr	r3, [pc, #184]	; (800a40c <__swsetup_r+0xd0>)
 800a354:	429c      	cmp	r4, r3
 800a356:	d10f      	bne.n	800a378 <__swsetup_r+0x3c>
 800a358:	686c      	ldr	r4, [r5, #4]
 800a35a:	89a3      	ldrh	r3, [r4, #12]
 800a35c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a360:	0719      	lsls	r1, r3, #28
 800a362:	d42c      	bmi.n	800a3be <__swsetup_r+0x82>
 800a364:	06dd      	lsls	r5, r3, #27
 800a366:	d411      	bmi.n	800a38c <__swsetup_r+0x50>
 800a368:	2309      	movs	r3, #9
 800a36a:	6033      	str	r3, [r6, #0]
 800a36c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a370:	81a3      	strh	r3, [r4, #12]
 800a372:	f04f 30ff 	mov.w	r0, #4294967295
 800a376:	e03e      	b.n	800a3f6 <__swsetup_r+0xba>
 800a378:	4b25      	ldr	r3, [pc, #148]	; (800a410 <__swsetup_r+0xd4>)
 800a37a:	429c      	cmp	r4, r3
 800a37c:	d101      	bne.n	800a382 <__swsetup_r+0x46>
 800a37e:	68ac      	ldr	r4, [r5, #8]
 800a380:	e7eb      	b.n	800a35a <__swsetup_r+0x1e>
 800a382:	4b24      	ldr	r3, [pc, #144]	; (800a414 <__swsetup_r+0xd8>)
 800a384:	429c      	cmp	r4, r3
 800a386:	bf08      	it	eq
 800a388:	68ec      	ldreq	r4, [r5, #12]
 800a38a:	e7e6      	b.n	800a35a <__swsetup_r+0x1e>
 800a38c:	0758      	lsls	r0, r3, #29
 800a38e:	d512      	bpl.n	800a3b6 <__swsetup_r+0x7a>
 800a390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a392:	b141      	cbz	r1, 800a3a6 <__swsetup_r+0x6a>
 800a394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a398:	4299      	cmp	r1, r3
 800a39a:	d002      	beq.n	800a3a2 <__swsetup_r+0x66>
 800a39c:	4630      	mov	r0, r6
 800a39e:	f7ff fcd5 	bl	8009d4c <_free_r>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	6363      	str	r3, [r4, #52]	; 0x34
 800a3a6:	89a3      	ldrh	r3, [r4, #12]
 800a3a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3ac:	81a3      	strh	r3, [r4, #12]
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	6063      	str	r3, [r4, #4]
 800a3b2:	6923      	ldr	r3, [r4, #16]
 800a3b4:	6023      	str	r3, [r4, #0]
 800a3b6:	89a3      	ldrh	r3, [r4, #12]
 800a3b8:	f043 0308 	orr.w	r3, r3, #8
 800a3bc:	81a3      	strh	r3, [r4, #12]
 800a3be:	6923      	ldr	r3, [r4, #16]
 800a3c0:	b94b      	cbnz	r3, 800a3d6 <__swsetup_r+0x9a>
 800a3c2:	89a3      	ldrh	r3, [r4, #12]
 800a3c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3cc:	d003      	beq.n	800a3d6 <__swsetup_r+0x9a>
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	f000 fa09 	bl	800a7e8 <__smakebuf_r>
 800a3d6:	89a0      	ldrh	r0, [r4, #12]
 800a3d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3dc:	f010 0301 	ands.w	r3, r0, #1
 800a3e0:	d00a      	beq.n	800a3f8 <__swsetup_r+0xbc>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	60a3      	str	r3, [r4, #8]
 800a3e6:	6963      	ldr	r3, [r4, #20]
 800a3e8:	425b      	negs	r3, r3
 800a3ea:	61a3      	str	r3, [r4, #24]
 800a3ec:	6923      	ldr	r3, [r4, #16]
 800a3ee:	b943      	cbnz	r3, 800a402 <__swsetup_r+0xc6>
 800a3f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3f4:	d1ba      	bne.n	800a36c <__swsetup_r+0x30>
 800a3f6:	bd70      	pop	{r4, r5, r6, pc}
 800a3f8:	0781      	lsls	r1, r0, #30
 800a3fa:	bf58      	it	pl
 800a3fc:	6963      	ldrpl	r3, [r4, #20]
 800a3fe:	60a3      	str	r3, [r4, #8]
 800a400:	e7f4      	b.n	800a3ec <__swsetup_r+0xb0>
 800a402:	2000      	movs	r0, #0
 800a404:	e7f7      	b.n	800a3f6 <__swsetup_r+0xba>
 800a406:	bf00      	nop
 800a408:	20000104 	.word	0x20000104
 800a40c:	0800ae54 	.word	0x0800ae54
 800a410:	0800ae74 	.word	0x0800ae74
 800a414:	0800ae34 	.word	0x0800ae34

0800a418 <abort>:
 800a418:	b508      	push	{r3, lr}
 800a41a:	2006      	movs	r0, #6
 800a41c:	f000 fa4c 	bl	800a8b8 <raise>
 800a420:	2001      	movs	r0, #1
 800a422:	f7f6 ff7f 	bl	8001324 <_exit>
	...

0800a428 <__sflush_r>:
 800a428:	898a      	ldrh	r2, [r1, #12]
 800a42a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a42e:	4605      	mov	r5, r0
 800a430:	0710      	lsls	r0, r2, #28
 800a432:	460c      	mov	r4, r1
 800a434:	d458      	bmi.n	800a4e8 <__sflush_r+0xc0>
 800a436:	684b      	ldr	r3, [r1, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	dc05      	bgt.n	800a448 <__sflush_r+0x20>
 800a43c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a43e:	2b00      	cmp	r3, #0
 800a440:	dc02      	bgt.n	800a448 <__sflush_r+0x20>
 800a442:	2000      	movs	r0, #0
 800a444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a44a:	2e00      	cmp	r6, #0
 800a44c:	d0f9      	beq.n	800a442 <__sflush_r+0x1a>
 800a44e:	2300      	movs	r3, #0
 800a450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a454:	682f      	ldr	r7, [r5, #0]
 800a456:	602b      	str	r3, [r5, #0]
 800a458:	d032      	beq.n	800a4c0 <__sflush_r+0x98>
 800a45a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a45c:	89a3      	ldrh	r3, [r4, #12]
 800a45e:	075a      	lsls	r2, r3, #29
 800a460:	d505      	bpl.n	800a46e <__sflush_r+0x46>
 800a462:	6863      	ldr	r3, [r4, #4]
 800a464:	1ac0      	subs	r0, r0, r3
 800a466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a468:	b10b      	cbz	r3, 800a46e <__sflush_r+0x46>
 800a46a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a46c:	1ac0      	subs	r0, r0, r3
 800a46e:	2300      	movs	r3, #0
 800a470:	4602      	mov	r2, r0
 800a472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a474:	6a21      	ldr	r1, [r4, #32]
 800a476:	4628      	mov	r0, r5
 800a478:	47b0      	blx	r6
 800a47a:	1c43      	adds	r3, r0, #1
 800a47c:	89a3      	ldrh	r3, [r4, #12]
 800a47e:	d106      	bne.n	800a48e <__sflush_r+0x66>
 800a480:	6829      	ldr	r1, [r5, #0]
 800a482:	291d      	cmp	r1, #29
 800a484:	d82c      	bhi.n	800a4e0 <__sflush_r+0xb8>
 800a486:	4a2a      	ldr	r2, [pc, #168]	; (800a530 <__sflush_r+0x108>)
 800a488:	40ca      	lsrs	r2, r1
 800a48a:	07d6      	lsls	r6, r2, #31
 800a48c:	d528      	bpl.n	800a4e0 <__sflush_r+0xb8>
 800a48e:	2200      	movs	r2, #0
 800a490:	6062      	str	r2, [r4, #4]
 800a492:	04d9      	lsls	r1, r3, #19
 800a494:	6922      	ldr	r2, [r4, #16]
 800a496:	6022      	str	r2, [r4, #0]
 800a498:	d504      	bpl.n	800a4a4 <__sflush_r+0x7c>
 800a49a:	1c42      	adds	r2, r0, #1
 800a49c:	d101      	bne.n	800a4a2 <__sflush_r+0x7a>
 800a49e:	682b      	ldr	r3, [r5, #0]
 800a4a0:	b903      	cbnz	r3, 800a4a4 <__sflush_r+0x7c>
 800a4a2:	6560      	str	r0, [r4, #84]	; 0x54
 800a4a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4a6:	602f      	str	r7, [r5, #0]
 800a4a8:	2900      	cmp	r1, #0
 800a4aa:	d0ca      	beq.n	800a442 <__sflush_r+0x1a>
 800a4ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4b0:	4299      	cmp	r1, r3
 800a4b2:	d002      	beq.n	800a4ba <__sflush_r+0x92>
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	f7ff fc49 	bl	8009d4c <_free_r>
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	6360      	str	r0, [r4, #52]	; 0x34
 800a4be:	e7c1      	b.n	800a444 <__sflush_r+0x1c>
 800a4c0:	6a21      	ldr	r1, [r4, #32]
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	47b0      	blx	r6
 800a4c8:	1c41      	adds	r1, r0, #1
 800a4ca:	d1c7      	bne.n	800a45c <__sflush_r+0x34>
 800a4cc:	682b      	ldr	r3, [r5, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d0c4      	beq.n	800a45c <__sflush_r+0x34>
 800a4d2:	2b1d      	cmp	r3, #29
 800a4d4:	d001      	beq.n	800a4da <__sflush_r+0xb2>
 800a4d6:	2b16      	cmp	r3, #22
 800a4d8:	d101      	bne.n	800a4de <__sflush_r+0xb6>
 800a4da:	602f      	str	r7, [r5, #0]
 800a4dc:	e7b1      	b.n	800a442 <__sflush_r+0x1a>
 800a4de:	89a3      	ldrh	r3, [r4, #12]
 800a4e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e4:	81a3      	strh	r3, [r4, #12]
 800a4e6:	e7ad      	b.n	800a444 <__sflush_r+0x1c>
 800a4e8:	690f      	ldr	r7, [r1, #16]
 800a4ea:	2f00      	cmp	r7, #0
 800a4ec:	d0a9      	beq.n	800a442 <__sflush_r+0x1a>
 800a4ee:	0793      	lsls	r3, r2, #30
 800a4f0:	680e      	ldr	r6, [r1, #0]
 800a4f2:	bf08      	it	eq
 800a4f4:	694b      	ldreq	r3, [r1, #20]
 800a4f6:	600f      	str	r7, [r1, #0]
 800a4f8:	bf18      	it	ne
 800a4fa:	2300      	movne	r3, #0
 800a4fc:	eba6 0807 	sub.w	r8, r6, r7
 800a500:	608b      	str	r3, [r1, #8]
 800a502:	f1b8 0f00 	cmp.w	r8, #0
 800a506:	dd9c      	ble.n	800a442 <__sflush_r+0x1a>
 800a508:	6a21      	ldr	r1, [r4, #32]
 800a50a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a50c:	4643      	mov	r3, r8
 800a50e:	463a      	mov	r2, r7
 800a510:	4628      	mov	r0, r5
 800a512:	47b0      	blx	r6
 800a514:	2800      	cmp	r0, #0
 800a516:	dc06      	bgt.n	800a526 <__sflush_r+0xfe>
 800a518:	89a3      	ldrh	r3, [r4, #12]
 800a51a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a51e:	81a3      	strh	r3, [r4, #12]
 800a520:	f04f 30ff 	mov.w	r0, #4294967295
 800a524:	e78e      	b.n	800a444 <__sflush_r+0x1c>
 800a526:	4407      	add	r7, r0
 800a528:	eba8 0800 	sub.w	r8, r8, r0
 800a52c:	e7e9      	b.n	800a502 <__sflush_r+0xda>
 800a52e:	bf00      	nop
 800a530:	20400001 	.word	0x20400001

0800a534 <_fflush_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	690b      	ldr	r3, [r1, #16]
 800a538:	4605      	mov	r5, r0
 800a53a:	460c      	mov	r4, r1
 800a53c:	b913      	cbnz	r3, 800a544 <_fflush_r+0x10>
 800a53e:	2500      	movs	r5, #0
 800a540:	4628      	mov	r0, r5
 800a542:	bd38      	pop	{r3, r4, r5, pc}
 800a544:	b118      	cbz	r0, 800a54e <_fflush_r+0x1a>
 800a546:	6983      	ldr	r3, [r0, #24]
 800a548:	b90b      	cbnz	r3, 800a54e <_fflush_r+0x1a>
 800a54a:	f000 f887 	bl	800a65c <__sinit>
 800a54e:	4b14      	ldr	r3, [pc, #80]	; (800a5a0 <_fflush_r+0x6c>)
 800a550:	429c      	cmp	r4, r3
 800a552:	d11b      	bne.n	800a58c <_fflush_r+0x58>
 800a554:	686c      	ldr	r4, [r5, #4]
 800a556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d0ef      	beq.n	800a53e <_fflush_r+0xa>
 800a55e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a560:	07d0      	lsls	r0, r2, #31
 800a562:	d404      	bmi.n	800a56e <_fflush_r+0x3a>
 800a564:	0599      	lsls	r1, r3, #22
 800a566:	d402      	bmi.n	800a56e <_fflush_r+0x3a>
 800a568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a56a:	f000 f915 	bl	800a798 <__retarget_lock_acquire_recursive>
 800a56e:	4628      	mov	r0, r5
 800a570:	4621      	mov	r1, r4
 800a572:	f7ff ff59 	bl	800a428 <__sflush_r>
 800a576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a578:	07da      	lsls	r2, r3, #31
 800a57a:	4605      	mov	r5, r0
 800a57c:	d4e0      	bmi.n	800a540 <_fflush_r+0xc>
 800a57e:	89a3      	ldrh	r3, [r4, #12]
 800a580:	059b      	lsls	r3, r3, #22
 800a582:	d4dd      	bmi.n	800a540 <_fflush_r+0xc>
 800a584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a586:	f000 f908 	bl	800a79a <__retarget_lock_release_recursive>
 800a58a:	e7d9      	b.n	800a540 <_fflush_r+0xc>
 800a58c:	4b05      	ldr	r3, [pc, #20]	; (800a5a4 <_fflush_r+0x70>)
 800a58e:	429c      	cmp	r4, r3
 800a590:	d101      	bne.n	800a596 <_fflush_r+0x62>
 800a592:	68ac      	ldr	r4, [r5, #8]
 800a594:	e7df      	b.n	800a556 <_fflush_r+0x22>
 800a596:	4b04      	ldr	r3, [pc, #16]	; (800a5a8 <_fflush_r+0x74>)
 800a598:	429c      	cmp	r4, r3
 800a59a:	bf08      	it	eq
 800a59c:	68ec      	ldreq	r4, [r5, #12]
 800a59e:	e7da      	b.n	800a556 <_fflush_r+0x22>
 800a5a0:	0800ae54 	.word	0x0800ae54
 800a5a4:	0800ae74 	.word	0x0800ae74
 800a5a8:	0800ae34 	.word	0x0800ae34

0800a5ac <std>:
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	b510      	push	{r4, lr}
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	e9c0 3300 	strd	r3, r3, [r0]
 800a5b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5ba:	6083      	str	r3, [r0, #8]
 800a5bc:	8181      	strh	r1, [r0, #12]
 800a5be:	6643      	str	r3, [r0, #100]	; 0x64
 800a5c0:	81c2      	strh	r2, [r0, #14]
 800a5c2:	6183      	str	r3, [r0, #24]
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	2208      	movs	r2, #8
 800a5c8:	305c      	adds	r0, #92	; 0x5c
 800a5ca:	f7fd fd1f 	bl	800800c <memset>
 800a5ce:	4b05      	ldr	r3, [pc, #20]	; (800a5e4 <std+0x38>)
 800a5d0:	6263      	str	r3, [r4, #36]	; 0x24
 800a5d2:	4b05      	ldr	r3, [pc, #20]	; (800a5e8 <std+0x3c>)
 800a5d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5d6:	4b05      	ldr	r3, [pc, #20]	; (800a5ec <std+0x40>)
 800a5d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5da:	4b05      	ldr	r3, [pc, #20]	; (800a5f0 <std+0x44>)
 800a5dc:	6224      	str	r4, [r4, #32]
 800a5de:	6323      	str	r3, [r4, #48]	; 0x30
 800a5e0:	bd10      	pop	{r4, pc}
 800a5e2:	bf00      	nop
 800a5e4:	0800a8f1 	.word	0x0800a8f1
 800a5e8:	0800a913 	.word	0x0800a913
 800a5ec:	0800a94b 	.word	0x0800a94b
 800a5f0:	0800a96f 	.word	0x0800a96f

0800a5f4 <_cleanup_r>:
 800a5f4:	4901      	ldr	r1, [pc, #4]	; (800a5fc <_cleanup_r+0x8>)
 800a5f6:	f000 b8af 	b.w	800a758 <_fwalk_reent>
 800a5fa:	bf00      	nop
 800a5fc:	0800a535 	.word	0x0800a535

0800a600 <__sfmoreglue>:
 800a600:	b570      	push	{r4, r5, r6, lr}
 800a602:	2268      	movs	r2, #104	; 0x68
 800a604:	1e4d      	subs	r5, r1, #1
 800a606:	4355      	muls	r5, r2
 800a608:	460e      	mov	r6, r1
 800a60a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a60e:	f7ff fc09 	bl	8009e24 <_malloc_r>
 800a612:	4604      	mov	r4, r0
 800a614:	b140      	cbz	r0, 800a628 <__sfmoreglue+0x28>
 800a616:	2100      	movs	r1, #0
 800a618:	e9c0 1600 	strd	r1, r6, [r0]
 800a61c:	300c      	adds	r0, #12
 800a61e:	60a0      	str	r0, [r4, #8]
 800a620:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a624:	f7fd fcf2 	bl	800800c <memset>
 800a628:	4620      	mov	r0, r4
 800a62a:	bd70      	pop	{r4, r5, r6, pc}

0800a62c <__sfp_lock_acquire>:
 800a62c:	4801      	ldr	r0, [pc, #4]	; (800a634 <__sfp_lock_acquire+0x8>)
 800a62e:	f000 b8b3 	b.w	800a798 <__retarget_lock_acquire_recursive>
 800a632:	bf00      	nop
 800a634:	20001f61 	.word	0x20001f61

0800a638 <__sfp_lock_release>:
 800a638:	4801      	ldr	r0, [pc, #4]	; (800a640 <__sfp_lock_release+0x8>)
 800a63a:	f000 b8ae 	b.w	800a79a <__retarget_lock_release_recursive>
 800a63e:	bf00      	nop
 800a640:	20001f61 	.word	0x20001f61

0800a644 <__sinit_lock_acquire>:
 800a644:	4801      	ldr	r0, [pc, #4]	; (800a64c <__sinit_lock_acquire+0x8>)
 800a646:	f000 b8a7 	b.w	800a798 <__retarget_lock_acquire_recursive>
 800a64a:	bf00      	nop
 800a64c:	20001f62 	.word	0x20001f62

0800a650 <__sinit_lock_release>:
 800a650:	4801      	ldr	r0, [pc, #4]	; (800a658 <__sinit_lock_release+0x8>)
 800a652:	f000 b8a2 	b.w	800a79a <__retarget_lock_release_recursive>
 800a656:	bf00      	nop
 800a658:	20001f62 	.word	0x20001f62

0800a65c <__sinit>:
 800a65c:	b510      	push	{r4, lr}
 800a65e:	4604      	mov	r4, r0
 800a660:	f7ff fff0 	bl	800a644 <__sinit_lock_acquire>
 800a664:	69a3      	ldr	r3, [r4, #24]
 800a666:	b11b      	cbz	r3, 800a670 <__sinit+0x14>
 800a668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a66c:	f7ff bff0 	b.w	800a650 <__sinit_lock_release>
 800a670:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a674:	6523      	str	r3, [r4, #80]	; 0x50
 800a676:	4b13      	ldr	r3, [pc, #76]	; (800a6c4 <__sinit+0x68>)
 800a678:	4a13      	ldr	r2, [pc, #76]	; (800a6c8 <__sinit+0x6c>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a67e:	42a3      	cmp	r3, r4
 800a680:	bf04      	itt	eq
 800a682:	2301      	moveq	r3, #1
 800a684:	61a3      	streq	r3, [r4, #24]
 800a686:	4620      	mov	r0, r4
 800a688:	f000 f820 	bl	800a6cc <__sfp>
 800a68c:	6060      	str	r0, [r4, #4]
 800a68e:	4620      	mov	r0, r4
 800a690:	f000 f81c 	bl	800a6cc <__sfp>
 800a694:	60a0      	str	r0, [r4, #8]
 800a696:	4620      	mov	r0, r4
 800a698:	f000 f818 	bl	800a6cc <__sfp>
 800a69c:	2200      	movs	r2, #0
 800a69e:	60e0      	str	r0, [r4, #12]
 800a6a0:	2104      	movs	r1, #4
 800a6a2:	6860      	ldr	r0, [r4, #4]
 800a6a4:	f7ff ff82 	bl	800a5ac <std>
 800a6a8:	68a0      	ldr	r0, [r4, #8]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	2109      	movs	r1, #9
 800a6ae:	f7ff ff7d 	bl	800a5ac <std>
 800a6b2:	68e0      	ldr	r0, [r4, #12]
 800a6b4:	2202      	movs	r2, #2
 800a6b6:	2112      	movs	r1, #18
 800a6b8:	f7ff ff78 	bl	800a5ac <std>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	61a3      	str	r3, [r4, #24]
 800a6c0:	e7d2      	b.n	800a668 <__sinit+0xc>
 800a6c2:	bf00      	nop
 800a6c4:	0800aab8 	.word	0x0800aab8
 800a6c8:	0800a5f5 	.word	0x0800a5f5

0800a6cc <__sfp>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	4607      	mov	r7, r0
 800a6d0:	f7ff ffac 	bl	800a62c <__sfp_lock_acquire>
 800a6d4:	4b1e      	ldr	r3, [pc, #120]	; (800a750 <__sfp+0x84>)
 800a6d6:	681e      	ldr	r6, [r3, #0]
 800a6d8:	69b3      	ldr	r3, [r6, #24]
 800a6da:	b913      	cbnz	r3, 800a6e2 <__sfp+0x16>
 800a6dc:	4630      	mov	r0, r6
 800a6de:	f7ff ffbd 	bl	800a65c <__sinit>
 800a6e2:	3648      	adds	r6, #72	; 0x48
 800a6e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	d503      	bpl.n	800a6f4 <__sfp+0x28>
 800a6ec:	6833      	ldr	r3, [r6, #0]
 800a6ee:	b30b      	cbz	r3, 800a734 <__sfp+0x68>
 800a6f0:	6836      	ldr	r6, [r6, #0]
 800a6f2:	e7f7      	b.n	800a6e4 <__sfp+0x18>
 800a6f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a6f8:	b9d5      	cbnz	r5, 800a730 <__sfp+0x64>
 800a6fa:	4b16      	ldr	r3, [pc, #88]	; (800a754 <__sfp+0x88>)
 800a6fc:	60e3      	str	r3, [r4, #12]
 800a6fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a702:	6665      	str	r5, [r4, #100]	; 0x64
 800a704:	f000 f847 	bl	800a796 <__retarget_lock_init_recursive>
 800a708:	f7ff ff96 	bl	800a638 <__sfp_lock_release>
 800a70c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a714:	6025      	str	r5, [r4, #0]
 800a716:	61a5      	str	r5, [r4, #24]
 800a718:	2208      	movs	r2, #8
 800a71a:	4629      	mov	r1, r5
 800a71c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a720:	f7fd fc74 	bl	800800c <memset>
 800a724:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a728:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a72c:	4620      	mov	r0, r4
 800a72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a730:	3468      	adds	r4, #104	; 0x68
 800a732:	e7d9      	b.n	800a6e8 <__sfp+0x1c>
 800a734:	2104      	movs	r1, #4
 800a736:	4638      	mov	r0, r7
 800a738:	f7ff ff62 	bl	800a600 <__sfmoreglue>
 800a73c:	4604      	mov	r4, r0
 800a73e:	6030      	str	r0, [r6, #0]
 800a740:	2800      	cmp	r0, #0
 800a742:	d1d5      	bne.n	800a6f0 <__sfp+0x24>
 800a744:	f7ff ff78 	bl	800a638 <__sfp_lock_release>
 800a748:	230c      	movs	r3, #12
 800a74a:	603b      	str	r3, [r7, #0]
 800a74c:	e7ee      	b.n	800a72c <__sfp+0x60>
 800a74e:	bf00      	nop
 800a750:	0800aab8 	.word	0x0800aab8
 800a754:	ffff0001 	.word	0xffff0001

0800a758 <_fwalk_reent>:
 800a758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a75c:	4606      	mov	r6, r0
 800a75e:	4688      	mov	r8, r1
 800a760:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a764:	2700      	movs	r7, #0
 800a766:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a76a:	f1b9 0901 	subs.w	r9, r9, #1
 800a76e:	d505      	bpl.n	800a77c <_fwalk_reent+0x24>
 800a770:	6824      	ldr	r4, [r4, #0]
 800a772:	2c00      	cmp	r4, #0
 800a774:	d1f7      	bne.n	800a766 <_fwalk_reent+0xe>
 800a776:	4638      	mov	r0, r7
 800a778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a77c:	89ab      	ldrh	r3, [r5, #12]
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d907      	bls.n	800a792 <_fwalk_reent+0x3a>
 800a782:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a786:	3301      	adds	r3, #1
 800a788:	d003      	beq.n	800a792 <_fwalk_reent+0x3a>
 800a78a:	4629      	mov	r1, r5
 800a78c:	4630      	mov	r0, r6
 800a78e:	47c0      	blx	r8
 800a790:	4307      	orrs	r7, r0
 800a792:	3568      	adds	r5, #104	; 0x68
 800a794:	e7e9      	b.n	800a76a <_fwalk_reent+0x12>

0800a796 <__retarget_lock_init_recursive>:
 800a796:	4770      	bx	lr

0800a798 <__retarget_lock_acquire_recursive>:
 800a798:	4770      	bx	lr

0800a79a <__retarget_lock_release_recursive>:
 800a79a:	4770      	bx	lr

0800a79c <__swhatbuf_r>:
 800a79c:	b570      	push	{r4, r5, r6, lr}
 800a79e:	460e      	mov	r6, r1
 800a7a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a4:	2900      	cmp	r1, #0
 800a7a6:	b096      	sub	sp, #88	; 0x58
 800a7a8:	4614      	mov	r4, r2
 800a7aa:	461d      	mov	r5, r3
 800a7ac:	da08      	bge.n	800a7c0 <__swhatbuf_r+0x24>
 800a7ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	602a      	str	r2, [r5, #0]
 800a7b6:	061a      	lsls	r2, r3, #24
 800a7b8:	d410      	bmi.n	800a7dc <__swhatbuf_r+0x40>
 800a7ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7be:	e00e      	b.n	800a7de <__swhatbuf_r+0x42>
 800a7c0:	466a      	mov	r2, sp
 800a7c2:	f000 f8fb 	bl	800a9bc <_fstat_r>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	dbf1      	blt.n	800a7ae <__swhatbuf_r+0x12>
 800a7ca:	9a01      	ldr	r2, [sp, #4]
 800a7cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7d4:	425a      	negs	r2, r3
 800a7d6:	415a      	adcs	r2, r3
 800a7d8:	602a      	str	r2, [r5, #0]
 800a7da:	e7ee      	b.n	800a7ba <__swhatbuf_r+0x1e>
 800a7dc:	2340      	movs	r3, #64	; 0x40
 800a7de:	2000      	movs	r0, #0
 800a7e0:	6023      	str	r3, [r4, #0]
 800a7e2:	b016      	add	sp, #88	; 0x58
 800a7e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a7e8 <__smakebuf_r>:
 800a7e8:	898b      	ldrh	r3, [r1, #12]
 800a7ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7ec:	079d      	lsls	r5, r3, #30
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	460c      	mov	r4, r1
 800a7f2:	d507      	bpl.n	800a804 <__smakebuf_r+0x1c>
 800a7f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7f8:	6023      	str	r3, [r4, #0]
 800a7fa:	6123      	str	r3, [r4, #16]
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	6163      	str	r3, [r4, #20]
 800a800:	b002      	add	sp, #8
 800a802:	bd70      	pop	{r4, r5, r6, pc}
 800a804:	ab01      	add	r3, sp, #4
 800a806:	466a      	mov	r2, sp
 800a808:	f7ff ffc8 	bl	800a79c <__swhatbuf_r>
 800a80c:	9900      	ldr	r1, [sp, #0]
 800a80e:	4605      	mov	r5, r0
 800a810:	4630      	mov	r0, r6
 800a812:	f7ff fb07 	bl	8009e24 <_malloc_r>
 800a816:	b948      	cbnz	r0, 800a82c <__smakebuf_r+0x44>
 800a818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a81c:	059a      	lsls	r2, r3, #22
 800a81e:	d4ef      	bmi.n	800a800 <__smakebuf_r+0x18>
 800a820:	f023 0303 	bic.w	r3, r3, #3
 800a824:	f043 0302 	orr.w	r3, r3, #2
 800a828:	81a3      	strh	r3, [r4, #12]
 800a82a:	e7e3      	b.n	800a7f4 <__smakebuf_r+0xc>
 800a82c:	4b0d      	ldr	r3, [pc, #52]	; (800a864 <__smakebuf_r+0x7c>)
 800a82e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	6020      	str	r0, [r4, #0]
 800a834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a838:	81a3      	strh	r3, [r4, #12]
 800a83a:	9b00      	ldr	r3, [sp, #0]
 800a83c:	6163      	str	r3, [r4, #20]
 800a83e:	9b01      	ldr	r3, [sp, #4]
 800a840:	6120      	str	r0, [r4, #16]
 800a842:	b15b      	cbz	r3, 800a85c <__smakebuf_r+0x74>
 800a844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a848:	4630      	mov	r0, r6
 800a84a:	f000 f8c9 	bl	800a9e0 <_isatty_r>
 800a84e:	b128      	cbz	r0, 800a85c <__smakebuf_r+0x74>
 800a850:	89a3      	ldrh	r3, [r4, #12]
 800a852:	f023 0303 	bic.w	r3, r3, #3
 800a856:	f043 0301 	orr.w	r3, r3, #1
 800a85a:	81a3      	strh	r3, [r4, #12]
 800a85c:	89a0      	ldrh	r0, [r4, #12]
 800a85e:	4305      	orrs	r5, r0
 800a860:	81a5      	strh	r5, [r4, #12]
 800a862:	e7cd      	b.n	800a800 <__smakebuf_r+0x18>
 800a864:	0800a5f5 	.word	0x0800a5f5

0800a868 <_raise_r>:
 800a868:	291f      	cmp	r1, #31
 800a86a:	b538      	push	{r3, r4, r5, lr}
 800a86c:	4604      	mov	r4, r0
 800a86e:	460d      	mov	r5, r1
 800a870:	d904      	bls.n	800a87c <_raise_r+0x14>
 800a872:	2316      	movs	r3, #22
 800a874:	6003      	str	r3, [r0, #0]
 800a876:	f04f 30ff 	mov.w	r0, #4294967295
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
 800a87c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a87e:	b112      	cbz	r2, 800a886 <_raise_r+0x1e>
 800a880:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a884:	b94b      	cbnz	r3, 800a89a <_raise_r+0x32>
 800a886:	4620      	mov	r0, r4
 800a888:	f000 f830 	bl	800a8ec <_getpid_r>
 800a88c:	462a      	mov	r2, r5
 800a88e:	4601      	mov	r1, r0
 800a890:	4620      	mov	r0, r4
 800a892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a896:	f000 b817 	b.w	800a8c8 <_kill_r>
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d00a      	beq.n	800a8b4 <_raise_r+0x4c>
 800a89e:	1c59      	adds	r1, r3, #1
 800a8a0:	d103      	bne.n	800a8aa <_raise_r+0x42>
 800a8a2:	2316      	movs	r3, #22
 800a8a4:	6003      	str	r3, [r0, #0]
 800a8a6:	2001      	movs	r0, #1
 800a8a8:	e7e7      	b.n	800a87a <_raise_r+0x12>
 800a8aa:	2400      	movs	r4, #0
 800a8ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	4798      	blx	r3
 800a8b4:	2000      	movs	r0, #0
 800a8b6:	e7e0      	b.n	800a87a <_raise_r+0x12>

0800a8b8 <raise>:
 800a8b8:	4b02      	ldr	r3, [pc, #8]	; (800a8c4 <raise+0xc>)
 800a8ba:	4601      	mov	r1, r0
 800a8bc:	6818      	ldr	r0, [r3, #0]
 800a8be:	f7ff bfd3 	b.w	800a868 <_raise_r>
 800a8c2:	bf00      	nop
 800a8c4:	20000104 	.word	0x20000104

0800a8c8 <_kill_r>:
 800a8c8:	b538      	push	{r3, r4, r5, lr}
 800a8ca:	4d07      	ldr	r5, [pc, #28]	; (800a8e8 <_kill_r+0x20>)
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	4608      	mov	r0, r1
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	602b      	str	r3, [r5, #0]
 800a8d6:	f7f6 fd15 	bl	8001304 <_kill>
 800a8da:	1c43      	adds	r3, r0, #1
 800a8dc:	d102      	bne.n	800a8e4 <_kill_r+0x1c>
 800a8de:	682b      	ldr	r3, [r5, #0]
 800a8e0:	b103      	cbz	r3, 800a8e4 <_kill_r+0x1c>
 800a8e2:	6023      	str	r3, [r4, #0]
 800a8e4:	bd38      	pop	{r3, r4, r5, pc}
 800a8e6:	bf00      	nop
 800a8e8:	20001f5c 	.word	0x20001f5c

0800a8ec <_getpid_r>:
 800a8ec:	f7f6 bd02 	b.w	80012f4 <_getpid>

0800a8f0 <__sread>:
 800a8f0:	b510      	push	{r4, lr}
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f8:	f000 f894 	bl	800aa24 <_read_r>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	bfab      	itete	ge
 800a900:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a902:	89a3      	ldrhlt	r3, [r4, #12]
 800a904:	181b      	addge	r3, r3, r0
 800a906:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a90a:	bfac      	ite	ge
 800a90c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a90e:	81a3      	strhlt	r3, [r4, #12]
 800a910:	bd10      	pop	{r4, pc}

0800a912 <__swrite>:
 800a912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a916:	461f      	mov	r7, r3
 800a918:	898b      	ldrh	r3, [r1, #12]
 800a91a:	05db      	lsls	r3, r3, #23
 800a91c:	4605      	mov	r5, r0
 800a91e:	460c      	mov	r4, r1
 800a920:	4616      	mov	r6, r2
 800a922:	d505      	bpl.n	800a930 <__swrite+0x1e>
 800a924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a928:	2302      	movs	r3, #2
 800a92a:	2200      	movs	r2, #0
 800a92c:	f000 f868 	bl	800aa00 <_lseek_r>
 800a930:	89a3      	ldrh	r3, [r4, #12]
 800a932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a93a:	81a3      	strh	r3, [r4, #12]
 800a93c:	4632      	mov	r2, r6
 800a93e:	463b      	mov	r3, r7
 800a940:	4628      	mov	r0, r5
 800a942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a946:	f000 b817 	b.w	800a978 <_write_r>

0800a94a <__sseek>:
 800a94a:	b510      	push	{r4, lr}
 800a94c:	460c      	mov	r4, r1
 800a94e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a952:	f000 f855 	bl	800aa00 <_lseek_r>
 800a956:	1c43      	adds	r3, r0, #1
 800a958:	89a3      	ldrh	r3, [r4, #12]
 800a95a:	bf15      	itete	ne
 800a95c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a95e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a962:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a966:	81a3      	strheq	r3, [r4, #12]
 800a968:	bf18      	it	ne
 800a96a:	81a3      	strhne	r3, [r4, #12]
 800a96c:	bd10      	pop	{r4, pc}

0800a96e <__sclose>:
 800a96e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a972:	f000 b813 	b.w	800a99c <_close_r>
	...

0800a978 <_write_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4d07      	ldr	r5, [pc, #28]	; (800a998 <_write_r+0x20>)
 800a97c:	4604      	mov	r4, r0
 800a97e:	4608      	mov	r0, r1
 800a980:	4611      	mov	r1, r2
 800a982:	2200      	movs	r2, #0
 800a984:	602a      	str	r2, [r5, #0]
 800a986:	461a      	mov	r2, r3
 800a988:	f7f6 fcf3 	bl	8001372 <_write>
 800a98c:	1c43      	adds	r3, r0, #1
 800a98e:	d102      	bne.n	800a996 <_write_r+0x1e>
 800a990:	682b      	ldr	r3, [r5, #0]
 800a992:	b103      	cbz	r3, 800a996 <_write_r+0x1e>
 800a994:	6023      	str	r3, [r4, #0]
 800a996:	bd38      	pop	{r3, r4, r5, pc}
 800a998:	20001f5c 	.word	0x20001f5c

0800a99c <_close_r>:
 800a99c:	b538      	push	{r3, r4, r5, lr}
 800a99e:	4d06      	ldr	r5, [pc, #24]	; (800a9b8 <_close_r+0x1c>)
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	4608      	mov	r0, r1
 800a9a6:	602b      	str	r3, [r5, #0]
 800a9a8:	f7f6 fcff 	bl	80013aa <_close>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	d102      	bne.n	800a9b6 <_close_r+0x1a>
 800a9b0:	682b      	ldr	r3, [r5, #0]
 800a9b2:	b103      	cbz	r3, 800a9b6 <_close_r+0x1a>
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	bd38      	pop	{r3, r4, r5, pc}
 800a9b8:	20001f5c 	.word	0x20001f5c

0800a9bc <_fstat_r>:
 800a9bc:	b538      	push	{r3, r4, r5, lr}
 800a9be:	4d07      	ldr	r5, [pc, #28]	; (800a9dc <_fstat_r+0x20>)
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	4608      	mov	r0, r1
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	602b      	str	r3, [r5, #0]
 800a9ca:	f7f6 fcfa 	bl	80013c2 <_fstat>
 800a9ce:	1c43      	adds	r3, r0, #1
 800a9d0:	d102      	bne.n	800a9d8 <_fstat_r+0x1c>
 800a9d2:	682b      	ldr	r3, [r5, #0]
 800a9d4:	b103      	cbz	r3, 800a9d8 <_fstat_r+0x1c>
 800a9d6:	6023      	str	r3, [r4, #0]
 800a9d8:	bd38      	pop	{r3, r4, r5, pc}
 800a9da:	bf00      	nop
 800a9dc:	20001f5c 	.word	0x20001f5c

0800a9e0 <_isatty_r>:
 800a9e0:	b538      	push	{r3, r4, r5, lr}
 800a9e2:	4d06      	ldr	r5, [pc, #24]	; (800a9fc <_isatty_r+0x1c>)
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	4608      	mov	r0, r1
 800a9ea:	602b      	str	r3, [r5, #0]
 800a9ec:	f7f6 fcf9 	bl	80013e2 <_isatty>
 800a9f0:	1c43      	adds	r3, r0, #1
 800a9f2:	d102      	bne.n	800a9fa <_isatty_r+0x1a>
 800a9f4:	682b      	ldr	r3, [r5, #0]
 800a9f6:	b103      	cbz	r3, 800a9fa <_isatty_r+0x1a>
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	bd38      	pop	{r3, r4, r5, pc}
 800a9fc:	20001f5c 	.word	0x20001f5c

0800aa00 <_lseek_r>:
 800aa00:	b538      	push	{r3, r4, r5, lr}
 800aa02:	4d07      	ldr	r5, [pc, #28]	; (800aa20 <_lseek_r+0x20>)
 800aa04:	4604      	mov	r4, r0
 800aa06:	4608      	mov	r0, r1
 800aa08:	4611      	mov	r1, r2
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	602a      	str	r2, [r5, #0]
 800aa0e:	461a      	mov	r2, r3
 800aa10:	f7f6 fcf2 	bl	80013f8 <_lseek>
 800aa14:	1c43      	adds	r3, r0, #1
 800aa16:	d102      	bne.n	800aa1e <_lseek_r+0x1e>
 800aa18:	682b      	ldr	r3, [r5, #0]
 800aa1a:	b103      	cbz	r3, 800aa1e <_lseek_r+0x1e>
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	bd38      	pop	{r3, r4, r5, pc}
 800aa20:	20001f5c 	.word	0x20001f5c

0800aa24 <_read_r>:
 800aa24:	b538      	push	{r3, r4, r5, lr}
 800aa26:	4d07      	ldr	r5, [pc, #28]	; (800aa44 <_read_r+0x20>)
 800aa28:	4604      	mov	r4, r0
 800aa2a:	4608      	mov	r0, r1
 800aa2c:	4611      	mov	r1, r2
 800aa2e:	2200      	movs	r2, #0
 800aa30:	602a      	str	r2, [r5, #0]
 800aa32:	461a      	mov	r2, r3
 800aa34:	f7f6 fc80 	bl	8001338 <_read>
 800aa38:	1c43      	adds	r3, r0, #1
 800aa3a:	d102      	bne.n	800aa42 <_read_r+0x1e>
 800aa3c:	682b      	ldr	r3, [r5, #0]
 800aa3e:	b103      	cbz	r3, 800aa42 <_read_r+0x1e>
 800aa40:	6023      	str	r3, [r4, #0]
 800aa42:	bd38      	pop	{r3, r4, r5, pc}
 800aa44:	20001f5c 	.word	0x20001f5c

0800aa48 <_init>:
 800aa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4a:	bf00      	nop
 800aa4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa4e:	bc08      	pop	{r3}
 800aa50:	469e      	mov	lr, r3
 800aa52:	4770      	bx	lr

0800aa54 <_fini>:
 800aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa56:	bf00      	nop
 800aa58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa5a:	bc08      	pop	{r3}
 800aa5c:	469e      	mov	lr, r3
 800aa5e:	4770      	bx	lr
